<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OurBit</title>
    <description>Ourbit is a blog dedicated to IT topics such as programming, management, qa, and technology in general</description>
    <link>http://ourbit.github.io//</link>
    <atom:link href="http://ourbit.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 09 Oct 2016 18:35:29 -0300</pubDate>
    <lastBuildDate>Sun, 09 Oct 2016 18:35:29 -0300</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Los acrónimos realmente apestan</title>
        <description>&lt;p&gt;Mientras leía “Elon Musk”, en un colectivo, camino a casa, no pude evitar reirme de un email que envió a todos los empleados de SpaceX acerca del mal o excesivo uso de acrónimos. El asunto del mail era “Acronyms Seriously Suck” (Los acrónimos realmente apestan) (ustedes mismos pueden resolver el acrónimo para esa línea).&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;p&gt;Me hizo acordar a mis tiempos en IBM Argentina, en donde este anti-patrón era tan popular que incluso existía un rumor que contaba que alguna vez, los acrónimos estaban prohibidos (y yo particularmente, creo en este rumor. ¡Hasta el nombre de la empresa es un acrónimo!)&lt;/p&gt;

&lt;p&gt;Este es un claro ejemplo de que no siempre “Menos es Más”. A veces, “Suficiente es simple y exáctamente Suficiente”. ¡Que lo disfruten!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hay una tendencia progresiva en el uso de acrónimos inventados en SpaceX. El uso excesivo de acrónimos inventados es un impedimento de comunicación significativo, y es imperativamente importante mantener una buena comunicación a medida que vamos creciendo. Individualmente, un par de acrónimos aquí y allá pueden no parecer tan malos, pero si mil personas los están inventando, con el correr del tiempo el resultado va a ser un enorme glosario que deberá ser entregado a los empleados que ingresan a la compañía. Nadie realmente puede recordar todos estos acrónimos y a nadie le gusta quedar como un tonto en una reunión, por lo que simplemente nos sentamos allí y permanecemos ignorantes. Esto es particularmente difícil para los nuevos empleados.&lt;/p&gt;

  &lt;p&gt;Esto necesita parar inmediatamente o voy a tomar medidas drásticas. Ya he advertido lo suficiente con el correr de los años. A menos que un acrónimo sea aprobado por mi, no debe ser parte del glosario de SpaceX. Si existe algún acrónimo que no pueda ser razonablemente justificado, debe ser eliminado, como ya lo he solicitado en el pasado.&lt;/p&gt;

  &lt;p&gt;Por ejemplo, no debería haber acrónimos como “BPH” [banco de pruebas horizontal] (originalmente “HTS” [horizontal test stand]) o “BPV” [banco de pruebas vertical] (originalmente “VTS” [vertical test stand]) para bancos de prueba. Estos son particularmente ridículos ya que contienen palabras innecesarias. Un banco (stand) en nuestro sitio de pruebas es obviamente un banco de &lt;em&gt;pruebas&lt;/em&gt;. BPV-3 (VTS-3) tiene cuatro sílabas comparado con “Trípode” (tripod) que tiene solo dos, por lo que el maldito acrónimo en realidad ¡es más largo de pronunciar que el nombre real! La clave para probar un acrónimo es preguntarse si ayuda o daña la comunicación. Un acrónimo que la mayoría de los ingenieros fuera de SpaceX ya conocen, como ser GUI, puede ser usado. Está bien también inventar un par de acrónimos/contracciones de vez en cuando, asumiendo que yo los he aprobado, por ejemplo MVac and M9 en lugar de Merlin 1C-Vacuum o Merlin 1C-Sea Level, pero estos casos deben ser mantenidos al mínimo.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 04 Oct 2016 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2016/10/04/ass/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2016/10/04/ass/</guid>
        
        <category>Elon</category>
        
        <category>Musk</category>
        
        <category>SpaceX</category>
        
        <category>Tesla</category>
        
        <category>SolarCity</category>
        
        <category>Acronyms</category>
        
        <category>fun</category>
        
        
      </item>
    
      <item>
        <title>Acronyms seriously suck</title>
        <description>&lt;p&gt;While I was reading “Elon Musk”, on a bus while commuting home, I couldn’t help laughing of an email he sent to all SpaceX employees regarding to the misuse or excessive use of acronyms. The subject line was: “Acronyms Seriously Suck” (you can figure out the acronym for it by yourselves).&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;p&gt;It made me remember my time working at IBM Argentina, where this antipattern was so popular that there was even a rumor saying that once upon a time, acronyms had been forbidden (and I believe it. Even the company name is an acronym!)&lt;/p&gt;

&lt;p&gt;This is a clearly showing it is not always true that “Less is More”. Sometimes, “Enough is simply and exactly Enough”. Enjoy!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There is a creeping tendency to use made up acronyms at SpaceX. Excessive use of made up acronyms is a significant impediment to communication and keeping communication good as we grow is incredibly important. Individually, a few acronyms here and there may not seem so bad, but if a thousand people are making these up, over time the result will be a huge glossary that we have to issue to new employees. No one can actually remember all these acronyms and people don’t want to seem dumb in a meeting, so they just sit there in ignorance. This is particularly tough on new employees.&lt;/p&gt;

  &lt;p&gt;That needs to stop immediately or I will take drastic action. I have given enough warnings over the years. Unless an acronym is approved by me, it should not enter the SpaceX glossary. If there is an existing acronym that cannot reasonably be justified, it should be eliminated, as I have requested in the past.&lt;/p&gt;

  &lt;p&gt;For example, there should be no “HTS” [horizontal test stand] or “VTS” [vertical test stand] designations for test stands. Those are particularly dumb, as they contain unnecessary words. A “stand” at our test site is obviously a &lt;em&gt;test&lt;/em&gt; stand. VTS-3 is four syllables compared with “Tripod,” which is two, so the bloody acronym version actually takes longer to say than the name! The key test for an acronym is to ask whether it helps or hurts communication. An acronym that most engineers outside of SpaceX already know, such as GUI, is fine to use. It is also ok to make up a few acronyms/contractions every now and again, assuming I have approved them, eg MVac and M9 instead of Merlin 1C-Vacuum or Merlin 1C-Sea Level, but those need to be kept to a minimum.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 04 Oct 2016 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//en/2016/10/04/ass/</link>
        <guid isPermaLink="true">http://ourbit.github.io//en/2016/10/04/ass/</guid>
        
        <category>Elon</category>
        
        <category>Musk</category>
        
        <category>SpaceX</category>
        
        <category>Tesla</category>
        
        <category>SolarCity</category>
        
        <category>Acronyms</category>
        
        <category>fun</category>
        
        
      </item>
    
      <item>
        <title>Una recopilación de patologías de los Arquitectos de Software</title>
        <description>&lt;p&gt;&lt;em&gt;Por &lt;a href=&quot;https://ar.linkedin.com/in/mchicote&quot;&gt;Marcos Chicote&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/guidodecaso&quot;&gt;Guido de Caso&lt;/a&gt;, y &lt;a href=&quot;https://twitter.com/nohorbee&quot;&gt;Norberto Herz&lt;/a&gt;&lt;/em&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Poco después de que el campo de las arquitecturas de software naciera formalmente, gracias al trabajo de Garlan, Shaw, Notkin y otros a principios de los 90s, el rol del “Arquitecto de Software” apareció en el área del desarrollo de software. De acuerdo con las definiciones de la comunidad de Arquitectura de Software, el trabajo de un arquitecto es definir el diseño de alto nivel de un sistema de software, o en otras palabras, tomar las principales decisiones de diseño para construir ese puente entre requerimientos e implementación.&lt;br /&gt;
Sin embargo, llevado a la práctica no es tan sencillo. El trabajo del arquitecto está lleno de “trampas” y contradicciones. En este artículo describimos cinco patologías que pueden afectar a los arquitectos de software, incluyendo síntomas y tratamiento, con el objeto de disparar algunas discusiones acerca del rol y su evolución esperada.&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;h2 id=&quot;introduccin&quot;&gt;Introducción&lt;/h2&gt;

&lt;p&gt;No hay duda de que la Ingeniería de Software ha evolucionado constantemente durante las últimas cinco décadas. Los sistemas operativos nos han provisto cada vez mejor de una capa de abstracción de las complejidades del hardware moderno. Los procesos Lean y Agile nos han permitido iterar más velozmente. Tecnologías más económicos y accesibles han disminuido la barrera para obtener equipos de alta performance y han abierto la puerta a solucionar problemas más ambiciosos en diversos campos tales como la medicina, la industria aeroespacial, ámbito académico o comercio electrónico.&lt;/p&gt;

&lt;p&gt;La forma en que los ingenieros nos organizamos para construir software que soluciona problemas complejos también ha cambiado. Desde personas escribiendo programas para mainframes hasta grandes empresas con varias líneas de productos y plataformas. El rol del Arquitecto de Software ha aparecido mayormente en el contexto de aplicaciónes multi-capa en las cuales la cantidad de opciones de implementación creció exponencialmente. &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=579257&quot;&gt;[1]&lt;/a&gt; &lt;a href=&quot;http://www.bredemeyer.com/pdf_files/role.pdf&quot;&gt;[2]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Las responsabilidades y tareas de los Arquitectos de Software son variadas y dependen en gran medida de la compañía y el contexto. Hay leves variaciones de estas responsabilidades dependiendo de si nos referimos a un Arquitecto de Aplicación o un Enterprise Architect. Pero, independientemente de dichas diferencias, podemos definir el alcance del Arquitecto de Software mayormente por las siguientes áreas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Subdividir el diseño de aplicaciónes grandes en partes más pequeñas y fáciles de manejar.&lt;/li&gt;
  &lt;li&gt;Identificar tecnologías, frameworks, patrones, mejoras de proceso y mejores prácticas que son adoptadas por una organización y comunicarlas a los desarrolladores, estableciendo relaciones de mentoring.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pero, mientras esta enumeración sirve al propósito de describir un &lt;em&gt;template&lt;/em&gt; de la descripción del trabajo de un Arquitecto de Software, no responde a preguntas tales como qué características o tareas diferencian a los Arquitectos de Software que más impacto generan, de sus colegas. Cómo está definido el Path de carrera de un Arquitecto de Software y de dónde vienen la mayoría de ellos. Cómo pueden encontrar el equilibrio entre convertirse en grandes generalistas en lugar de los mejores especialistas.&lt;/p&gt;

&lt;p&gt;En este artículo nos proponemos explorar y discutir algunos de estos temas. Lo hacemos mediante una serie de posibles contradicciones o falacias que surgen de la tensión entre fuerzas opuestas en la vida de un Arquitecto de Software: Ser un mentor vs. evangelizar, escribir código vs. estar en reuniones, entre otros dilemas.&lt;/p&gt;

&lt;p&gt;Presentamos estas aparentes contradicciones como patologías. La palabra “patología” tiene su origen en el antiguo Griego en donde pathos (πάθος) significa “experiencia” o “sufrimiento”, y -logia (-λογία) significa “estudio de”. Esperamos que este artículo dispare discusiones interesantes entre los compañeros Arquitectos de Software y nos haga pensar acerca de algunos problemas frecuentes que enfrentamos en nuestra práctica profesional.&lt;/p&gt;

&lt;p&gt;El lector atento debería ser advertido de que algunas de las patologías serán particularmente más acertadas para Arquitectos de Software en situaciones específicas como ser compañías con equipos de desarrollo distribuidos geográficamente, o compañías de tamaño medio a grande. En cualquier caso, creemos que las mismas abarcan temas relevantes a la forma de pensar acerca de los Arquitectos de Software, su rol, su carrera, y finalmente, su impacto.&lt;/p&gt;

&lt;h2 id=&quot;las-patologas&quot;&gt;Las Patologías&lt;/h2&gt;

&lt;p&gt;En las siguientes subsecciones describiremos algunas de las patologías mencionadas anteriormente en términos de cómo detectarlas y resolverlas&lt;/p&gt;

&lt;h3 id=&quot;el-sndrome-del-mejor-desarrollador-sin-impacto&quot;&gt;El Síndrome del mejor desarrollador sin impacto&lt;/h3&gt;
&lt;p&gt;&lt;big&gt;&lt;i&gt;“Esta funcionalidad es extremadamente compleja. Debería estar escribiéndola yo mismo”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;descripcin&quot;&gt;Descripción&lt;/h4&gt;

&lt;p&gt;De acuerdo al Principio de Pareto, acordamos que el 80% de la complejidad de una aplicación proviene del 20% de sus funcionalidades. Siendo el Arquitecto de Software el mejor programador del equipo, todo parece indicar que gran parte de estas funcionalidades deberían ser escritas por el.&lt;/p&gt;

&lt;h4 id=&quot;sntomas-y-diagnstico&quot;&gt;Síntomas y Diagnóstico&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Arquitecto de Software con stress: “Nunca encuentro el tiempo para trabajar en estas funcionalidades”&lt;/li&gt;
  &lt;li&gt;Planos faltantes o vagamente definidos: “El diseño de alto nivel está completo, el resto de las partes son deducibles”&lt;/li&gt;
  &lt;li&gt;Desarrollador con stress: “Los diseños no tienen sentido. Mis colegas parecen estar escribiendo aplicaciónes diferentes”&lt;/li&gt;
  &lt;li&gt;Desarrolladores Senior incómodos: “Esta funcionalidad debería escribirla otra persona. Yo debería estar escribiendo el 20% más complejo”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&quot;tratamiento&quot;&gt;Tratamiento&lt;/h4&gt;

&lt;p&gt;Antes de hablar del tratamiento, proponemos discutir el concepto de que el Arquitecto de Software es de hecho el mejor desarrollador del equipo. Si bien es cierto que un buen Arquitecto de Software debería tener habilidades de programación sobresalientes, el rol requiere un set de habilidades más pulidas y algo diferentes que las del desarrollador. Habiendo dicho esto, tiene sentido que no todos los Arquitectos de Software surjan del mejor desarrollador de un equipo, sino de uno realmente bueno que encontró la forma de desarrollar otras habilidades.&lt;/p&gt;

&lt;p&gt;Creemos que el mejor desarrollador debería ser responsable de escribir las funcionalidades más complejas mientras que el Arquitecto de Software debería estar trabajando en hacer esas funcionalidades más sencillas de escribir. Construir un gran diseño de alto nivel tiende a simplificar las cosas evitando ambigüedades, e identificando oportunidades de reutilización. En muchos casos, cuando esas oportunidades son lo suficientemente claras, surgen los beneficios de utilizar librerías y frameworks existente o la necesidad de escribir nuevos. Este también es el trabajo de un buen Arquitecto de Software.&lt;/p&gt;

&lt;p&gt;Entonces, como un Arquitecto de Software, pensá una buena arquitectura para: construir un buen diseño, crear los mejores diseños, encontrar oportunidades de simplificación y ejecutarlas ya sea escribiendo o utilizando los frameworks adecuados, ayudar al equipo a definir y adoptar mejores prácticas y un proceso de desarrollo. De esa forma no vás a estar pensando “Yo debería estar escribiendo este código” tan frecuentemente. En su lugar, vas a notar que tus contribuciones impactan cada una de las funcionalidades.&lt;/p&gt;

&lt;h3 id=&quot;el-dilema-del-especialista-que-todo-lo-sabe&quot;&gt;El dilema del especialista que todo lo sabe&lt;/h3&gt;
&lt;p&gt;&lt;big&gt;&lt;i&gt;“El mundo es demasiado grande para que yo lo domine totalmente”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;descripcin-1&quot;&gt;Descripción&lt;/h4&gt;

&lt;p&gt;Front-end, back-end, orientado a objetos, funcional, AngularJS, Java, Node.js, REST, Polymer, Machine Learning, IoT, Realidad Virtual, COBOL, Mainframes, Docker, APIs, Scala. La lista de tecnologías sigue creciendo. La capacidad del Arquitecto de Software no es infinita, así como tampoco lo es el tiempo que cualquier ser humano puede emplear en un set de tareas. De todos modos, pareciera como si al Arquitecto de Software se le pidiera que domine la lista entera. No podemos elegir ambas: ser especialistas y generalistas, ¿o si?&lt;/p&gt;

&lt;h4 id=&quot;sntomas-y-diagnstico-1&quot;&gt;Síntomas y Diagnóstico&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Arquitecto de Software dubitativo: “Todos me preguntan acerca de todo y no hay forma de tener una buena respuesta a todas las preguntas”&lt;/li&gt;
  &lt;li&gt;Falta de &lt;em&gt;ownership&lt;/em&gt;: “No soy un experto en la materia. No puedo tomar esa decisión”&lt;/li&gt;
  &lt;li&gt;Decisiones en diferentes direcciones: “No estoy seguro de por qué estamos haciendo esto de esta manera. Parece como si todos hubieran tomado sus propias decisiones”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&quot;tratamiento-1&quot;&gt;Tratamiento&lt;/h4&gt;

&lt;p&gt;Un Arquitecto de Software debería ser un generalista por naturaleza. Incluso si no posee un gran conocimiento acerca de una tecnología, el camino al éxito es la capacidad de combinar un rango amplio de habilidades que solo pueden ser alcanzadas entendiendo qué tan profundo se debe investigar un determinado tema. De todos modos, hay áreas que un Arquitecto de Software debería dominar. La siguiente lista incluye algunas de estas áreas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Principios de Software: El Arquitecto de Software necesita dominar temas tales como los atributos de calidad del software: escalabilidad, disponibilidad, recuperabilidad, seguridad, mantenibilidad, entre otros &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ee658094.aspx&quot;&gt;[1]&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_system_quality_attributes&quot;&gt;[2]&lt;/a&gt;. También es requerido entender y poder diseñar aplicaciónes de forma en que fomenten no guardar estado, división en capas y desacoplamiento &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb402962.aspx&quot;&gt;[3]&lt;/a&gt;. Observen que estos conceptos son independientes de la tecnología, a pesar de que estas los logren de formas diversas.&lt;/li&gt;
  &lt;li&gt;Liderazgo: Poder convertirse en un líder técnico para el equipo es vital. Dominar conceptos y conductas tales como coaching y mentoring se vuelve realmente útil para los Arquitectos de Software.&lt;/li&gt;
  &lt;li&gt;Comunicación: Diseñar se trata de tomar decisiones. Estas decisiones deberían incluir conocimiento y experiencia, pero son el resultado de entender las necesidades de los distintos interesados. El diseño se vuelve más completo cuando miembros claves del equipo de desarrollo dan su opinión visión e ideas. Adicionalmente, una vez construido, el diseño debe ser compartido para que pueda ser implementado. El Arquitecto de Software es el punto central en donde todo se conecta. Dominar habilidades de comunicación no es opcional para este rol.&lt;/li&gt;
  &lt;li&gt;Investigación: Como se mencionó anteriormente, el Arquitecto de Software debería ser un generalista por naturaleza. Ser un buen investigador es la forma perfecta de estar al día con las últimas tecnologías y tendencias. Un Arquitecto de Software debería poder elegir qué tecnologías aprender y tener un buen entendimiento de las mismas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con esto en mente, es correcto decir que un Arquitecto de Software es un especialistas en temas de arquitectura, y como la arquitectura es acerca de los generalismos, los Arquitectos de Software son especialistas en ser generalistas.&lt;/p&gt;

&lt;p&gt;La razón por la cual la lista de tecnologías mencionadas en esta patología es virtualmente infinita es básicamente que hay demasiados profesionales desarrollando tecnologías nuevas y fascinantes todos los días. Entonces, la forma de dirigir un proyecto desde el punto de vista arquitectural es intercambiar conocimientos con un equipo mayor que será el verdadero dueño del conocimiento compartido.&lt;br /&gt;
De este modo, como un Arquitecto de Software, asegúrate de dominar las habilidades mencionadas anteriormente y vas a poder:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Construir una arquitectura que garantice los atributos de calidad del software&lt;/li&gt;
  &lt;li&gt;Entender qué tecnologías merecen más atención en cada momento&lt;/li&gt;
  &lt;li&gt;Tener un conocimiento general de estas tecnologías y tomar decisiones respecto de cuáles son necesarias para un proyecto particular&lt;/li&gt;
  &lt;li&gt;Investigar y empujar al equipo para utilizar estas tecnologías&lt;/li&gt;
  &lt;li&gt;Liderar al equipo para construir las mejores aplicaciones&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&quot;un-pie-en-cada-continente&quot;&gt;Un pie en cada continente&lt;/h3&gt;
&lt;p&gt;&lt;big&gt;&lt;i&gt;“Todavía no me pongo al día con todos los libros sobre soft skills y ya me estoy olvidando qué hacer después de atrapar una excepción”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;descripcin-2&quot;&gt;Descripción&lt;/h4&gt;

&lt;p&gt;El camino y los primeros pasos para convertirse en un Arquitecto de Software son realmente emocionantes. Empezamos a abstraernos de un montón de detalles innecesarios, dejamos de lidiar con funcionalidades tediosas, y empezamos a encarar desafíos más a la altura. También comenzamos a pasar más tiempo dibujando, hablando, enseñando, reuniéndonos, y menos tiempo escribiendo código. Y de repente, allí estamos, con esa sensación de que aún no somos lo suficientemente buenos en todo lo nuevo pero ya estamos muy lejos de donde empezamos. Viajamos lejos de casa y ahora estamos en el medio del océano. Una mezcla entre un Ingeniero de Software oxidado y un Arquitecto de Software inexperto.&lt;/p&gt;

&lt;h4 id=&quot;sntomas-y-diagnstico-2&quot;&gt;Síntomas y Diagnóstico&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Éxito por accidente: “Siento que la gente me elogia por cosas que se dieron por casualidad y no como resultado de mi trabajo”&lt;/li&gt;
  &lt;li&gt;Miedo a ser descubiertos: “Me asusta que alguien se de cuenta de que no estoy listo para ser un Arquitecto de Software”&lt;/li&gt;
  &lt;li&gt;Repetibilidad: “No se como terminé acá y estoy bastante seguro de que no voy a poder crecer hacia el siguiente nivel”&lt;/li&gt;
  &lt;li&gt;Buscando validación externa: “Alguien debería chequear que todas mis decisiones sean correctas”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&quot;tratamiento-2&quot;&gt;Tratamiento&lt;/h4&gt;

&lt;p&gt;No es fácil lidiar con estos sentimientos pero he aquí algo que siempre puede ayudar: no estás solo. En realidad estos síntomas (entre otros) son más frecuente de lo que la mayoría de nosotros creemos y, además, están agrupados bajo el nombre de “Síndrome del Impostor” &lt;a href=&quot;https://counseling.caltech.edu/general/InfoandResources/Impostor&quot;&gt;[1]&lt;/a&gt;, descubierto por Dr. Pauline R. Clance en 1978&lt;a href=&quot;https://en.wikipedia.org/wiki/Impostor_syndrome&quot;&gt;[2]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hay varias maneras de superar este síndrome, incluyendo&lt;a href=&quot;http://www.apa.org/gradpsych/2013/11/fraud.aspx&quot;&gt;[3]&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hablar con tus mentores&lt;/li&gt;
  &lt;li&gt;Reconocer tus habilidades&lt;/li&gt;
  &lt;li&gt;Recordando lo hacés bien&lt;/li&gt;
  &lt;li&gt;Reconociendo que nadie es perfecto&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quizá la parte más difícil es vencer el miedo de ser transparente y reflexivo acerca de esto con alguien, un amigo, un colega, o un jefe. Una vez que reconocemos y hacemos las paces con estos temas, todo se vuelve más fácil y estamos listos para dejarlo atrás y liberar nuestro potencial como Arquitectos de Software.&lt;/p&gt;

&lt;h3 id=&quot;el-dilema-del-mentor-sin-preparacin&quot;&gt;El dilema del mentor sin preparación&lt;/h3&gt;
&lt;p&gt;&lt;big&gt;&lt;i&gt;“Si querías que fuera mentor de otros, deberías haberme preparado para eso”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;descripcin-3&quot;&gt;Descripción&lt;/h4&gt;

&lt;p&gt;Incluir “mentoring” como parte de las responsabilidades del Arquitecto de Software tiene amplio consenso. Se espera que los Arquitectos de Software pasen tiempo con los Ingenieros aconsejándolos acerca de cómo desarrollar las habilidades faltantes, aprender nuevas técnicas de programación, frameworks y en general, preparándolos para dar el siguiente paso. Sin embargo a medida que los desarrolladores avanzan en sus carreras y eventualmente se convierten en Arquitectos de Software, empiezan a necesitar habilidades para las cuales no han sido entrenados, como el “mentoring” en sí mismo.&lt;/p&gt;

&lt;h4 id=&quot;sntomas-y-diagnstico-3&quot;&gt;Síntomas y Diagnóstico&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Cuello de botella para “mentoring”: “Todos quieren que los ayude a crecer ¿Qué está ocurriendo?” La mayoría de los desarrolladores comienzan a buscar “mentoring” en el mismo Arquitecto de Software&lt;/li&gt;
  &lt;li&gt;Empatía superficial: “No estoy conectado con aquellos a quien estoy dando mentoring”. El mentor y el “mentoreado” suelen generar una relación cercana. Si la empatía flaquea, el mentoring probablemente falle&lt;/li&gt;
  &lt;li&gt;Comunicación ineficiente: “No logro que los desarrolladores sigan mi diseño”. Los Ingenieros de Software no entienden el diseño o no logran ver por qué se ha realizado de tal manera&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&quot;tratamiento-3&quot;&gt;Tratamiento&lt;/h4&gt;

&lt;p&gt;Los Arquitectos de Software deberían ser alentados a dar mentoreo en todas las habilidades necesarias para crecer en el aspecto de la carrera. Particularmente aquellas habilidades necesitadas para puestos más altos como ser el del Arquitecto de Software. Si el mentoreo se limita a las habilidades técnicas, el Ingeniero en Software probablemente no esté a la altura cuando se encuentre en una posición de liderazgo.&lt;/p&gt;

&lt;p&gt;Cabe mencionar que, a pesar de que no entraremos en temas antropológicos o sociológicos tales como la capacidad del ser humano de adquirir nuevos conocimientos, entendemos que algunas personas tienen una tendencia más natural al mentoreo. Incluso cuando un Arquitecto de Software debería ayudar a los Ingenieros de Software a desarrollar sus soft skills, cualquiera que aspire a convertirse en un Arquitecto de Software debería aprender sobre mentoreo en general. Una posibilidad para los Arquitectos de Software es buscar ayuda respecto del mentoreo en el liderazgo más senior de la organización de ingeniería (como ser VPs o Senior Directors).&lt;/p&gt;

&lt;h3 id=&quot;el-sndrome-de-la-prdida-de-enfoque&quot;&gt;El síndrome de la pérdida de enfoque&lt;/h3&gt;

&lt;p&gt;&lt;big&gt;&lt;i&gt;“Cuando me siento y me concentro por 20 minutos sin interrupción, logro construir cosas asombrosas! ¿Cómo no hago esto 8 horas por día?”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;descripcin-4&quot;&gt;Descripción&lt;/h4&gt;

&lt;p&gt;Como Paul Graham describe en su ensayo “Maker’s Schedule, Manager’s Schedule”, mientras que la agenda de un manager puede cambiar cada hora, para los constructores ir a una reunión es como arrojar una excepción, lo cual puede ser muy costoso en términos de performance. A medida que estudiamos el rol y analizamos sus contradicciones, nos preguntamos: ¿Qué agenda seguimos los Arquitectos de Software?&lt;/p&gt;

&lt;h4 id=&quot;sntomas-y-diagnstico-4&quot;&gt;Síntomas y Diagnóstico&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Adaptarse a los managers: “Los managers me arrastran a reuniones en cualquier momento”&lt;/li&gt;
  &lt;li&gt;Tiempo desperdiciado: “Soy un constructor. Construyo software que termina en producción, esa es mi mayor responsabilidad, no estar respondiendo las preguntas de los managers”&lt;/li&gt;
  &lt;li&gt;Agenda espaciada: “Déjenme escribir código por 4 horas seguidas y los voy a sorprender”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En la mayoría de las organizaciones, los Arquitectos de Software no son managers y por ende no se rigen por la agenda de un manager, e incluso demostrando que se rigen por la agenda de un constructor, suelen aparecer algunas dificultades.&lt;/p&gt;

&lt;p&gt;Como se mencionó en la sección “El Síndrome del mejor desarrollador sin impacto”, los Arquitectos de Software no necesariamente deberían ser responsables de escribir las funcionalidades más complejas, y este concepto podría usarse para argumentar que los Arquitectos de Software no son constructores. Sin embargo, como fue discutido, los Arquitectos de Software son los responsables de construir software de forma más transversal, definiendo mejores prácticas y los procesos de desarrollo, escribiendo frameworks o diseñando los planos de la aplicación. Estas tareas son, innegablemente, atribuibles a constructores.&lt;/p&gt;

&lt;p&gt;Los componentes transversales a menudo afectan a una gran variedad de actores e impactan en nuevas funcionalidades y bugs complejos. Los Arquitectos de Software son fecuentemente convocados a reuniones para analizar y comentar sobre estos temas, robándoles tiempo de diseño y mentoring. Cuanto más construye un Arquitecto de Software, a más reuniones será convocado, presentando un importante dilema.&lt;/p&gt;

&lt;h4 id=&quot;tratamiento-4&quot;&gt;Tratamiento&lt;/h4&gt;

&lt;p&gt;Los Arquitectos de Software son constructores y, como tales, necesitan tiempo para hacer. Construir software, incluso a niveles de arquitectura, requiere concentración y enfoque. Los Arquitectos de Software, como en cualquier posición prestigiosa, son consultados a menudo sobre un conjunto diverso de temas y son requeridos en reuniones. En lugar de luchar con eso, proponemos algunas ideas para minimizar el impacto que tienen estas reuniones sobre tus responsabilidades:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Se recomienda a los Arquitectos de Software que expliquen claramente a todos, que son constructores, y que deben estar profundamente involucrados en el proceso de construir software. El entendimiento por parte de los pares acerca de la posición del Arquitecto de Software es vital para minimizar las invitaciones a reuniones innecesarias.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Office Hours&lt;/em&gt;: Los Arquitectos de Software deberían apartar algo de tiempo para estar disponibles para otras personas. En lugar de adaptarse a las agendas de los managers, se recomienda que el Arquitecto de Softwarwe cree mecanismos para permitir a los managers adaptarse por su cuenta.&lt;/li&gt;
  &lt;li&gt;Delegar: No toda reunión a la que estés invitado necesita un Arquitecto de Software. La delegación a líderes técnicos o especialistas no solo te va a ahorrar tiempo, también va a permitir que otros crezcan.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusin&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Mientras que la analogía con las patologías puede ser algo trillada, creemos que hay valor en estudiarlas como las trampas habituales en el rol del Arquitecto de Software.&lt;/p&gt;

&lt;p&gt;Tal como se discutió en la introducción de este artículo, la Ingeniería de Software ha cambiado dramáticamente desde sus orígenes en el siglo pasado, pero sin duda sigue siendo un campo de estudio joven. Es entendible que un rol más nuevo no haya sido estudiado o estandarizado en profundidad.&lt;/p&gt;

&lt;p&gt;Esperamos que el análisis de estas patologías ayude a disparar más discusiones acerca de cómo debería evolucionar el rol del Arquitecto de Software, cómo evaluar su impacto, cómo deben crecer y cómo deben ser &lt;em&gt;coacheados&lt;/em&gt;. Esta es nuestra humilde pero sentida contribución al respecto.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Jul 2016 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2016/07/14/a-compendium-software-architects-pathologies/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2016/07/14/a-compendium-software-architects-pathologies/</guid>
        
        <category>Software</category>
        
        <category>Arquitercura</category>
        
        <category>Rol</category>
        
        <category>Management</category>
        
        <category>Trampas</category>
        
        
      </item>
    
      <item>
        <title>A Compendium of Software Architects’ Pathologies</title>
        <description>&lt;p&gt;&lt;em&gt;By &lt;a href=&quot;https://ar.linkedin.com/in/mchicote&quot;&gt;Marcos Chicote&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/guidodecaso&quot;&gt;Guido de Caso&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/nohorbee&quot;&gt;Norberto Herz&lt;/a&gt;&lt;/em&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Soon after the field of software architectures was formally born thanks to the work of Garlan, Shaw, Notkin and others in the early 90s, the role of the “Software Architect” emerged in the software development landscape. Following the definitions of the Software Architecture community, the architect’s job is to define the high level design of a software system or, in other words, make the principal design decisions that build a bridge between requirements and implementation.&lt;br /&gt;
However, in practice things are not that simple, and the architect’s job is full of pitfalls and contradictions. We describe what we call are five pathologies that can affect software architects, including symptoms and prognosis, with the goal of sparking more discussions about this role and its desired evolution.&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;There is no doubt that Software Engineering has been constantly evolving over the last five decades. Operating systems have provided an ever improving layer to abstract us away from the complexities of modern hardware. Lean and agile processes have allowed for faster iteration. Cheaper and more accessible data center technologies have lowered the barrier to entry for high performance computing and opened the gate to tackling more ambitious problems diverse fields such as medicine, the aerospatial industry, academy or e-commerce.&lt;/p&gt;

&lt;p&gt;The way engineers organize ourselves to go build software that solves these complex problems has also shifted. From individuals writing programs for mainframes to big corporations with multiple product lines and platforms. The role of Software Architects appeared as such mostly in the context of multi-tier applications where the amount of implementation choices grew exponentially. &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=579257&quot;&gt;[1]&lt;/a&gt; &lt;a href=&quot;http://www.bredemeyer.com/pdf_files/role.pdf&quot;&gt;[2]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Software Architects’ responsibilities and duties are varied and depend heavily on the company and environment. There are slight variations of these responsibilities depending on whether we consider an Application Architect or an Enterprise Architect. But, regardless of such differences we can define the Software Architect’s scope as driven by these areas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Subdividing the design of large applications into smaller and more manageable parts.&lt;/li&gt;
  &lt;li&gt;Identifying technologies, frameworks, patterns, process improvements and best practices that are to be adopted by an organization and communicating these to developers, establishing thus key mentorship relations.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But while this enumeration serves the purpose of a Software Architect’s job description template, it does not answer questions such as what traits or tasks separate the most impactful Software Architects from their peers. How is the Software Architect career path defined and where do Software Architects come from. How can they walk the fine balance between becoming great generalists as opposed to incredible specialists.&lt;/p&gt;

&lt;p&gt;In this article we set out to explore and discuss some of these topics. We do so via a series of apparent contradictions or fallacies arising from the tension between driving forces at stake in a Software Architect’s career: to be a mentor vs. to be an evangelist, to be coding vs. to be in meetings and other key dilemmas.&lt;/p&gt;

&lt;p&gt;We introduce these apparent contradictions as pathologies. Pathology is rooted in the Ancient Greek concept of pathos (πάθος), meaning “experience” or “suffering”, and -logia (-λογία), “study of”. We hope that this article can spark interesting discussions among fellow Software Architects and make us reflect about certain common issues that we face in our professional practice.&lt;/p&gt;

&lt;p&gt;The careful reader should be warned that some of the following will be particularly more suited for Software Architects in specific situations such as companies with geographically distributed development teams or companies of medium to large size. In any case, we believe that these encompass various relevant topics when it comes to how we think about Software Architects, their role, their career and, ultimately, their impact.&lt;/p&gt;

&lt;h2 id=&quot;the-pathologies&quot;&gt;The Pathologies&lt;/h2&gt;

&lt;p&gt;In the next subsections we will describe some of the aforementioned pathologies in terms of how to detect and how to resolve them.&lt;/p&gt;

&lt;h3 id=&quot;the-impactless-best-coder-syndrome&quot;&gt;The Impactless Best Coder Syndrome&lt;/h3&gt;
&lt;p&gt;&lt;big&gt;&lt;i&gt;“This functionality is extremely complex. I should be coding it myself”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;description&quot;&gt;Description&lt;/h4&gt;

&lt;p&gt;According to the Pareto Principle we acknowledge that 80% of an application’s complexity comes from the 20% of its functionalities. Being the Software Architect the best coder in the team seems to indicate that a big piece of these functionalities should be written by no one else.&lt;/p&gt;

&lt;h4 id=&quot;symptoms-and-diagnosis&quot;&gt;Symptoms and Diagnosis&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Stressed Software Architect: “I can never find the time to work on these functionalities”&lt;/li&gt;
  &lt;li&gt;Missing or poorly written blueprints: “The high level design is complete, the remaining parts can be inferred”&lt;/li&gt;
  &lt;li&gt;Stressed Developer: “The blueprints don’t make sense. My peers seem to be writing different applications”&lt;/li&gt;
  &lt;li&gt;Uncomfortable Senior Developer: “This functionality could be written by somebody else. I should be coding the top 20%”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&quot;prognosis&quot;&gt;Prognosis&lt;/h4&gt;

&lt;p&gt;Before jumping to the correct treatment, we propose to discuss the concept of whether the Software Architect is indeed the best coder on the team. Even though it is true that a good Software Architect should have outstanding coding abilities, the role demands a fairly different and more rounded skillset when compared to that of a developer’s. That said, it makes sense that not every Software Architect raised from being the best developer of a team, but a really good one who found a way of growing another skillset as well.&lt;/p&gt;

&lt;p&gt;We argue that the best developer should be the one responsible for coding the most complex functionalities, while the Software Architect should be the one making those functionalities easier to code. Putting in place a great high level design tends to simplify things by avoiding ambiguities, and identifying reuse opportunities. In many cases, when these opportunities are clear enough, the benefits of using some libraries and frameworks, or the necessity of writing some new ones rise. That is the job of a good Software Architect too.&lt;/p&gt;

&lt;p&gt;So, as a Software Architect, put a great architecture in order: build a great design, write the best blueprints, find the simplification opportunities and execute these by writing or using the proper frameworks, help the definition and adoption of the team’s best practices and development processes. That way you should not have to  think “I should be coding this” as often. Instead you will realize that your contributions are enabling a great part of every single functionality.&lt;/p&gt;

&lt;h3 id=&quot;the-know-it-all-specialist-dilemma&quot;&gt;The Know-it-all Specialist Dilemma&lt;/h3&gt;
&lt;p&gt;&lt;big&gt;&lt;i&gt;“The world is too big for me to master it all”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;description-1&quot;&gt;Description&lt;/h4&gt;

&lt;p&gt;Front-end, back-end, object oriented, functional, AngularJS, Java, Node.js, REST, Polymer, Machine Learning, IoT, Virtual Reality, COBOL, Mainframes, Docker, APIs, Scala. The list of technologies and frameworks goes on and on. The Software Architect’s bandwidth is not infinite, as it is not the time any human has to spend on any set of tasks. Yet it seems as if Software Architects were demanded to master the entire list. We can not choose both being specialists and generalists, or can we?&lt;/p&gt;

&lt;h4 id=&quot;symptoms-and-diagnosis-1&quot;&gt;Symptoms and Diagnosis&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Waverer Software Architect: “Everyone asks me about everything and there is no way I can have a good answer for all the questions”&lt;/li&gt;
  &lt;li&gt;Lack of ownership: “I’m not an expert on the subject, so, I simply can’t make a decision on this”&lt;/li&gt;
  &lt;li&gt;Multi-directional decisions: “I’m not sure why we are doing it this way. It seems like if everyone has made it own call”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&quot;prognosis-1&quot;&gt;Prognosis&lt;/h4&gt;

&lt;p&gt;A Software Architect should be a generalist by nature. Even if she or he possesses deep knowledge about a particular technology, the driver to success is the capability of combining a wide range set of skills that can only be achieved by understanding how far to dig on something. Though, there are a set of areas that a Software Architect should master. The following list includes some of them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Software principles: The Software Architect needs to master subjects such as the software quality attributes: scalability, availability, resiliency, securability, maintainability, among others &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ee658094.aspx&quot;&gt;[1]&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_system_quality_attributes&quot;&gt;[2]&lt;/a&gt;. It is also required to understand and be able to design applications in a way that enables statelessness, layering, decoupling &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb402962.aspx&quot;&gt;[3]&lt;/a&gt;. Note that these concepts are technology independent, even though different technologies achieve them in different ways.&lt;/li&gt;
  &lt;li&gt;Leadership: Being able to become a Technical Leader for the team is crucial. Mastering principles and behaviors such as coaching and mentoring becomes really handy for Software Architects.&lt;/li&gt;
  &lt;li&gt;Communication: Designing is all about making decisions. These decisions should contemplate knowledge and experience, but are also the result of understanding different stakeholders’ needs. The design becomes even richer when key members from the development team provide their input in the form of vision and ideas. Furthermore, once the design is in place, it needs to be shared so it can be built. The Software Architect is the central point where all these ends meet. Mastering communication skills is not optional for their role.&lt;/li&gt;
  &lt;li&gt;Research: As said, a Software Architect should be a generalist by nature. Being a good researcher is the perfect way of being up to date with the latest in technology trends. A Software Architect should be able to choose which technologies to know and have a fairly good understanding of these.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this in mind, it is correct to say that a Software Architect is a specialist in architecture topics, and since architecture is about generalisms, they are specialists in being generalists.&lt;/p&gt;

&lt;p&gt;The reason why the list of technologies mentioned on this pathology’s description is virtually infinite is basically that there are so many professionals developing new and exciting technologies everyday. Thus, the way of running a project from the architectural point of view is to exchange knowledge with a bigger team that will be the real knowledge owner.
So, as a  Software Architect, make sure to master the aforementioned skills and you will be able to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Put together an architecture that guarantees high software quality attributes.&lt;/li&gt;
  &lt;li&gt;Understand which technologies requires most attention at every moment.&lt;/li&gt;
  &lt;li&gt;Incorporate general knowledge of these technologies, and make decisions on which ones are needed for a particular project.&lt;/li&gt;
  &lt;li&gt;Conduct investigations to push the team to use these technologies.&lt;/li&gt;
  &lt;li&gt;Lead the team to build great applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&quot;one-feet-on-each-continent&quot;&gt;One Feet on Each Continent&lt;/h3&gt;
&lt;p&gt;&lt;big&gt;&lt;i&gt;“I haven’t caught up with all the latest books on soft skills, and I’m already starting to forget what to do after catching an exception”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;description-2&quot;&gt;Description&lt;/h4&gt;

&lt;p&gt;The path and first steps for becoming a Software Architect are really exciting. We start getting abstracted from a lot of unnecessary and dirty details, we stop dealing with tedious functionalities, and we start facing more “suitable” challenges. We also start spending more time sketching, talking, teaching, meeting, and less time coding. And suddenly there we are, feeling that we are not yet good enough at the new stuff, and yet too far away from where we started. We journeyed far from home and now we are in the middle of the ocean between a rusty Software Engineer and an inexpert Software Architect.&lt;/p&gt;

&lt;h4 id=&quot;symptoms-and-diagnosis-2&quot;&gt;Symptoms and Diagnosis&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Succeed by accident: “I feel that people praise me for things that were just happenstance and not the result of my work”&lt;/li&gt;
  &lt;li&gt;Fear of being discovered: “I’m afraid someone is going to find out that I’m not ready to be a Software Architect”.&lt;/li&gt;
  &lt;li&gt;Repeatability: “I don’t know how I ended up here, and I’m pretty sure I won’t be able to grow and level up again”&lt;/li&gt;
  &lt;li&gt;Pursuing external validation: “Someone should check that every one of my decisions is correct”.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&quot;prognosis-2&quot;&gt;Prognosis&lt;/h4&gt;
&lt;p&gt;It is not easy to cope with these feelings but there is something that can help: you are not alone. Actually, these symptoms (among others) are most common than most of us believe and, on top of that, these are grouped under the name of “Impostor Syndrome”&lt;a href=&quot;https://counseling.caltech.edu/general/InfoandResources/Impostor&quot;&gt;[1]&lt;/a&gt;, that was discovered by Dr. Pauline R. Clance in 1978&lt;a href=&quot;https://en.wikipedia.org/wiki/Impostor_syndrome&quot;&gt;[2]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are several ways to overcome this syndrome, including but not limited to&lt;a href=&quot;http://www.apa.org/gradpsych/2013/11/fraud.aspx&quot;&gt;[3]&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Talking to your mentors&lt;/li&gt;
  &lt;li&gt;Recognizing your expertise&lt;/li&gt;
  &lt;li&gt;Remembering what you do well&lt;/li&gt;
  &lt;li&gt;Realizing no one is perfect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But maybe the most difficult part is to defeat the fear of being transparent and reflective about this with somebody, be it a friend, a colleague or your boss. Once that we recognize and make peace with this, everything becomes easier and we are ready to put this behind and unleash our full potential as Software Architects.&lt;/p&gt;

&lt;h3 id=&quot;the-unprepared-mentor-conundrum&quot;&gt;The Unprepared Mentor Conundrum&lt;/h3&gt;
&lt;p&gt;&lt;big&gt;&lt;i&gt;“If you wanted me to mentor others you should have prepared me for that”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;description-3&quot;&gt;Description&lt;/h4&gt;

&lt;p&gt;Broad consensus exists on including technical mentoring as part of a Software Architect’s responsibilities. Software Architects are expected to spend time with Software Engineers beneath them in the career path advising them on how to develop key missing skills, learn new programming techniques or frameworks and, generally speaking, preparing them to take the next step in the ladder. However as developers progress in their careers and eventually become Software Architects, they require abilities and skills on which they have not been trained on, such as mentoring itself.&lt;/p&gt;

&lt;h4 id=&quot;symptoms-and-diagnosis-3&quot;&gt;Symptoms and Diagnosis&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Mentoring bottleneck: “Everyone wants me to help them grow, what’s going on?” most Software Engineers start seeking mentoring from the same Software Architect.&lt;/li&gt;
  &lt;li&gt;Shallow empathy: “I don’t feel connected to those I am mentoring”. Mentoring relationships often generate a close relationship between mentor and protégé. If empathy flattens, mentoring is probably failing.&lt;/li&gt;
  &lt;li&gt;Inefficient communication: “I can’t get developers to follow my lead on system design” Software Engineers do not understand a system design or can not see why it was designed that way.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&quot;prognosis-3&quot;&gt;Prognosis&lt;/h4&gt;

&lt;p&gt;Software Architects should be encouraged to give mentorship to their protégés on all skills required to climb up the career ladder. Particularly on skills needed on higher positions such as Software Architect itself. If mentoring is limited to  technical skills only, it will quite likely fall short once Software Engineers reach a leading position.&lt;/p&gt;

&lt;p&gt;It is worth mentioning that, even though we will not get into anthropological and sociological issues like the human capacity to acquire new skills, we do recognize that some people have a more natural tendency for mentorship. Even when Software Architects should help Software Engineers develop soft skills, anyone aspiring to become a Software Architect should learn about mentorship in general. One possibility is for Software Architects to seek guidance from senior leadership in the engineering organization (e.g., VP or Senior Director level) on how to become great mentors.&lt;/p&gt;

&lt;h3 id=&quot;the-lost-focus-syndrome&quot;&gt;The Lost Focus Syndrome&lt;/h3&gt;

&lt;p&gt;&lt;big&gt;&lt;i&gt;“When I sit and focus for 20 minutes straight I get to build amazing things! How come I am not doing that 8 hours a day?”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;description-4&quot;&gt;Description&lt;/h4&gt;

&lt;p&gt;As Paul Graham states on the essay Maker’s Schedule, Manager’s Schedule while managers are on schedules that can change every hour, for makers having a meeting is like throwing an exception, which can be very expensive in terms of performance. As we study the role and analyze its contradictions we wonder: what schedule do Software Architects follow?&lt;/p&gt;

&lt;h4 id=&quot;symptoms-and-diagnosis-4&quot;&gt;Symptoms and Diagnosis&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Adapt to managers: “Managers are dragging me into meetings at any time”.&lt;/li&gt;
  &lt;li&gt;Wasted time: “I’m a maker, I build working software that goes into production, that is my main responsibility, not answering managers questions”.&lt;/li&gt;
  &lt;li&gt;Sparse schedule: “Let me code for four hours straight and I’ll blow your mind”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In most organizations Software Architects are not managers and therefore do not live by their schedule. And yet proving that they are in the maker’s schedule can encounter some difficulties.&lt;/p&gt;

&lt;p&gt;As mentioned on section “The impactless best coder syndrome”, Software Architects should not necessarily be responsible for coding even the most complex functionalities and this could be used to make a case against Software Architects being makers. However, as discussed, Software Architects are responsible for building software in a more transversal manner, defining best practices and development processes, or writing frameworks and blueprints. Such duties are undeniable characteristics of a maker.&lt;/p&gt;

&lt;p&gt;Transversal components often affect a variety of different actors and have a profound impact on production environments, new features and complex bugs. Software Architects are recurringly called into meetings to analyze and comment on these different topics, taking them time away from designing and mentoring developers. The more a Software Architect builds the  more meetings she will be pulled into, presenting an interesting dylemma.&lt;/p&gt;

&lt;h4 id=&quot;prognosis-4&quot;&gt;Prognosis&lt;/h4&gt;

&lt;p&gt;Software Architects are makers and, as such, need time to make. Building software, even at the architectural level, requires concentration and focus. Software Architects, as any prestigious position, are frequently consulted on a wide array of topics and will be summoned into meetings. Instead of fighting against it we propose guidelines to minimize the impact of meetings on your real responsibilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Software Architects are advised to have everyone understand that they are makers and they have to be deeply invested in the process of building great software. Peer’s understanding of the Software Architect position and priorities is crucial to minimize invitations to spurious meetings.&lt;/li&gt;
  &lt;li&gt;Office hours: Software Architects should set aside time to be available to others. Instead of having managers push Software Architects into adapting to their schedule we advocate Software Architects to create mechanisms to have managers adapt themselves.&lt;/li&gt;
  &lt;li&gt;Delegate: Not every meeting you are invited to needs a Software Architect. Delegation to tech leads or specialists will not only save your precious time, it will also help others grow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;While the analogy with medical pathologies may be a bit farfetched, we do believe that there is a lot of value in studying and reflecting about common pitfalls in the Software Architect role.&lt;/p&gt;

&lt;p&gt;As we discussed when we opened this article, Software Engineering has changed quite dramatically from its humble origins in the last century but it yet remains a pretty novel and somewhat adolescent field of study. It is understandable then that an even newer role such as that of the Software Architect has been yet barely standardized or studied.&lt;/p&gt;

&lt;p&gt;We hope that the analysis of the pathologies here presented can help spark more discussion about topics such as how the Software Architect’s role should evolve, how can we evaluate their impact, how can we grow them and coach them. This is our humble yet heartfelt contribution in that spirit.&lt;/p&gt;

</description>
        <pubDate>Thu, 14 Jul 2016 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//en/2016/07/14/a-compendium-software-architects-pathologies/</link>
        <guid isPermaLink="true">http://ourbit.github.io//en/2016/07/14/a-compendium-software-architects-pathologies/</guid>
        
        <category>Software</category>
        
        <category>Architecture</category>
        
        <category>Role</category>
        
        <category>Management</category>
        
        <category>Pitfall</category>
        
        
      </item>
    
      <item>
        <title>Nobel 0.2 soporta Swagger y RAML</title>
        <description>&lt;p&gt;Tiempo atrás, cuando trabajaba con el equipo que desarrolló &lt;a href=&quot;http://raml.org&quot;&gt;RAML&lt;/a&gt;, aproveché el tiempo de una &lt;em&gt;hackathon&lt;/em&gt; para crear una primera versión de &lt;a href=&quot;https://www.npmjs.com/package/nobel&quot;&gt;Nobel&lt;/a&gt;. En pocas palabras, Nobel es una aplicación que utiliza una definición de una API en un lenguaje de alto nivel (&lt;a href=&quot;http://swagger.io/&quot;&gt;Swagger&lt;/a&gt; o &lt;a href=&quot;http://raml.org&quot;&gt;RAML&lt;/a&gt;) para generar el código &lt;a href=&quot;http://www.arduino.cc/&quot;&gt;Arduino&lt;/a&gt; que implementa dicha API. Esta primera versión solo soportaba RAML como lenguaje de definición. Recientemente, habiendo podido investigar un poco más Swagger y sus herramientas, pude agregar soporte para este lenguaje también.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;swagger-o-raml&quot;&gt;Swagger o RAML&lt;/h2&gt;

&lt;p&gt;Creo haber visto más de 25 posts que hablan de esta temática (aquí comparto algunos links con ustedes: &lt;a href=&quot;http://modeling-languages.com/modeling-web-api-comparing/&quot;&gt;1&lt;/a&gt; &lt;a href=&quot;http://iasaglobal.org/swagger-vs-raml/&quot;&gt;2&lt;/a&gt; &lt;a href=&quot;https://www.ibm.com/developerworks/community/blogs/c06ef551-0127-483d-a104-cdd02b1cee31/entry/swagger_apiary_raml_versus_rest?lang=en&quot;&gt;3&lt;/a&gt;).
Independientemente de los resultados de estos análisis, tengo una pequeña lista de propios pensamientos al respecto habiéndo trabajado con ambos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RAML me resulta más fácil de entender y de escribir. Considero que la expresividad del lenguaje es superior.&lt;/li&gt;
  &lt;li&gt;RAML introdujo YAML desde el comienzo, mientras que swagger nos pedía que escribiéramos la definición directamente en JSON.&lt;/li&gt;
  &lt;li&gt;Swagger tiene mayor comunidad y sus herramientas parecen más completas y robustas.&lt;/li&gt;
  &lt;li&gt;Con el lanzamiento de Swagger 2.0, la capacidad expresiva del lenguaje mejoró notablemente, aunque la tendencia a traducir 1:1 el antiguo JSON al nuevo YAML no lo pone a la altura de RAML.&lt;/li&gt;
  &lt;li&gt;Mientras que el lanzamiento de RAML 1.0 trajo novedades más que interesantes (Noviembre 2015), el parser para Node.js sigue en “beta”, lo que hace que la piedra angular de una gran rama de herramientas pueda no ser lo suficientemente robusta para ser lanzada a producción.&lt;/li&gt;
  &lt;li&gt;El objeto que devuelve el parser de RAML (0.8) es realmente mucho más intuitivo y fácil de “navegar” que el que devuelve el parser de Swagger (2.0).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Independientemente de todo análisis, nada me impide hacer que la herramienta soporte ambos lenguajes y esto se debe principalmente a la capacidad de crear un objeto intermedio que es el que será utilizado para generar el código fuente. El siguiente diagrama representa dicho comportamiento.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/nobel-flow.png&quot; alt=&quot;Nobel - Flujo de la aplicación&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cmo-comenzar&quot;&gt;Cómo comenzar&lt;/h2&gt;

&lt;p&gt;El principal objetivo de Nobel es que cualquier persona con mínimos conocimientos sobre programación en Arduino, pueda desarrollar su propio dispositivo controlado remotamente vía HTTP. Habiendo dicho esto, es necesario: - Contar con una placa Arduino y las herramientas de desarrollo instaladas. - Contar con un &lt;a href=&quot;https://www.arduino.cc/en/Main/ArduinoEthernetShield&quot;&gt;Ethernet Shield&lt;/a&gt;. - Contar con conocimientos básicos de Swagger o RAML. - Tener instalado &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En la &lt;a href=&quot;https://www.npmjs.com/package/nobel&quot;&gt;documentación de Nobel&lt;/a&gt; se puede encontrar toda la información necesaria para entender su funcionamiento en profundidad, así como un &lt;a href=&quot;https://www.npmjs.com/package/nobel#hands-on-example&quot;&gt;ejemplo práctico&lt;/a&gt; para tener nuestro primer dispositivo funcionando en minutos.&lt;/p&gt;

&lt;h2 id=&quot;para-qu&quot;&gt;Para qué&lt;/h2&gt;

&lt;p&gt;La intención de Nobel es solucionar una problemática relativamente compleja: Exponer una API REST utilizando una placa Arduino. De esta forma, los desarrolladores pueden concentrarse en construir sus propios dispositivos. Ahora podés pensar en aquellos proyectos que venías postergando y comenzar a controlar tus propios dispositivos de forma remota.&lt;/p&gt;

&lt;h2 id=&quot;contribuir&quot;&gt;Contribuir&lt;/h2&gt;

&lt;p&gt;Nobel es una aplicación Open Source. Podés contribuir mejorando el código, incorporando nuevas funcionalidades, probando y reportando errores. En este link podés encontrar el &lt;a href=&quot;https://github.com/nohorbee/nobel&quot;&gt;repositorio GitHub&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 24 Apr 2016 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2016/04/24/nobel-02-swagger-support/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2016/04/24/nobel-02-swagger-support/</guid>
        
        <category>Nobel</category>
        
        <category>APIs</category>
        
        <category>Arduino</category>
        
        <category>IoT</category>
        
        <category>codegen</category>
        
        <category>RAML</category>
        
        <category>Swagger</category>
        
        
      </item>
    
      <item>
        <title>Nobel 0.2 supports Swagger and RAML</title>
        <description>&lt;p&gt;Time ago, while I was working with the team building &lt;a href=&quot;http://raml.org&quot;&gt;RAML&lt;/a&gt;, I took advantage of a hackathon to build the first version of &lt;a href=&quot;https://www.npmjs.com/package/nobel&quot;&gt;Nobel&lt;/a&gt;. Briefly, Nobel is an application that uses an API high level definition written with (&lt;a href=&quot;http://swagger.io/&quot;&gt;Swagger&lt;/a&gt; or &lt;a href=&quot;http://raml.org&quot;&gt;RAML&lt;/a&gt; to generate the &lt;a href=&quot;http://www.arduino.cc/&quot;&gt;Arduino&lt;/a&gt; code implementing that API. That first version only supported RAML as the definition language. Recently working and researching a bit more about Swagger and its toolset, I was able to add support for this language as well.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;swagger-or-raml&quot;&gt;Swagger or RAML&lt;/h2&gt;

&lt;p&gt;I think I’ve seen more than 25 posts talking about this (here I share a couple of links with you: &lt;a href=&quot;http://modeling-languages.com/modeling-web-api-comparing/&quot;&gt;1&lt;/a&gt; &lt;a href=&quot;http://iasaglobal.org/swagger-vs-raml/&quot;&gt;2&lt;/a&gt; &lt;a href=&quot;https://www.ibm.com/developerworks/community/blogs/c06ef551-0127-483d-a104-cdd02b1cee31/entry/swagger_apiary_raml_versus_rest?lang=en&quot;&gt;3&lt;/a&gt;). Regardless of these analysis results, I’ve a short list of self opinions after having been working with both:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I find RAML easier to understand and write. I consider that the language expressivity is higher.&lt;/li&gt;
  &lt;li&gt;RAML used YAML from the beginning, while Swagger requested us to write the definition with plain JSON.&lt;/li&gt;
  &lt;li&gt;Swagger has a greater community and its toolset seem to be more complete and robust.&lt;/li&gt;
  &lt;li&gt;When Swagger 2.0 was launched, the improvement of the language expressivity was remarkable . Though, the trend of translating the old JSON to the new YAML 1:1 stops from making it comparable to RAML.&lt;/li&gt;
  &lt;li&gt;While RAML 1.0 release brought interesting news to the table (on November 2015), the Node.js parser is still “beta” which makes that the cornerstone for writing a great branch of tools is not robust enough for being production ready.&lt;/li&gt;
  &lt;li&gt;The object returned by the RAML (0.8) parser is much more intuitive and easy to “browse” than the one returned by the Swagger (2.0) parser.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regardless of this analysis, nothing stops me from making the tool support both language. This is due to the capacity of creating an intermediate object that is the one used for generating the Arduino source code. The next diagram shows that behavior&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/nobel-flow.png&quot; alt=&quot;Nobel - Application Flow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;Nobel’s main goal is to give people with a minimum knowledge on Arduino coding the chance of building their own device controlled remotely via HTTP. That said, it is required: - An Arduino board and the development toolset installed. - An &lt;a href=&quot;https://www.arduino.cc/en/Main/ArduinoEthernetShield&quot;&gt;Ethernet Shield&lt;/a&gt;. - Basic knowledge of Swagger or RAML. - &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; installed.&lt;/p&gt;

&lt;p&gt;Reading the &lt;a href=&quot;https://www.npmjs.com/package/nobel&quot;&gt;Nobel’s documentation&lt;/a&gt; you will find all the information needed to deeply understand its behavior. You will also find a &lt;a href=&quot;https://www.npmjs.com/package/nobel#hands-on-example&quot;&gt;walkthrough example&lt;/a&gt; for having your first device working in minutes.&lt;/p&gt;

&lt;h2 id=&quot;what-for&quot;&gt;What for&lt;/h2&gt;

&lt;p&gt;The goal of Nobel is to solve a relatively complex problem: Exposing a REST API over an Arduino board. This way developers can focus on building their own devices. Now you can think about those projects you have been delaying, and start controlling your own devices remotely.&lt;/p&gt;

&lt;h2 id=&quot;contribute&quot;&gt;Contribute&lt;/h2&gt;

&lt;p&gt;Nobel is an Open Source application. You can contribute by improving the code, adding new features, testing and reporting bugs. Here is the link to the &lt;a href=&quot;https://github.com/nohorbee/nobel&quot;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Apr 2016 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//en/2016/04/24/nobel-02-swagger-support/</link>
        <guid isPermaLink="true">http://ourbit.github.io//en/2016/04/24/nobel-02-swagger-support/</guid>
        
        <category>Nobel</category>
        
        <category>APIs</category>
        
        <category>Arduino</category>
        
        <category>IoT</category>
        
        <category>codegen</category>
        
        <category>RAML</category>
        
        <category>Swagger</category>
        
        
      </item>
    
      <item>
        <title>Docker en acción I</title>
        <description>&lt;p&gt;Hace unos (cuantos) años, hablar de &lt;em&gt;escalabilidad&lt;/em&gt; traía a la mesa una serie de sorpresas de todo tipo. Gente hablando de &lt;em&gt;escalabilidad&lt;/em&gt; como una cualidad del &lt;em&gt;hardware&lt;/em&gt;, gente demasiado soprendida al escuchar que el que escala no es el &lt;em&gt;hardware&lt;/em&gt; sino que las aplicaciones deben estar diseñadas de forma que puedan escalar, y por supuesto, la poca distinción entre &lt;em&gt;escalabilidad&lt;/em&gt; horizontal y vertical.&lt;br /&gt;
Afortunadamente, en estos días, el concepto ha sido digerido, explicado y aparentemente entendido, pero sigue resultando curioso entender por qué durante tantos años, hubo tanta confusión al respecto.&lt;br /&gt;
No se si es causa o efecto de esta &lt;em&gt;nueva era&lt;/em&gt;, pero la virtualización juega un rol principal, y especialmente, la virtualización mediante &lt;em&gt;containers&lt;/em&gt;.&lt;br /&gt;
Este es el primer &lt;em&gt;post&lt;/em&gt; de una saga de tres, en la cual se cubrirán los conceptos básicos de &lt;em&gt;escalabilidad&lt;/em&gt;, el rol/cultura &lt;em&gt;DevOps&lt;/em&gt;, introducción a &lt;em&gt;Docker&lt;/em&gt;, una explicación y guía para su instalación, primeros pasos y configuración de una &lt;em&gt;docker regisrty&lt;/em&gt;. En este primer post, &lt;em&gt;DevOps&lt;/em&gt;, y &lt;em&gt;escalabilidad&lt;/em&gt;.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;los-devops&quot;&gt;Los DevOps&lt;/h2&gt;

&lt;p&gt;Durante mucho tiempo el rol del desarrollador se encontraba bien definido y diferenciado del rol del operador. El desarrollador &lt;strong&gt;construía&lt;/strong&gt; software mientras que el operador se encargaba de la &lt;strong&gt;infraestructura&lt;/strong&gt; y el &lt;em&gt;deployment&lt;/em&gt; de los &lt;strong&gt;paquetes&lt;/strong&gt; de software a instalar. La industria del software mantuvo con orgullo esta separación alegando que el desarrollador podía abstraerse por completo del hardware y el modo de &lt;em&gt;deploy&lt;/em&gt;, concentrándose en escribir y refinar código.  &lt;strong&gt;Empieza a ser menos sorprendente que muchos desarrolladores no pudieran escribir código&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;escalable&lt;/em&gt;&lt;/strong&gt;.&lt;br /&gt;
Al abstraerse por completo, el desarrollador no solo se despreocupaba del hardware y la plataforma que fuera a ejecutar sus programas; también se despreocupaba de la &lt;em&gt;topología&lt;/em&gt; de dicha infraestructura. No era necesario saber si el servidor estaría corriendo en un &lt;em&gt;Intel, AMD u otro fabricante&lt;/em&gt;, ni conocer el sistema operativo (en el caso de &lt;em&gt;Java&lt;/em&gt;, se suponía que la &lt;em&gt;JVM&lt;/em&gt; exponía una plataforma unificada). Pero tampoco parecía ser necesario saber si habría una máquina como servidor o si serían 10, si estarían en &lt;em&gt;cluster&lt;/em&gt;, que pasaría si una máquina se encontrara apagada, etc. Como consecuencia, y a modo de ejemplo, guardar los datos del usuario &lt;em&gt;logueado&lt;/em&gt; en una sesión &lt;em&gt;HTTP&lt;/em&gt; resultaba tan sencillo y beneficioso que se convirtió en un dogma del desarrollo de aplicaciones &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Si bien muchas de las abstracciones resultaron medianamente beneficiosas (medianamente: no resulta tan distractivo conocer el &lt;em&gt;hardware&lt;/em&gt; donde correrá nuestra aplicación), otras se volvieron extremadamente inconvenientes. El desarrollo de aplicaciones &lt;em&gt;que escalen&lt;/em&gt; es un claro ejemplo de los inconvenientes de la abstracción total.&lt;br /&gt;
El concepto de &lt;em&gt;DevOps&lt;/em&gt; surge como una alternativa a esta abstracción (o al menos una redefinición). Si bien para la mayoría de las empresas &lt;em&gt;DevOps&lt;/em&gt; es un rol más bien vinculado con el &lt;em&gt;Ops&lt;/em&gt;, el concepto radica en una cultura de colaboración entre los desarrolladores y los operadores que beneficia el desarrollo, prueba, y &lt;em&gt;releases&lt;/em&gt; frecuentes y confiables. Como un efecto colateral (positivo), los desarrolladores se involucran en forma temprana en el entendimiento de la infraestructura pudiendo tenerla en cuenta al escribir las aplicaciones (y descartando aquella información que no les resulte relevante).&lt;/p&gt;

&lt;h2 id=&quot;escalabilidad&quot;&gt;Escalabilidad&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Una aplicación escala si puede ajustarse a una mayor exigencia de carga&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;escalabilidad-vertical&quot;&gt;Escalabilidad Vertical&lt;/h3&gt;

&lt;p&gt;Procesadores más potentes, con mayor cantidad de &lt;em&gt;cores&lt;/em&gt; pueden procesar mayor cantidad de &lt;em&gt;threads&lt;/em&gt;. Más memoria puede almacenar mayor cantidad de datos de los procesos en ejecución, y de esa forma, una aplicación puede soportar mayor carga. A este tipo de &lt;em&gt;escalabilidad&lt;/em&gt; se la conoce como &lt;em&gt;escalabilidad vertical&lt;/em&gt;.&lt;br /&gt;
Una ventaja (relativa), es que puede lograrse aprovechando capacidades de los lenguajes más populares (como ser JAVA). Pero una gran desventaja es que, llegado a un punto, el aumento de &lt;em&gt;performance&lt;/em&gt; en relación al aumento de &lt;em&gt;carga&lt;/em&gt; se vuelve asintótico.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/verticalScaling.png&quot; alt=&quot;Escalabilidad Vertical - Performance / Carga&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En la imagen se puede ver como, a medida que aumenta la carga, la performance aumenta cada vez con mayor dificultad hasta llegar a un punto en donde no puede aumentar más. Esto implica que todos los usuarios de una aplicación, comenzarán a experimentar una baja de performance, o incluso, una interrupción total del sistema.&lt;br /&gt;
Al &lt;em&gt;escalar verticalmente&lt;/em&gt;, incorporando un servidor con mayores prestaciones de hardware, logramos mejorar la performance. Pero como se puede ver al comparar las curvas con la línea de &lt;em&gt;escalabilidad perfecta&lt;/em&gt; (o &lt;em&gt;escalabilidad lineal&lt;/em&gt;), el punto en donde el nuevo servidor deja de soportar la carga de trabajo, ocurre bastante antes de alcanzar la &lt;em&gt;escalabilidad perfecta&lt;/em&gt;. Una progresión de este comportamiento indicaría que, en cierto punto, invertir en &lt;em&gt;hardware&lt;/em&gt; más potente (y costoso), no lograría acercarnos a la &lt;em&gt;escalabilidad perfecta&lt;/em&gt;, alcanzando un &lt;strong&gt;límite de escalabilidad&lt;/strong&gt; (también asintótico).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/verticalScalingSummary.png&quot; alt=&quot;Escalabilidad Vertical - Ganancia / Potencia&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;escalabilidad-horizontal&quot;&gt;Escalabilidad Horizontal&lt;/h3&gt;

&lt;p&gt;Para superar las limitaciones presentadas por la &lt;em&gt;escalabilidad vertical&lt;/em&gt;, se produjo un cambio de paradigma en donde, en lugar de pensar en equipos con más potencia, se piensa en mayor cantidad de equipos con menor potencia.&lt;br /&gt;
A diferencia de la &lt;em&gt;escalabilidad vertical&lt;/em&gt;, en este paradigma, la administración se vuelve más compleja, y el desarrollo necesita considerar el hecho de que el software estará distribuido en distintos equipos (con recursos separados). Pero, además de superar las limitaciones de la &lt;em&gt;escalabiliad vertical&lt;/em&gt;, el hecho de poder &lt;em&gt;escalar&lt;/em&gt; aumentando la cantidad de equipos (o nodos), termina siendo menos costoso e incluso, aprovechando técnicas avanzadas de virtualización como las ofrecidas por &lt;em&gt;Docker&lt;/em&gt;, pueden automatizarse para responder dinámicamente a la carga en tiempo real.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/horizontalScaling.png&quot; alt=&quot;Escalabilidad Horizontal - Performance / Carga&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como se ve en la imagen, hay un punto en donde un servidor ya no logra mantener la performance necesaria para soportar la carga. En el momento donde la curva de performance cruza la recta de &lt;em&gt;escalabilidad perfecta&lt;/em&gt; (o quizás un poco antes), es tiempo de iniciar un nuevo servidor. De esta manera, por aproximación, se logra mantener una relación carga/performance que se ajusta a la &lt;em&gt;escalabilidad perfecta&lt;/em&gt; y, en tanto y en cuanto el inicio de un nuevo servidor pueda realizarse de manera automática y veloz, el aprovisionamiento podría realizarse &lt;em&gt;a demanda&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;El concepto de &lt;em&gt;virtualización mediante containers&lt;/em&gt; apunta exáctamente a brindar una solución para ese requerimiento. Como se verá en el siguiente &lt;em&gt;post&lt;/em&gt;, &lt;em&gt;Docker&lt;/em&gt; ofrece una manera más eficaz de &lt;em&gt;virtualización&lt;/em&gt; que las tradicionales &lt;em&gt;Virtual Machine&lt;/em&gt;, y si bien sus beneficios resultan instantáneos, se vuelven un verdadero diferencial al pensar en pequeños nodos que se &lt;em&gt;levantan&lt;/em&gt; en cuestión de segundos cuando es necesario.&lt;br /&gt;
Como veremos también, el hecho de que estos nodos levanten tan rápidamente, es una combinación de las capacidades de la tecnología (que reutiliza el Kernel de un solo Sistema Operativo que ya está corriendo) y el diseño de componentes pequeños que levantarán al mismo tiempo en distintos nodos (reduciendo el tiempo de arranque y paralelizandolo).&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2015/12/03/docker-in-action-IoIII/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2015/12/03/docker-in-action-IoIII/</guid>
        
        <category>Docker</category>
        
        <category>Container</category>
        
        <category>Microservices</category>
        
        <category>DevOps</category>
        
        
      </item>
    
      <item>
        <title>Docker in acción I</title>
        <description>&lt;p&gt;Several years ago, speaking of &lt;em&gt;scalability&lt;/em&gt; used to bring up a series of surprises of all kind. People talking about &lt;em&gt;scalability&lt;/em&gt; as a &lt;em&gt;hardware&lt;/em&gt; quality, people getting too much surprised when listening that it’s not the &lt;em&gt;hardware&lt;/em&gt; just scaling, but the applications being written in such a way that can &lt;em&gt;scale&lt;/em&gt;, and for sure, the little distinction between &lt;em&gt;horizontal and vertical scaling&lt;/em&gt;.&lt;br /&gt;
Fortunately these days, the concept has been digested, explained, and apparently understood. However, I’m still curious about getting why this topic was source of so much confusion.
I’m not sure which ones is the cause and which one the effect of this &lt;em&gt;new era&lt;/em&gt;, but virtualization plays a starring role, and specially the &lt;em&gt;containers based virtualization&lt;/em&gt;.
This is the first of a three posts saga, in which I’ll be covering some &lt;em&gt;scalability&lt;/em&gt; fundamentals, &lt;em&gt;DevOps&lt;/em&gt; rol/culture, &lt;em&gt;Docker&lt;/em&gt; introduction, installation walkthrough, first steps, and &lt;em&gt;docker registry&lt;/em&gt; configuration. This first post is about &lt;em&gt;DevOps&lt;/em&gt; and &lt;em&gt;scalability&lt;/em&gt;.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;devops&quot;&gt;DevOps&lt;/h2&gt;

&lt;p&gt;For so long, the developer role was well defined and set appart from the operator’s. The developer &lt;strong&gt;built&lt;/strong&gt; software while the operator was in charge of &lt;strong&gt;infrastructure&lt;/strong&gt; and software packages &lt;strong&gt;deployment&lt;/strong&gt;. The software industry was proud of this separation claiming that the developer could (and should) be completely abstracted from hardware and deployment, in order to focus in writing and refactoring code. &lt;strong&gt;Finding developers having troubles trying to write&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;scalable&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;code is not that surprising anymore&lt;/strong&gt;.&lt;br /&gt;
Not only was the developer totally isolated from hardware and the platform running the programs, but also was unworried about that infrastructure &lt;em&gt;topology&lt;/em&gt;. It was not necessary to know if the server was going to be running on an &lt;em&gt;Intel, AMD or other vendor&lt;/em&gt;, neither to worry about the OS (for instance, &lt;em&gt;Java&lt;/em&gt; was supposed to be multi-platform thanks to the &lt;em&gt;JVM&lt;/em&gt; exposing a unified one). But it also seemed to be unnecessary knowing if the server was going to be running in 1 or 10 machines, if it was going to be a &lt;em&gt;cluster&lt;/em&gt;, what would happen if a machine was down, etc. As a direct consequence, and this is just one of many examples, storing the &lt;em&gt;logged in&lt;/em&gt; user data on the &lt;em&gt;HTTP session&lt;/em&gt; was so simple and useful that had been quickly adopted as a &lt;em&gt;web applications&lt;/em&gt; development dogma.&lt;/p&gt;

&lt;p&gt;Even though many of these abstractions turned to be reasonably profitable (reasonably: it isn’t that distractive to know the hardware where our application will run), others have become extremely inconvenient. &lt;em&gt;Scalable&lt;/em&gt; applications development is a clear example of the troubles that come with the total abstraction.&lt;br /&gt;
&lt;em&gt;DevOps&lt;/em&gt; concept stands up as an alternative to this abstraction (or a redefinition at least). Though most of the companies think about &lt;em&gt;DevOps&lt;/em&gt; as a role mostly biased to the &lt;em&gt;Ops&lt;/em&gt; part, the concept represents a culture where collaboration between developers and operators benefits frequent and reliable development, testing and &lt;em&gt;releases&lt;/em&gt;. As a (positive) side effect, developers get into infrastructure early enough to consider it when writing applications (and dismissing that information that doesn’t add any value).&lt;/p&gt;

&lt;h2 id=&quot;scalability&quot;&gt;Scalability&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;An application scales if it’s able keep its performance over a workload increase&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;vertical-scalability&quot;&gt;Vertical Scalability&lt;/h3&gt;

&lt;p&gt;More powerful processors, with more &lt;em&gt;cores&lt;/em&gt;, can process more &lt;em&gt;threads&lt;/em&gt;. More memory can store more running processes’ data, and that way, an application can support a higher workload. This kind of scalability is known as &lt;em&gt;vertical scalability&lt;/em&gt;. A (relative) advantage of this approach, is that it can be achieved by taking advantage of most popular languages capabilities (such as JAVA). But a big disadvantage is that, at some point, the relationship &lt;em&gt;performance increase&lt;/em&gt; over  &lt;em&gt;workload increase&lt;/em&gt; becomes asymptotic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/verticalScaling.png&quot; alt=&quot;Vertical Scalability - Performance / Workload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The previous image shows that as far as the workload increases, the performance increase becomes harder, until reaching the point of no increasing any longer. This means that every user will experience a performance degree, or even worst, a complete system interruption.&lt;br /&gt;
When &lt;em&gt;verticaly scaling&lt;/em&gt;, by adding a more powerful server we are able to improve the performance. However, when comparing the curves against the &lt;em&gt;perfect scalability&lt;/em&gt; the moment when the new server stops supporting the workload happens pretty earlier than achieving the &lt;em&gt;perfect scalability&lt;/em&gt;. A progression over this behaviour would conclude that, at some point, investing in more powerful (and expensive) hardware won’t help us to achieve the &lt;em&gt;perfect scalability&lt;/em&gt;, but it will reach a &lt;strong&gt;scalability limit&lt;/strong&gt; (also asymptotic).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/verticalScalingSummary.png&quot; alt=&quot;Vertical Scalability - Gain / Power&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;horizontal-scalability&quot;&gt;Horizontal Scalability&lt;/h3&gt;

&lt;p&gt;In order to overcome the limitations of &lt;em&gt;vertical scalability&lt;/em&gt;, a paradigm rupture occured and, in place of thinking about more powerful machines, the key seems to be to think about more qunatity of less powerful machines.&lt;/p&gt;

&lt;p&gt;Unlike with &lt;em&gt;vertical scalability&lt;/em&gt;, in this paradigm, the infrastructure administration becomes more complex, and the development needs to consider the fact that the software will be distributed among different machines (with physically separated resources). But, in addition to overcomming &lt;em&gt;vertical scalability&lt;/em&gt; limitations, the fact of being able to &lt;em&gt;scale&lt;/em&gt; by augmenting the quantity of machines (or nodes) ends up being cheaper and furthermore, by taking advantage of the advanced virtualization techniques such as the ones offered by &lt;em&gt;Docker&lt;/em&gt;, administration can be automated to dynamically adapt to the changing workload in realtime.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/horizontalScaling.png&quot; alt=&quot;Horizontal Scalability - Performance / Workload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The previous image shows that there is a moment when the server is no longer able to support the workload. At that moment (when the performance curve touches the &lt;em&gt;perfect scalability&lt;/em&gt;, or maybe a little bit earlier), it’s time to start a new server. This way, by aproximation, the workload/performance relationship can be maintained close to the &lt;em&gt;perfect scalability&lt;/em&gt;. Furthermore, if the new server starts automatically and quickly enough, the provisioning could be done in an &lt;em&gt;on-demand&lt;/em&gt; way.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Container based virtualization&lt;/em&gt; aims exactly to provide a solution for that requirement. As it will be covered on the following post, &lt;em&gt;Docker&lt;/em&gt; offers a more efficient &lt;em&gt;virtualization&lt;/em&gt; than the traditional &lt;em&gt;Virtual Machines&lt;/em&gt;. And even though the benefits appear immediately, they become a real difference when thinking of small nodes that &lt;em&gt;start&lt;/em&gt; in seconds when it’s necessary.&lt;br /&gt;
We will also see that, the reason for these nodes to start that quickly, is a combination of the technology capabilities (that reuses a unique OS Kernel that is already running) and the good design: small components that start at the same time in different nodes (reducing the starting time by starting in parallel).&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//en/2015/12/03/docker-in-action-IoIII/</link>
        <guid isPermaLink="true">http://ourbit.github.io//en/2015/12/03/docker-in-action-IoIII/</guid>
        
        <category>Docker</category>
        
        <category>Container</category>
        
        <category>Microservices</category>
        
        <category>DevOps</category>
        
        
      </item>
    
      <item>
        <title>De una API a una Streaming API</title>
        <description>&lt;p&gt;Son muchas las ventajas de desarrollar una &lt;em&gt;API&lt;/em&gt; que exponga los recursos de nuestra aplicación. En particular, se logra reducir al mínimo el acoplamiento entre &lt;em&gt;capas&lt;/em&gt;, y mejor aún &lt;strong&gt;permite que distintas aplicaciones accedan a nuestros recursos&lt;/strong&gt;. En el caso de &lt;em&gt;APIs&lt;/em&gt; bien diseñadas, además, esto ocurrirá de una forma intuitiva.&lt;br /&gt;
Pero incluso las mejores &lt;em&gt;APIs&lt;/em&gt; pueden estar implementadas para que el cliente realice una llamada cada vez que quiere conocer el estado de un recurso. Para este caso, la &lt;em&gt;API&lt;/em&gt; deberá devolver el recurso entero cada vez que sea solicitado.&lt;br /&gt;
Pero, ¿no sería más eficiente si la &lt;em&gt;API&lt;/em&gt; solo devolviera lo que cambió desde la última vez que fue consultada? ¿Y no sería incluso más eficiente si el cliente no necesitara llamar a la &lt;em&gt;API&lt;/em&gt; para chequear si algo cambió?&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Streaming APIs&lt;/em&gt;&lt;/strong&gt; (y su buena implementación) apuntan exactamente a esto. En este &lt;em&gt;post&lt;/em&gt; veremos cómo pueden ser implementadas, y cómo funciona &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt; para convertir una &lt;em&gt;API&lt;/em&gt; tradicional en una &lt;em&gt;Streaming API&lt;/em&gt;.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;streaming-apis&quot;&gt;Streaming APIs&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Una &lt;em&gt;Streaming API&lt;/em&gt; es capaz de enviar notificaciones al cliente.&lt;/strong&gt;&lt;br /&gt;
En los esquemas tradicionales de &lt;em&gt;HTTP&lt;/em&gt; (protocolo en el que se basan las &lt;em&gt;webAPIs&lt;/em&gt;), el cliente envía un &lt;em&gt;request&lt;/em&gt; al servidor. El servidor lo recibe, interpreta, incluso llama a los &lt;em&gt;listeners&lt;/em&gt; correspondientes (si los hubiera) y devuelve un &lt;em&gt;response&lt;/em&gt; al cliente. Bajo este esquema, una vez que el servidor envió el &lt;em&gt;response&lt;/em&gt;, no puede enviar nada más al cliente hasta que este último realice un nuevo &lt;em&gt;request&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/traditional-request.png&quot; alt=&quot;Traditional HTTP Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero es posible que nuestro servidor reciba el &lt;em&gt;request&lt;/em&gt;, lo procese, incluso envíe un &lt;em&gt;response&lt;/em&gt; pero en lugar de cerrarlo, lo deje en un estado &lt;em&gt;on-hold&lt;/em&gt;. De esta forma, el server podría seguir enviando información al cliente por un período prolongado de tiempo. Esta técnica es conocida como &lt;strong&gt;&lt;em&gt;long polling&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/long-polling-request.png&quot; alt=&quot;Long Polling HTTP Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mediante &lt;em&gt;long polling&lt;/em&gt;, nuestra &lt;em&gt;API&lt;/em&gt; podría recibir una llamada y proveer el recurso que está siendo solicitado como primer &lt;em&gt;response&lt;/em&gt; pero, en lugar de cerrar la conexión, la &lt;em&gt;API&lt;/em&gt; podría enviar nuevos &lt;em&gt;responses&lt;/em&gt; en caso de que el recurso cambie luego del primer &lt;em&gt;response&lt;/em&gt;.&lt;br /&gt;
Adicionalmente, la &lt;em&gt;API&lt;/em&gt; podría enviar solo las “novedades” referentes al recurso, o en otras palabras “lo que cambió”.&lt;/p&gt;

&lt;p&gt;Analicemos el siguiente ejemplo&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/streaming-API-example.png&quot; alt=&quot;Streaming API example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1- El cliente 1 envía un &lt;em&gt;request&lt;/em&gt; con método &lt;em&gt;GET&lt;/em&gt; para solicitar el libro con id 123321.&lt;br /&gt;
2- El servidor devuelve un &lt;em&gt;response&lt;/em&gt; al cliente 1 con código &lt;em&gt;200 OK&lt;/em&gt; y un &lt;em&gt;JSON&lt;/em&gt; con la información del libro.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My book&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;ISBN&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4th&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Asumamos una estructura compleja y una gran cantidad de campos&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3- El cliente 2 envía un &lt;em&gt;request&lt;/em&gt; con método &lt;em&gt;PATCH&lt;/em&gt; para modificar la edición (ahora “5th”).&lt;br /&gt;
4- El servidor envía un &lt;em&gt;response&lt;/em&gt; al cliente 2 con código &lt;em&gt;200 OK&lt;/em&gt;.&lt;br /&gt;
5- El servidor envía un &lt;em&gt;response&lt;/em&gt; al cliente 1 con código &lt;em&gt;200 OK&lt;/em&gt; y un &lt;em&gt;JSON&lt;/em&gt; con la información del libro.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My book&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;ISBN&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;5th&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Asumamos una estructura compleja y una gran cantidad de campos&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Se deja de lado la discusión acerca de los métodos a utilizar (&lt;em&gt;PATCH&lt;/em&gt; o &lt;em&gt;PUT&lt;/em&gt;) y los códigos &lt;em&gt;HTTP&lt;/em&gt; correspondientes. Esta temática amerita un &lt;em&gt;post&lt;/em&gt; aparte.&lt;/p&gt;

&lt;p&gt;Gracias a que el servidor implementa &lt;em&gt;long polling&lt;/em&gt;, la &lt;em&gt;API&lt;/em&gt; puede informar al cliente, que el recurso que había solicitado en primer lugar ha cambiado, sin que el cliente realice una segunda consulta.&lt;br /&gt;
Al proceso por el cual las &lt;em&gt;APIs&lt;/em&gt; notifican &lt;em&gt;proactivamente&lt;/em&gt; al cliente sobre cambios en los recursos se lo conoce como &lt;em&gt;Push Notification&lt;/em&gt;. Cabe aclarar que &lt;em&gt;long polling&lt;/em&gt; no es la única forma de lograr este comportamiento. &lt;a href=&quot;https://www.websocket.org/&quot;&gt;&lt;em&gt;WebSockets&lt;/em&gt;&lt;/a&gt; es otra especificación que logra un comportamiento similar.&lt;/p&gt;

&lt;p&gt;A pesar de que en el ejemplo se puede ver la conveniencia de implementar &lt;em&gt;Push Notifications&lt;/em&gt; como parte de nuestra &lt;em&gt;Streaming API&lt;/em&gt;, no se ve un impacto en cuanto a la performance. Si bien es cierto que el cliente no estará enviando un &lt;em&gt;request&lt;/em&gt; periódicamente para verificar si el recurso cambió, cada vez que la &lt;em&gt;API&lt;/em&gt; haga un &lt;em&gt;push&lt;/em&gt; se estará enviando el recurso completo al cliente. Implementando una lógica &lt;em&gt;diferencial&lt;/em&gt; en el servidor, nuestra &lt;em&gt;API&lt;/em&gt; podría enviar solo las actualizaciones al momento de realizar un &lt;em&gt;push&lt;/em&gt;. Para nuestro ejemplo, esto podría ser:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;PATCH&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;5th&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Este &lt;em&gt;JSON&lt;/em&gt; informa al cliente que se ha modificado el campo “Edition” y su nuevo valor. El cliente podrá actualizar su modelo apropiadamente con esta información. De esta forma, sin importar que tan grande sea el recurso solicitado, el &lt;em&gt;push&lt;/em&gt; solo envía los campos que han cambiado desde la última actualización.&lt;/p&gt;

&lt;h3 id=&quot;tiempo-mximo-de-request&quot;&gt;Tiempo máximo de request&lt;/h3&gt;

&lt;p&gt;Es una buena práctica evitar &lt;em&gt;requests&lt;/em&gt; de tiempo infinito. Las conexiones pueden tener un &lt;em&gt;timeout&lt;/em&gt; o incluso podrían perderse por condiciones físicas de los servidores o la red. El impacto en código puede generalizarse:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Servidor: Chequear que el &lt;em&gt;response&lt;/em&gt; se encuentre abierto antes de enviar datos.&lt;/li&gt;
  &lt;li&gt;Cliente: Chequear que el &lt;em&gt;request&lt;/em&gt; se encuentre activo. En caso contrario, realizar un nuevo &lt;em&gt;request&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En caso que los &lt;em&gt;timeout&lt;/em&gt; sean demasiado cortos, cada nuevo &lt;em&gt;request&lt;/em&gt; estaría recibiendo el recurso entero (nuevamente). Una solución frecuente es enviar al servidor el &lt;em&gt;timestamp&lt;/em&gt; de la última notificación recibida. De esta manera, en caso de no ser el primer &lt;em&gt;request&lt;/em&gt;, el servidor podría responder con las novedades ocurridas a partir de ese &lt;em&gt;timestamp&lt;/em&gt;. Para una correcta implementación, la lógica corriendo del lado del servidor debe guardar un histórico de cambios.&lt;/p&gt;

&lt;p&gt;Hasta aquí hemos visto una explicación de lo que es una &lt;em&gt;Streaming API&lt;/em&gt; y algunos enfoques de implementación (no es el objetivo de este &lt;em&gt;post&lt;/em&gt; mostrar un ejemplo concreto).&lt;/p&gt;

&lt;h2 id=&quot;convirtiendo-una-api-en-una-streaming-api&quot;&gt;Convirtiendo una API en una Streaming API&lt;/h2&gt;

&lt;p&gt;Ahora ¿Que ocurre cuando una &lt;em&gt;API&lt;/em&gt; no es una &lt;em&gt;Streaming API&lt;/em&gt;? La respuesta corta: La utilizamos como una &lt;em&gt;API&lt;/em&gt; normal. Es decir que, cada vez que necesitemos conocer el estado de un recurso, realizaremos un &lt;em&gt;request&lt;/em&gt;.&lt;br /&gt;
Una respuesta un poco más completa incluye la implementación de un &lt;em&gt;proxy&lt;/em&gt; que sea capaz de capturar un &lt;em&gt;request&lt;/em&gt;, almacenar la respuesta, informarla al cliente y repetir la operación las veces que sea necesario. Este &lt;em&gt;proxy&lt;/em&gt; implementaría &lt;em&gt;long polling&lt;/em&gt;, es decir que podría notificar al cliente acerca de los cambios ni bien los los detecte. El siguiente diagrama ilustra este escenario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/streaming-API-proxy.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Veamos lo que ocurre en cada uno de los instantes (1-4):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;El cliente 1 solicita el recurso “book” con id “123321”.&lt;br /&gt;
  1.1 El &lt;em&gt;request&lt;/em&gt; no es atendido por el servidor sino por un &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  1.2 El &lt;em&gt;proxy&lt;/em&gt; redirecciona el &lt;em&gt;request&lt;/em&gt; al servidor.&lt;br /&gt;
  1.3 El servidor devuelve un &lt;em&gt;response&lt;/em&gt; al &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  1.4 El &lt;em&gt;proxy&lt;/em&gt; redirecciona el &lt;em&gt;response&lt;/em&gt; al cliente.&lt;/li&gt;
  &lt;li&gt;El &lt;em&gt;proxy&lt;/em&gt; envía un nuevo &lt;em&gt;request&lt;/em&gt; al servidor (y lo hará cada X segundos).&lt;br /&gt;
  2.1 El servidor devuelve un &lt;em&gt;response&lt;/em&gt; al &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  2.2 El &lt;em&gt;proxy&lt;/em&gt; compara el recurso obtenido durante este &lt;em&gt;request&lt;/em&gt; con el obtenido durante el &lt;em&gt;request&lt;/em&gt; anterior y detecta que no hubo cambios.&lt;br /&gt;
  2.3 El &lt;em&gt;proxy&lt;/em&gt; no realiza ningún &lt;em&gt;Push&lt;/em&gt; hacia el cliente.&lt;/li&gt;
  &lt;li&gt;El cliente 2 envía un &lt;em&gt;request&lt;/em&gt; con método &lt;em&gt;PATCH&lt;/em&gt;.&lt;br /&gt;
  3.1 El cliente envía el request directamente al servidor (no hay motivos para involucrar a &lt;strong&gt;este tipo de&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;proxy&lt;/em&gt;&lt;/strong&gt; en una operación de escritura).&lt;br /&gt;
  3.2 El servidor devuelve el &lt;em&gt;response&lt;/em&gt; confirmando la operación.&lt;/li&gt;
  &lt;li&gt;El &lt;em&gt;proxy&lt;/em&gt; envía un nuevo &lt;em&gt;request&lt;/em&gt; al servidor (uno más de los que envía cada X segundos).&lt;br /&gt;
  4.1 El servidor devuelve un &lt;em&gt;response&lt;/em&gt; al &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  4.2 El &lt;em&gt;proxy&lt;/em&gt; compara el recurso obtenido durante este &lt;em&gt;request&lt;/em&gt; con el obtenido durante el &lt;em&gt;request&lt;/em&gt; anterior y detecta que hubo cambios.&lt;br /&gt;
  4.3 El &lt;em&gt;proxy&lt;/em&gt; realiza un &lt;em&gt;Push&lt;/em&gt; hacia el cliente informando los cambios (idealmente, informa solo las novedades en lugar de reenviar el recurso completo).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;De esta forma, y sin modificar una sola línea del código de la &lt;em&gt;API&lt;/em&gt;, logramos emular el comportamiento de una &lt;em&gt;streaming API&lt;/em&gt; (al menos desde el punto de vista del cliente).&lt;/p&gt;

&lt;p&gt;Lo interesante de esta implementación es que no resulta difícil generalizarla para prácticamente cualquier &lt;em&gt;API&lt;/em&gt; existente. Es decir que se podría implementar una plataforma que ponga esta lógica a disposición de los usuarios de una &lt;em&gt;API&lt;/em&gt; convirtiéndola en una &lt;em&gt;streaming API&lt;/em&gt; de manera transparente para el proveedor de la &lt;em&gt;API&lt;/em&gt; y casi transparente para el cliente.&lt;br /&gt;
Esto es precisamente lo que hace &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ejemplo-utilizando-streamdataio&quot;&gt;Ejemplo utilizando streamdata.io&lt;/h3&gt;

&lt;p&gt;Tomando el servicio provisto por &lt;a href=&quot;https://bitcoinaverage.com&quot;&gt;BitcoinAverage&lt;/a&gt;, y viendo algún método simple de su &lt;a href=&quot;https://bitcoinaverage.com/api&quot;&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt;, escribimos un código sencillo que nos permita consultar cada 5 segundos, el siguiente reucrso: https://api.bitcoinaverage.com/ticker/global/EUR/&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.bitcoinaverage.com/ticker/global/EUR/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Utilizando &lt;a href=&quot;https://jquery.com/&quot;&gt;JQuery&lt;/a&gt; para obtener los beneficios del método &lt;code&gt;ajax&lt;/code&gt;, y la función &lt;code&gt;setInterval&lt;/code&gt; que nos permite ejecutar una función repetidas veces espaciadas por un intervalo de tiempo, obtenemos la siguiente respuesta en la consola:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/setIntervalClientConsole.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como se puede ver, los &lt;em&gt;requests&lt;/em&gt; son enviados cada 5 segundos y el objeto entero es devuelto sin importar si fue modificado o no.&lt;/p&gt;

&lt;p&gt;Desde la vista de &lt;em&gt;Network&lt;/em&gt; también podemos ver algo interesante&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/setIntervalClientNetwork.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cada &lt;em&gt;request&lt;/em&gt; queda evidenciado por un nuevo &lt;em&gt;GET&lt;/em&gt; al servidor. Además, algunos códigos de respuesta son &lt;em&gt;200 OK&lt;/em&gt; mientras que otros son &lt;em&gt;304 Not Modified&lt;/em&gt;. Este último código indica que un recurso no cambió desde la última vez que fue solicitado.&lt;/p&gt;

&lt;h3 id=&quot;utilizando-streamdataio&quot;&gt;Utilizando streamdata.io&lt;/h3&gt;

&lt;p&gt;Los pasos para comenzar a utilizar &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt; son realmente sencillos y pueden ser encontrados en su web. A modo de resumen:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Crear una cuenta.&lt;/li&gt;
  &lt;li&gt;Al acceder a nuestra cuenta veremos la pantalla principal con un &lt;em&gt;dashboard&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Crear una aplicación (llamémosla “OutBitApp” para el ejemplo).&lt;/li&gt;
  &lt;li&gt;Ingresar en la aplicación.&lt;/li&gt;
  &lt;li&gt;Chequear la configuración y asegurarse que “Client Request Signature” esté desactivado (&lt;strong&gt;solo para este ejemplo, no queremos poner más complejidad de la necesaria&lt;/strong&gt;).&lt;/li&gt;
  &lt;li&gt;En esta misma pantalla se puede ver (e incluso renovar) el &lt;em&gt;App Token&lt;/em&gt; (será necesario para autenticar el código del cliente).&lt;/li&gt;
  &lt;li&gt;Seguir las instrucciones en el &lt;a href=&quot;https://github.com/streamdataio/streamdataio-js-sdk&quot;&gt;repositorio oficial&lt;/a&gt; para generar la &lt;em&gt;SDK&lt;/em&gt; que nos permite interactuar con &lt;em&gt;streamdata.io&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Con estos pasos cumplidos, el siguiente código accede a la misma &lt;em&gt;API&lt;/em&gt; del ejemplo anterior pero recibiendo &lt;em&gt;Push notifications&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;./js/streamdataio.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;streamdataio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.bitcoinaverage.com/ticker/global/EUR/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/APP TOKEN/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;init&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;update&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;See the console&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Se debe reemplazar el “APP TOKEN” por el generado para su aplicación. Recuerden que &lt;em&gt;JavaScript&lt;/em&gt; puede correr en un cliente cualquiera (browser) por lo que no debe incluirse el &lt;em&gt;Token&lt;/em&gt; en dicho código. Esto es válido solo para pruebas y ejemplos.&lt;/p&gt;

&lt;p&gt;Observemos la respuesta obtenida en la consola:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientConsole.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Si bien no se alcanza a ver, los objetos no son &lt;em&gt;loggeados&lt;/em&gt; en intervalos regulares de tiempo. Esto se debe a que el cliente solo &lt;em&gt;loggea&lt;/em&gt; cuando recibe una respuesta y esto solo ocurre cuando hay cambios en el recurso &lt;em&gt;observado&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;El primer objeto recibido (se distingue porque está acompañado por un “init”) es similar al del ejemplo anterior, es decir, el objeto completo. Los demás (acompañados por un “update”) son en realidad, &lt;em&gt;arrays&lt;/em&gt; de objetos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Analicemos uno de dichos &lt;em&gt;arrays&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientparticularUpdate.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cada objeto del &lt;em&gt;array&lt;/em&gt; indica que se ha reemplazado un atributo y especifica su nuevo valor. No todos los &lt;em&gt;arrays&lt;/em&gt; tienen  la misma longitud (4, 1 y 2 como se ve en la imagen anterior). Esto indica la cantidad de cambios que se detectaron en cada respuesta.&lt;/p&gt;

&lt;p&gt;Finalmente, observemos lo que ocurre con la vista &lt;em&gt;network&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientNetwork.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Se puede observar un solo &lt;em&gt;request&lt;/em&gt; a una &lt;em&gt;url&lt;/em&gt; perteneciente a &lt;em&gt;streamdata&lt;/em&gt; (el &lt;em&gt;proxy&lt;/em&gt;) y como parámetros, el &lt;em&gt;token&lt;/em&gt; (sólo aquellos clientes que lo conozcan podrán acceder a la aplicación de &lt;em&gt;streamdata.io&lt;/em&gt;) y la &lt;em&gt;url&lt;/em&gt; del &lt;em&gt;request&lt;/em&gt; original. Ese request estuvo abierto por 2.5 minutos recibiendo notificaciones cada vez que el recurso cambiaba en el servidor.&lt;/p&gt;

&lt;h2 id=&quot;conclusin&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Es clara la practicidad e incluso posibles mejoras en &lt;em&gt;performance&lt;/em&gt; al utilizar una &lt;em&gt;Stremaing API&lt;/em&gt;. Basta con pensar en las &lt;em&gt;web applications&lt;/em&gt; actuales para ver la utilidad de recibir notificaciones cuando cambia el modelo en nuestro servidor.&lt;br /&gt;
Pero no siempre contamos con una &lt;em&gt;Streaming API&lt;/em&gt;. A menudo no estamos consultando una &lt;em&gt;API&lt;/em&gt; propia y muchas veces, nuestra &lt;em&gt;API&lt;/em&gt; ya existe y no hay tiempo o dinero para cambiarla (convertirla en una &lt;em&gt;streaming API&lt;/em&gt;). Mediante un &lt;em&gt;proxy&lt;/em&gt; se puede emular el comportamiento de una &lt;em&gt;streaming API&lt;/em&gt; e incluso si no contáramos con el tiempo para implementar esta solución, es posible utilizar una plataforma como &lt;em&gt;streamdata.io&lt;/em&gt; la cual provee esta funcionalidad como un servicio en la nube.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2015/09/09/from-api-to-streaming-api/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2015/09/09/from-api-to-streaming-api/</guid>
        
        <category>API</category>
        
        <category>Streaming</category>
        
        <category>Long</category>
        
        <category>Polling</category>
        
        
      </item>
    
      <item>
        <title>From API to Streaming API</title>
        <description>&lt;p&gt;There are so many pros on building an &lt;em&gt;API&lt;/em&gt; that exposes our application resources. It’s particularly important to achieve reducing tiers coupling to the minimum, but even better, &lt;strong&gt;this allows different applications to access our resources&lt;/strong&gt;. For well designed &lt;em&gt;APIs&lt;/em&gt; this will also happen in an intuitive way.&lt;br /&gt;
But even the best &lt;em&gt;APIs&lt;/em&gt; could be implemented in a way that the client needs to make a call every time it needs to know the state of a resource. For this case, the &lt;em&gt;API&lt;/em&gt; will have to return the entire resource every time it’s requested.&lt;br /&gt;
But, wouldn’t it be more efficient if the &lt;em&gt;API&lt;/em&gt; only returned what has changed since the last time it was queried? And wouldn’t it be even more efficient if the client didn’t need to call the &lt;em&gt;API&lt;/em&gt; to check if something changed?&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Streaming APIs&lt;/em&gt;&lt;/strong&gt; (when implemented properly) try to solve exactly that. On this post we will see how these could be implemented and how &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt; works in order to turn a traditional &lt;em&gt;API&lt;/em&gt; into a &lt;em&gt;Streaming API&lt;/em&gt;.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;streaming-apis&quot;&gt;Streaming APIs&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A &lt;em&gt;Streaming API&lt;/em&gt; is capable of sending notifications to the client.&lt;/strong&gt;&lt;br /&gt;
In traditional &lt;em&gt;HTTP&lt;/em&gt; (base protocol for &lt;em&gt;webAPIs&lt;/em&gt;) schemas, the client sends a &lt;em&gt;request&lt;/em&gt; to the server. The server receives it, understands, even call the proper &lt;em&gt;listeners&lt;/em&gt; (if any) and ends returning a &lt;em&gt;response&lt;/em&gt; to the client. On this schema, once the server sent the &lt;em&gt;response&lt;/em&gt;, it can’t send anything else to the client until this one makes a new &lt;em&gt;request&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/traditional-request.png&quot; alt=&quot;Traditional HTTP Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But it’s possible for our server to receive the &lt;em&gt;request&lt;/em&gt;, process it and even send a &lt;em&gt;response&lt;/em&gt;, but leave it &lt;em&gt;on-hold&lt;/em&gt; instead of closing it. This way the server could keep sending information to the client for a long period of time. This technique is better known as &lt;strong&gt;&lt;em&gt;long polling&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/long-polling-request.png&quot; alt=&quot;Long Polling HTTP Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By &lt;em&gt;long polling&lt;/em&gt;, our &lt;em&gt;API&lt;/em&gt; could receive a call and provide the resource that is being requested as a first &lt;em&gt;response&lt;/em&gt;. But instead of closing the connection, the &lt;em&gt;API&lt;/em&gt; could send new &lt;em&gt;responses&lt;/em&gt; in case the resource changes after the first &lt;em&gt;response&lt;/em&gt;.&lt;br /&gt;
Furthermore, the &lt;em&gt;API&lt;/em&gt; could send just the changes that impacted the resource.&lt;/p&gt;

&lt;p&gt;Let’s consider the following example&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/streaming-API-example.png&quot; alt=&quot;Streaming API example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1- Client 1 sends a &lt;em&gt;request&lt;/em&gt; with method &lt;em&gt;GET&lt;/em&gt; in order to request a book with id 123321.&lt;br /&gt;
2- The server returns a &lt;em&gt;response&lt;/em&gt; to the client 1 with a &lt;em&gt;200 OK&lt;/em&gt; code and a &lt;em&gt;JSON&lt;/em&gt; containing the book information&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My book&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;ISBN&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4th&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Let&amp;#39;s assume a complex structure with a lot of fields&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3- Client 2 sends a &lt;em&gt;request&lt;/em&gt; with method &lt;em&gt;PATCH&lt;/em&gt; in order to modify the book edition (now “5th”).&lt;br /&gt;
4- The server sends a &lt;em&gt;response&lt;/em&gt; to the client 2 with a &lt;em&gt;200 OK&lt;/em&gt; code.&lt;br /&gt;
5- The server sends a  &lt;em&gt;response&lt;/em&gt; to the client 1 with a &lt;em&gt;200 OK&lt;/em&gt; code and a &lt;em&gt;JSON&lt;/em&gt; with the book information.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My book&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;ISBN&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;5th&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Let&amp;#39;s assume a complex structure with a lot of fields&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We are not going into any discussion about which methods should be used (&lt;em&gt;PATCH&lt;/em&gt; o &lt;em&gt;PUT&lt;/em&gt;) or which &lt;em&gt;HTTP&lt;/em&gt; codes. This topics deserve their own post.&lt;/p&gt;

&lt;p&gt;Because the server implements &lt;em&gt;long polling&lt;/em&gt;, the &lt;em&gt;API&lt;/em&gt; is able to notify the client that the previously requested resource has changed, without having the client sending a second &lt;em&gt;request&lt;/em&gt;.&lt;br /&gt;
The process where &lt;em&gt;APIs proactively&lt;/em&gt; notify the client about changes on the resources is known as &lt;em&gt;Push Notification&lt;/em&gt;. It worth clarifying that &lt;em&gt;long polling&lt;/em&gt; is not the only way of achieving this behaviour. &lt;a href=&quot;https://www.websocket.org/&quot;&gt;&lt;em&gt;WebSockets&lt;/em&gt;&lt;/a&gt; is another specification that does the trick.&lt;/p&gt;

&lt;p&gt;Although the example shows the benefits of implementing &lt;em&gt;Push Notifications&lt;/em&gt; as a feature of our &lt;em&gt;Streaming API&lt;/em&gt;, the impact regarding to the performance is not neatly visible. Even though is true that the client won’t be periodically sending &lt;em&gt;requests&lt;/em&gt; in order to check if the resource changed, each time the &lt;em&gt;API&lt;/em&gt; makes a &lt;em&gt;push&lt;/em&gt; it will be sending the complete resource to the client. By implementing a &lt;em&gt;differential&lt;/em&gt; logic (server side), our &lt;em&gt;API&lt;/em&gt; would be able to just notify the updates when sending a &lt;em&gt;push&lt;/em&gt;. Considering our previous example, this could go like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;PATCH&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;5th&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;em&gt;JSON&lt;/em&gt; informs the client that the field “Edition” has changed. It also informs its new value. The client is now able to update its model according to this information. This way regardless how big a resource is, the &lt;em&gt;push&lt;/em&gt; is only sending the fields that have changed since the last update.&lt;/p&gt;

&lt;h3 id=&quot;request-timeout&quot;&gt;Request timeout&lt;/h3&gt;

&lt;p&gt;Avoiding infinite time &lt;em&gt;requests&lt;/em&gt; is a good practice. Connections could &lt;em&gt;timeout&lt;/em&gt; or even could be loss because of servers or network physical conditions. The code impact could be described (in a general way) as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Server: Checks that the &lt;em&gt;response&lt;/em&gt; is open before sending data.&lt;/li&gt;
  &lt;li&gt;Client: Check that the &lt;em&gt;request&lt;/em&gt; is active. Otherwise, make a new &lt;em&gt;request&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case of having too short &lt;em&gt;timeouts&lt;/em&gt;, each new &lt;em&gt;request&lt;/em&gt; would be receiving the complete resource (again). A known solution consists in sending the server the &lt;em&gt;timestamp&lt;/em&gt; of the last received notification. This way, for every &lt;em&gt;request&lt;/em&gt; that is not the first one, the server could respond with the updates happened since that &lt;em&gt;timestamp&lt;/em&gt;. For a proper implementation, the server side logic should hold a change log of every resource.&lt;/p&gt;

&lt;p&gt;This far we have covered an explanation about &lt;em&gt;Streaming APIs&lt;/em&gt; and some impelmentation approaches. It’s not this post goal to show a whole concrete example.&lt;/p&gt;

&lt;h2 id=&quot;from-an-api-to-a-streaming-api&quot;&gt;From an API to a Streaming API&lt;/h2&gt;

&lt;p&gt;But, what happens when an &lt;em&gt;API&lt;/em&gt; is not a &lt;em&gt;Streaming API&lt;/em&gt;? The short answer is: We use it as a regular &lt;em&gt;API&lt;/em&gt;. It means that, each time we need to know the state of a resource, we will be sending a &lt;em&gt;request&lt;/em&gt;.&lt;br /&gt;
A more complete answer includes a &lt;em&gt;proxy&lt;/em&gt; implementation capable of intercepting a &lt;em&gt;request&lt;/em&gt;, storing the &lt;em&gt;response&lt;/em&gt;, informing it to the original client, and repeat the operation as many time as needed. This &lt;em&gt;proxy&lt;/em&gt; implements &lt;em&gt;long polling&lt;/em&gt; which means that it is able to notify the client as soon as a change on a resource is detected. Next diagram shows this scenario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/streaming-API-proxy.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s see what happens on each of the instants (1-4):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Client 1 &lt;em&gt;requests&lt;/em&gt; the “book” with id “123321”.&lt;br /&gt;
  1.1 The &lt;em&gt;request&lt;/em&gt; is not got by the server but by a &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  1.2 The &lt;em&gt;proxy&lt;/em&gt; redirects the &lt;em&gt;request&lt;/em&gt; to the server.&lt;br /&gt;
  1.3 The server returns a &lt;em&gt;response&lt;/em&gt; to the &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  1.4 The &lt;em&gt;proxy&lt;/em&gt; redirects the &lt;em&gt;response&lt;/em&gt; to the client.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;proxy&lt;/em&gt; sends a new &lt;em&gt;request&lt;/em&gt; to the server (and it will do that every  X seconds).&lt;br /&gt;
  2.1 The server returns a &lt;em&gt;response&lt;/em&gt; to the &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  2.2 The &lt;em&gt;proxy&lt;/em&gt; compares the fetched resource during this &lt;em&gt;request&lt;/em&gt; with the previous one and detects no changes.&lt;br /&gt;
  2.3 The &lt;em&gt;proxy&lt;/em&gt; doesn’t &lt;em&gt;Push&lt;/em&gt; anything to the client.&lt;/li&gt;
  &lt;li&gt;Client 2 sends a &lt;em&gt;request&lt;/em&gt; with a &lt;em&gt;PATCH&lt;/em&gt; method.&lt;br /&gt;
  3.1 The client sends the &lt;em&gt;request&lt;/em&gt; directly to the server (there is no reason for involving &lt;strong&gt;this kind of&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;proxy&lt;/em&gt;&lt;/strong&gt; for a “write” operation).&lt;br /&gt;
  3.2 The server sends the &lt;em&gt;response&lt;/em&gt; confirming the operation.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;proxy&lt;/em&gt; sends a new &lt;em&gt;request&lt;/em&gt; to the server (one of those being sent every X segundos).&lt;br /&gt;
  4.1 The server sends a  &lt;em&gt;response&lt;/em&gt; to the &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  4.2 The &lt;em&gt;proxy&lt;/em&gt; compares the fetched resource during this &lt;em&gt;request&lt;/em&gt; with the previous one and detects changes.&lt;br /&gt;
  4.3 The &lt;em&gt;proxy&lt;/em&gt; sends a &lt;em&gt;Push&lt;/em&gt; to the client informing the changes (ideally, just the news instead of the complete resource).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This way, and without modifying a single line of the &lt;em&gt;API&lt;/em&gt; code, we can emulate the behaviour of a &lt;em&gt;streaming API&lt;/em&gt; (from the client perspective at least).&lt;/p&gt;

&lt;p&gt;What is most interesting about this implementation is that it’s not hard to make it generic for virtually every existing &lt;em&gt;API&lt;/em&gt;. It means that we could implement a platform that offers this logic to an &lt;em&gt;API&lt;/em&gt; users turning it into a &lt;em&gt;streaming API&lt;/em&gt; transparently for both, the &lt;em&gt;API&lt;/em&gt; provider and the client.&lt;br /&gt;
This is exactly what &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt; does.&lt;/p&gt;

&lt;h3 id=&quot;example-using-streamdataio&quot;&gt;Example using streamdata.io&lt;/h3&gt;

&lt;p&gt;Considering the service provided by &lt;a href=&quot;https://bitcoinaverage.com&quot;&gt;BitcoinAverage&lt;/a&gt;, and looking at a simple method of its  &lt;a href=&quot;https://bitcoinaverage.com/api&quot;&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt;, we will write a simple code that allows us to query the following resource every 5 seconds: https://api.bitcoinaverage.com/ticker/global/EUR/&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.bitcoinaverage.com/ticker/global/EUR/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By using &lt;a href=&quot;https://jquery.com/&quot;&gt;JQuery&lt;/a&gt; for getting the benefits of the &lt;code&gt;ajax&lt;/code&gt; method and the &lt;code&gt;setInterval&lt;/code&gt; function (that lets us execute a function repeatedly on a time interval basis) we get the following response on the console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/setIntervalClientConsole.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As it can be seen, the &lt;em&gt;requests&lt;/em&gt; are being sent every 5 seconds and the complete object is being returned regardless if it was modified.&lt;/p&gt;

&lt;p&gt;From the &lt;em&gt;Network&lt;/em&gt; perspective we can also discover an interesting thing&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/setIntervalClientNetwork.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each &lt;em&gt;request&lt;/em&gt; is proven by a new &lt;em&gt;GET&lt;/em&gt;. Also, some &lt;em&gt;HTTP&lt;/em&gt; response codes are &lt;em&gt;200 OK&lt;/em&gt; while others are &lt;em&gt;304 Not Modified&lt;/em&gt;. This last code points that the resource hasn’t changed since last time it has been requested.&lt;/p&gt;

&lt;h3 id=&quot;using-streamdataio&quot;&gt;Using streamdata.io&lt;/h3&gt;

&lt;p&gt;Steps for getting started with &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt; are really simple and can be found on its web site. As a summary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create an account.&lt;/li&gt;
  &lt;li&gt;Once logged in we will see the Home page with a &lt;em&gt;dashboard&lt;/em&gt; in it.&lt;/li&gt;
  &lt;li&gt;Create an application (let’s call it “OutBitApp” for this example).&lt;/li&gt;
  &lt;li&gt;Access the application.&lt;/li&gt;
  &lt;li&gt;Check the configuration and make sure that the “Client Request Signature” option is disabled (&lt;strong&gt;only for this example, we want to avoid any not mandatory complexity&lt;/strong&gt;).&lt;/li&gt;
  &lt;li&gt;On that same screen we can see (and renew) the &lt;em&gt;App Token&lt;/em&gt; (it will be required for authenticating the client code).&lt;/li&gt;
  &lt;li&gt;Follow the instructions at the &lt;a href=&quot;https://github.com/streamdataio/streamdataio-js-sdk&quot;&gt;official GH repo&lt;/a&gt; in order to generate the &lt;em&gt;SDK&lt;/em&gt; that lets us interact with &lt;em&gt;streamdata.io&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Having accomplished these steps, the following code accesses the same &lt;em&gt;API&lt;/em&gt; from the previous example but receiving &lt;em&gt;Push notifications&lt;/em&gt; instead.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;./js/streamdataio.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;streamdataio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.bitcoinaverage.com/ticker/global/EUR/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/APP TOKEN/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;init&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;update&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;See the console&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The “APP TOKEN” must be replaced with the one generated for the application. Remember that &lt;em&gt;JavaScript&lt;/em&gt; runs on any client/browser and because of that, it’s not a good idea to place the &lt;em&gt;Token&lt;/em&gt; on that code. This is only valid for proof of concept and examples.&lt;/p&gt;

&lt;p&gt;Let’s check the response at the console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientConsole.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Even though these are hidden, objects are not being logged in regular intervals. This is due to the client only logs those when it receives a &lt;em&gt;response&lt;/em&gt; and this only happens when the observed resource changes.&lt;/li&gt;
  &lt;li&gt;The first received object (logged after an “init”) is similar to the one on the previous example, it means, the complete object. The following ones (logged after an “update”) are actually &lt;em&gt;arrays of objects&lt;/em&gt;..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s analyze one of these &lt;em&gt;arrays&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientparticularUpdate.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each object in the &lt;em&gt;array&lt;/em&gt; indicates that an attribute has been replaced, and its new value is specified. Not every &lt;em&gt;array&lt;/em&gt; has the same length (4, 1 and 2 as can be seen on the previous image). This indicates the quantity of changes that has been detected on each &lt;em&gt;response&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finally, let’s see what happens on the &lt;em&gt;network&lt;/em&gt; view:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientNetwork.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It can be seen an ONLY &lt;em&gt;request&lt;/em&gt; to a &lt;em&gt;url&lt;/em&gt; belonging to &lt;em&gt;streamdata&lt;/em&gt; (the &lt;em&gt;proxy&lt;/em&gt;) and as parameters, the &lt;em&gt;token&lt;/em&gt; (only those clients knowing it will be able to access the app at &lt;em&gt;streamdata.io&lt;/em&gt;) and the &lt;em&gt;url&lt;/em&gt; of the original &lt;em&gt;request&lt;/em&gt;. That request has been opened for 2.5 minutes receiving notifications every time the resource changed at the server.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;It’s clear how practical and even how &lt;em&gt;performant&lt;/em&gt; using a &lt;em&gt;Streaming API&lt;/em&gt; could be. Only thinking of the current &lt;em&gt;web applications&lt;/em&gt; helps us understanding how useful is to receive notifications when the model changes at the server.&lt;br /&gt;
But we won’t always count with a &lt;em&gt;Streaming API&lt;/em&gt;. We are often hitting a 3rd party &lt;em&gt;API&lt;/em&gt; and lot of times, our &lt;em&gt;API&lt;/em&gt; already exists and we don’t count with time or money enough to change it (turn it into a &lt;em&gt;streaming API&lt;/em&gt;). By implementing a &lt;em&gt;proxy&lt;/em&gt; we can emulate that behaviour, and even if we didn’t count with the resources for implementing this solution, it would be possible to take advantage of a platform like &lt;em&gt;streamdata.io&lt;/em&gt; that provides this functionality as a service in the cloud.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//en/2015/09/09/from-api-to-streaming-api/</link>
        <guid isPermaLink="true">http://ourbit.github.io//en/2015/09/09/from-api-to-streaming-api/</guid>
        
        <category>API</category>
        
        <category>Streaming</category>
        
        <category>Long</category>
        
        <category>Polling</category>
        
        
      </item>
    
  </channel>
</rss>
