<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OurBit</title>
    <description>Ourbit is a blog dedicated to IT topics such as programming, management, qa, and technology in general</description>
    <link>http://ourbit.github.io//</link>
    <atom:link href="http://ourbit.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 13 Sep 2015 13:23:30 -0300</pubDate>
    <lastBuildDate>Sun, 13 Sep 2015 13:23:30 -0300</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>De una API a una Streaming API</title>
        <description>&lt;p&gt;Son muchas las ventajas de desarrollar una &lt;em&gt;API&lt;/em&gt; que exponga los recursos de nuestra aplicación. En particular, se logra reducir al mínimo el acoplamiento entre &lt;em&gt;capas&lt;/em&gt;, y mejor aún &lt;strong&gt;permite que distintas aplicaciones accedan a nuestros recursos&lt;/strong&gt;. En el caso de &lt;em&gt;APIs&lt;/em&gt; bien diseñadas, además, esto ocurrirá de una forma intuitiva.&lt;br /&gt;
Pero incluso las mejores &lt;em&gt;APIs&lt;/em&gt; pueden estar implementadas para que el cliente realice una llamada cada vez que quiere conocer el estado de un recurso. Para este caso, la &lt;em&gt;API&lt;/em&gt; deberá devolver el recurso entero cada vez que sea solicitado.&lt;br /&gt;
Pero, ¿no sería más eficiente si la &lt;em&gt;API&lt;/em&gt; solo devolviera lo que cambió desde la última vez que fue consultada? ¿Y no sería incluso más eficiente si el cliente no necesitara llamar a la &lt;em&gt;API&lt;/em&gt; para chequear si algo cambió?&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Streaming APIs&lt;/em&gt;&lt;/strong&gt; (y su buena implementación) apuntan exactamente a esto. En este &lt;em&gt;post&lt;/em&gt; veremos cómo pueden ser implementadas, y cómo funciona &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt; para convertir una &lt;em&gt;API&lt;/em&gt; tradicional en una &lt;em&gt;Streaming API&lt;/em&gt;.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;streaming-apis&quot;&gt;Streaming APIs&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Una &lt;em&gt;Streaming API&lt;/em&gt; es capaz de enviar notificaciones al cliente.&lt;/strong&gt;&lt;br /&gt;
En los esquemas tradicionales de &lt;em&gt;HTTP&lt;/em&gt; (protocolo en el que se basan las &lt;em&gt;webAPIs&lt;/em&gt;), el cliente envía un &lt;em&gt;request&lt;/em&gt; al servidor. El servidor lo recibe, interpreta, incluso llama a los &lt;em&gt;listeners&lt;/em&gt; correspondientes (si los hubiera) y devuelve un &lt;em&gt;response&lt;/em&gt; al cliente. Bajo este esquema, una vez que el servidor envió el &lt;em&gt;response&lt;/em&gt;, no puede enviar nada más al cliente hasta que este último realice un nuevo &lt;em&gt;request&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/traditional-request.png&quot; alt=&quot;Traditional HTTP Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero es posible que nuestro servidor reciba el &lt;em&gt;request&lt;/em&gt;, lo procese, incluso envíe un &lt;em&gt;response&lt;/em&gt; pero en lugar de cerrarlo, lo deje en un estado &lt;em&gt;on-hold&lt;/em&gt;. De esta forma, el server podría seguir enviando información al cliente por un período prolongado de tiempo. Esta técnica es conocida como &lt;strong&gt;&lt;em&gt;long polling&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/long-polling-request.png&quot; alt=&quot;Long Polling HTTP Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mediante &lt;em&gt;long polling&lt;/em&gt;, nuestra &lt;em&gt;API&lt;/em&gt; podría recibir una llamada y proveer el recurso que está siendo solicitado como primer &lt;em&gt;response&lt;/em&gt; pero, en lugar de cerrar la conexión, la &lt;em&gt;API&lt;/em&gt; podría enviar nuevos &lt;em&gt;responses&lt;/em&gt; en caso de que el recurso cambie luego del primer &lt;em&gt;response&lt;/em&gt;.&lt;br /&gt;
Adicionalmente, la &lt;em&gt;API&lt;/em&gt; podría enviar solo las “novedades” referentes al recurso, o en otras palabras “lo que cambió”.  &lt;/p&gt;

&lt;p&gt;Analicemos el siguiente ejemplo&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/streaming-API-example.png&quot; alt=&quot;Streaming API example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1- El cliente 1 envía un &lt;em&gt;request&lt;/em&gt; con método &lt;em&gt;GET&lt;/em&gt; para solicitar el libro con id 123321.&lt;br /&gt;
2- El servidor devuelve un &lt;em&gt;response&lt;/em&gt; al cliente 1 con código &lt;em&gt;200 OK&lt;/em&gt; y un &lt;em&gt;JSON&lt;/em&gt; con la información del libro.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My book&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;ISBN&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4th&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Asumamos una estructura compleja y una gran cantidad de campos&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3- El cliente 2 envía un &lt;em&gt;request&lt;/em&gt; con método &lt;em&gt;PATCH&lt;/em&gt; para modificar la edición (ahora “5th”).&lt;br /&gt;
4- El servidor envía un &lt;em&gt;response&lt;/em&gt; al cliente 2 con código &lt;em&gt;200 OK&lt;/em&gt;.&lt;br /&gt;
5- El servidor envía un &lt;em&gt;response&lt;/em&gt; al cliente 1 con código &lt;em&gt;200 OK&lt;/em&gt; y un &lt;em&gt;JSON&lt;/em&gt; con la información del libro.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My book&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;ISBN&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;5th&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Asumamos una estructura compleja y una gran cantidad de campos&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Se deja de lado la discusión acerca de los métodos a utilizar (&lt;em&gt;PATCH&lt;/em&gt; o &lt;em&gt;PUT&lt;/em&gt;) y los códigos &lt;em&gt;HTTP&lt;/em&gt; correspondientes. Esta temática amerita un &lt;em&gt;post&lt;/em&gt; aparte.&lt;/p&gt;

&lt;p&gt;Gracias a que el servidor implementa &lt;em&gt;long polling&lt;/em&gt;, la &lt;em&gt;API&lt;/em&gt; puede informar al cliente, que el recurso que había solicitado en primer lugar ha cambiado, sin que el cliente realice una segunda consulta.&lt;br /&gt;
Al proceso por el cual las &lt;em&gt;APIs&lt;/em&gt; notifican &lt;em&gt;proactivamente&lt;/em&gt; al cliente sobre cambios en los recursos se lo conoce como &lt;em&gt;Push Notification&lt;/em&gt;. Cabe aclarar que &lt;em&gt;long polling&lt;/em&gt; no es la única forma de lograr este comportamiento. &lt;a href=&quot;https://www.websocket.org/&quot;&gt;&lt;em&gt;WebSockets&lt;/em&gt;&lt;/a&gt; es otra especificación que logra un comportamiento similar.  &lt;/p&gt;

&lt;p&gt;A pesar de que en el ejemplo se puede ver la conveniencia de implementar &lt;em&gt;Push Notifications&lt;/em&gt; como parte de nuestra &lt;em&gt;Streaming API&lt;/em&gt;, no se ve un impacto en cuanto a la performance. Si bien es cierto que el cliente no estará enviando un &lt;em&gt;request&lt;/em&gt; periódicamente para verificar si el recurso cambió, cada vez que la &lt;em&gt;API&lt;/em&gt; haga un &lt;em&gt;push&lt;/em&gt; se estará enviando el recurso completo al cliente. Implementando una lógica &lt;em&gt;diferencial&lt;/em&gt; en el servidor, nuestra &lt;em&gt;API&lt;/em&gt; podría enviar solo las actualizaciones al momento de realizar un &lt;em&gt;push&lt;/em&gt;. Para nuestro ejemplo, esto podría ser:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;PATCH&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;5th&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Este &lt;em&gt;JSON&lt;/em&gt; informa al cliente que se ha modificado el campo “Edition” y su nuevo valor. El cliente podrá actualizar su modelo apropiadamente con esta información. De esta forma, sin importar que tan grande sea el recurso solicitado, el &lt;em&gt;push&lt;/em&gt; solo envía los campos que han cambiado desde la última actualización.&lt;/p&gt;

&lt;h3 id=&quot;tiempo-mximo-de-request&quot;&gt;Tiempo máximo de request&lt;/h3&gt;

&lt;p&gt;Es una buena práctica evitar &lt;em&gt;requests&lt;/em&gt; de tiempo infinito. Las conexiones pueden tener un &lt;em&gt;timeout&lt;/em&gt; o incluso podrían perderse por condiciones físicas de los servidores o la red. El impacto en código puede generalizarse:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Servidor: Chequear que el &lt;em&gt;response&lt;/em&gt; se encuentre abierto antes de enviar datos.&lt;/li&gt;
  &lt;li&gt;Cliente: Chequear que el &lt;em&gt;request&lt;/em&gt; se encuentre activo. En caso contrario, realizar un nuevo &lt;em&gt;request&lt;/em&gt;.  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En caso que los &lt;em&gt;timeout&lt;/em&gt; sean demasiado cortos, cada nuevo &lt;em&gt;request&lt;/em&gt; estaría recibiendo el recurso entero (nuevamente). Una solución frecuente es enviar al servidor el &lt;em&gt;timestamp&lt;/em&gt; de la última notificación recibida. De esta manera, en caso de no ser el primer &lt;em&gt;request&lt;/em&gt;, el servidor podría responder con las novedades ocurridas a partir de ese &lt;em&gt;timestamp&lt;/em&gt;. Para una correcta implementación, la lógica corriendo del lado del servidor debe guardar un histórico de cambios.  &lt;/p&gt;

&lt;p&gt;Hasta aquí hemos visto una explicación de lo que es una &lt;em&gt;Streaming API&lt;/em&gt; y algunos enfoques de implementación (no es el objetivo de este &lt;em&gt;post&lt;/em&gt; mostrar un ejemplo concreto).&lt;/p&gt;

&lt;h2 id=&quot;convirtiendo-una-api-en-una-streaming-api&quot;&gt;Convirtiendo una API en una Streaming API&lt;/h2&gt;

&lt;p&gt;Ahora ¿Que ocurre cuando una &lt;em&gt;API&lt;/em&gt; no es una &lt;em&gt;Streaming API&lt;/em&gt;? La respuesta corta: La utilizamos como una &lt;em&gt;API&lt;/em&gt; normal. Es decir que, cada vez que necesitemos conocer el estado de un recurso, realizaremos un &lt;em&gt;request&lt;/em&gt;.&lt;br /&gt;
Una respuesta un poco más completa incluye la implementación de un &lt;em&gt;proxy&lt;/em&gt; que sea capaz de capturar un &lt;em&gt;request&lt;/em&gt;, almacenar la respuesta, informarla al cliente y repetir la operación las veces que sea necesario. Este &lt;em&gt;proxy&lt;/em&gt; implementaría &lt;em&gt;long polling&lt;/em&gt;, es decir que podría notificar al cliente acerca de los cambios ni bien los los detecte. El siguiente diagrama ilustra este escenario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/streaming-API-proxy.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Veamos lo que ocurre en cada uno de los instantes (1-4):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;El cliente 1 solicita el recurso “book” con id “123321”.&lt;br /&gt;
  1.1 El &lt;em&gt;request&lt;/em&gt; no es atendido por el servidor sino por un &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  1.2 El &lt;em&gt;proxy&lt;/em&gt; redirecciona el &lt;em&gt;request&lt;/em&gt; al servidor.&lt;br /&gt;
  1.3 El servidor devuelve un &lt;em&gt;response&lt;/em&gt; al &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  1.4 El &lt;em&gt;proxy&lt;/em&gt; redirecciona el &lt;em&gt;response&lt;/em&gt; al cliente.  &lt;/li&gt;
  &lt;li&gt;El &lt;em&gt;proxy&lt;/em&gt; envía un nuevo &lt;em&gt;request&lt;/em&gt; al servidor (y lo hará cada X segundos).&lt;br /&gt;
  2.1 El servidor devuelve un &lt;em&gt;response&lt;/em&gt; al &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  2.2 El &lt;em&gt;proxy&lt;/em&gt; compara el recurso obtenido durante este &lt;em&gt;request&lt;/em&gt; con el obtenido durante el &lt;em&gt;request&lt;/em&gt; anterior y detecta que no hubo cambios.&lt;br /&gt;
  2.3 El &lt;em&gt;proxy&lt;/em&gt; no realiza ningún &lt;em&gt;Push&lt;/em&gt; hacia el cliente.  &lt;/li&gt;
  &lt;li&gt;El cliente 2 envía un &lt;em&gt;request&lt;/em&gt; con método &lt;em&gt;PATCH&lt;/em&gt;.&lt;br /&gt;
  3.1 El cliente envía el request directamente al servidor (no hay motivos para involucrar a &lt;strong&gt;este tipo de&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;proxy&lt;/em&gt;&lt;/strong&gt; en una operación de escritura).&lt;br /&gt;
  3.2 El servidor devuelve el &lt;em&gt;response&lt;/em&gt; confirmando la operación.  &lt;/li&gt;
  &lt;li&gt;El &lt;em&gt;proxy&lt;/em&gt; envía un nuevo &lt;em&gt;request&lt;/em&gt; al servidor (uno más de los que envía cada X segundos).&lt;br /&gt;
  4.1 El servidor devuelve un &lt;em&gt;response&lt;/em&gt; al &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  4.2 El &lt;em&gt;proxy&lt;/em&gt; compara el recurso obtenido durante este &lt;em&gt;request&lt;/em&gt; con el obtenido durante el &lt;em&gt;request&lt;/em&gt; anterior y detecta que hubo cambios.&lt;br /&gt;
  4.3 El &lt;em&gt;proxy&lt;/em&gt; realiza un &lt;em&gt;Push&lt;/em&gt; hacia el cliente informando los cambios (idealmente, informa solo las novedades en lugar de reenviar el recurso completo).  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;De esta forma, y sin modificar una sola línea del código de la &lt;em&gt;API&lt;/em&gt;, logramos emular el comportamiento de una &lt;em&gt;streaming API&lt;/em&gt; (al menos desde el punto de vista del cliente).  &lt;/p&gt;

&lt;p&gt;Lo interesante de esta implementación es que no resulta difícil generalizarla para prácticamente cualquier &lt;em&gt;API&lt;/em&gt; existente. Es decir que se podría implementar una plataforma que ponga esta lógica a disposición de los usuarios de una &lt;em&gt;API&lt;/em&gt; convirtiéndola en una &lt;em&gt;streaming API&lt;/em&gt; de manera transparente para el proveedor de la &lt;em&gt;API&lt;/em&gt; y casi transparente para el cliente.&lt;br /&gt;
Esto es precisamente lo que hace &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ejemplo-utilizando-streamdataio&quot;&gt;Ejemplo utilizando streamdata.io&lt;/h3&gt;

&lt;p&gt;Tomando el servicio provisto por &lt;a href=&quot;https://bitcoinaverage.com&quot;&gt;BitcoinAverage&lt;/a&gt;, y viendo algún método simple de su &lt;a href=&quot;https://bitcoinaverage.com/api&quot;&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt;, escribimos un código sencillo que nos permita consultar cada 5 segundos, el siguiente reucrso: https://api.bitcoinaverage.com/ticker/global/EUR/&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.bitcoinaverage.com/ticker/global/EUR/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Utilizando &lt;a href=&quot;https://jquery.com/&quot;&gt;JQuery&lt;/a&gt; para obtener los beneficios del método &lt;code&gt;ajax&lt;/code&gt;, y la función &lt;code&gt;setInterval&lt;/code&gt; que nos permite ejecutar una función repetidas veces espaciadas por un intervalo de tiempo, obtenemos la siguiente respuesta en la consola:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/setIntervalClientConsole.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como se puede ver, los &lt;em&gt;requests&lt;/em&gt; son enviados cada 5 segundos y el objeto entero es devuelto sin importar si fue modificado o no.&lt;/p&gt;

&lt;p&gt;Desde la vista de &lt;em&gt;Network&lt;/em&gt; también podemos ver algo interesante&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/setIntervalClientNetwork.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cada &lt;em&gt;request&lt;/em&gt; queda evidenciado por un nuevo &lt;em&gt;GET&lt;/em&gt; al servidor. Además, algunos códigos de respuesta son &lt;em&gt;200 OK&lt;/em&gt; mientras que otros son &lt;em&gt;304 Not Modified&lt;/em&gt;. Este último código indica que un recurso no cambió desde la última vez que fue solicitado.&lt;/p&gt;

&lt;h3 id=&quot;utilizando-streamdataio&quot;&gt;Utilizando streamdata.io&lt;/h3&gt;

&lt;p&gt;Los pasos para comenzar a utilizar &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt; son realmente sencillos y pueden ser encontrados en su web. A modo de resumen:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Crear una cuenta.&lt;/li&gt;
  &lt;li&gt;Al acceder a nuestra cuenta veremos la pantalla principal con un &lt;em&gt;dashboard&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Crear una aplicación (llamémosla “OutBitApp” para el ejemplo).&lt;/li&gt;
  &lt;li&gt;Ingresar en la aplicación.&lt;/li&gt;
  &lt;li&gt;Chequear la configuración y asegurarse que “Client Request Signature” esté desactivado (&lt;strong&gt;solo para este ejemplo, no queremos poner más complejidad de la necesaria&lt;/strong&gt;).&lt;/li&gt;
  &lt;li&gt;En esta misma pantalla se puede ver (e incluso renovar) el &lt;em&gt;App Token&lt;/em&gt; (será necesario para autenticar el código del cliente).&lt;/li&gt;
  &lt;li&gt;Seguir las instrucciones en el &lt;a href=&quot;https://github.com/streamdataio/streamdataio-js-sdk&quot;&gt;repositorio oficial&lt;/a&gt; para generar la &lt;em&gt;SDK&lt;/em&gt; que nos permite interactuar con &lt;em&gt;streamdata.io&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Con estos pasos cumplidos, el siguiente código accede a la misma &lt;em&gt;API&lt;/em&gt; del ejemplo anterior pero recibiendo &lt;em&gt;Push notifications&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;./js/streamdataio.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;streamdataio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.bitcoinaverage.com/ticker/global/EUR/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/APP TOKEN/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;init&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;update&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;See the console&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Se debe reemplazar el “APP TOKEN” por el generado para su aplicación. Recuerden que &lt;em&gt;JavaScript&lt;/em&gt; puede correr en un cliente cualquiera (browser) por lo que no debe incluirse el &lt;em&gt;Token&lt;/em&gt; en dicho código. Esto es válido solo para pruebas y ejemplos.&lt;/p&gt;

&lt;p&gt;Observemos la respuesta obtenida en la consola:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientConsole.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Si bien no se alcanza a ver, los objetos no son &lt;em&gt;loggeados&lt;/em&gt; en intervalos regulares de tiempo. Esto se debe a que el cliente solo &lt;em&gt;loggea&lt;/em&gt; cuando recibe una respuesta y esto solo ocurre cuando hay cambios en el recurso &lt;em&gt;observado&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;El primer objeto recibido (se distingue porque está acompañado por un “init”) es similar al del ejemplo anterior, es decir, el objeto completo. Los demás (acompañados por un “update”) son en realidad, &lt;em&gt;arrays&lt;/em&gt; de objetos.  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Analicemos uno de dichos &lt;em&gt;arrays&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientparticularUpdate.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cada objeto del &lt;em&gt;array&lt;/em&gt; indica que se ha reemplazado un atributo y especifica su nuevo valor. No todos los &lt;em&gt;arrays&lt;/em&gt; tienen  la misma longitud (4, 1 y 2 como se ve en la imagen anterior). Esto indica la cantidad de cambios que se detectaron en cada respuesta.  &lt;/p&gt;

&lt;p&gt;Finalmente, observemos lo que ocurre con la vista &lt;em&gt;network&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientNetwork.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Se puede observar un solo &lt;em&gt;request&lt;/em&gt; a una &lt;em&gt;url&lt;/em&gt; perteneciente a &lt;em&gt;streamdata&lt;/em&gt; (el &lt;em&gt;proxy&lt;/em&gt;) y como parámetros, el &lt;em&gt;token&lt;/em&gt; (sólo aquellos clientes que lo conozcan podrán acceder a la aplicación de &lt;em&gt;streamdata.io&lt;/em&gt;) y la &lt;em&gt;url&lt;/em&gt; del &lt;em&gt;request&lt;/em&gt; original. Ese request estuvo abierto por 2.5 minutos recibiendo notificaciones cada vez que el recurso cambiaba en el servidor.&lt;/p&gt;

&lt;h2 id=&quot;conclusin&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Es clara la practicidad e incluso posibles mejoras en &lt;em&gt;performance&lt;/em&gt; al utilizar una &lt;em&gt;Stremaing API&lt;/em&gt;. Basta con pensar en las &lt;em&gt;web applications&lt;/em&gt; actuales para ver la utilidad de recibir notificaciones cuando cambia el modelo en nuestro servidor.&lt;br /&gt;
Pero no siempre contamos con una &lt;em&gt;Streaming API&lt;/em&gt;. A menudo no estamos consultando una &lt;em&gt;API&lt;/em&gt; propia y muchas veces, nuestra &lt;em&gt;API&lt;/em&gt; ya existe y no hay tiempo o dinero para cambiarla (convertirla en una &lt;em&gt;streaming API&lt;/em&gt;). Mediante un &lt;em&gt;proxy&lt;/em&gt; se puede emular el comportamiento de una &lt;em&gt;streaming API&lt;/em&gt; e incluso si no contáramos con el tiempo para implementar esta solución, es posible utilizar una plataforma como &lt;em&gt;streamdata.io&lt;/em&gt; la cual provee esta funcionalidad como un servicio en la nube.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2015/09/09/from-api-to-streaming-api/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2015/09/09/from-api-to-streaming-api/</guid>
        
        <category>API</category>
        
        <category>Streaming</category>
        
        <category>Long</category>
        
        <category>Polling</category>
        
        
      </item>
    
      <item>
        <title>From API to Streaming API</title>
        <description>&lt;p&gt;There are so many pros on building an &lt;em&gt;API&lt;/em&gt; that exposes our application resources. It’s particularly important to achieve reducing tiers coupling to the minimum, but even better, &lt;strong&gt;this allows different applications to access our resources&lt;/strong&gt;. For well designed &lt;em&gt;APIs&lt;/em&gt; this will also happen in an intuitive way.&lt;br /&gt;
But even the best &lt;em&gt;APIs&lt;/em&gt; could be implemented in a way that the client needs to make a call every time it needs to know the state of a resource. For this case, the &lt;em&gt;API&lt;/em&gt; will have to return the entire resource every time it’s requested.&lt;br /&gt;
But, wouldn’t it be more efficient if the &lt;em&gt;API&lt;/em&gt; only returned what has changed since the last time it was queried? And wouldn’t it be even more efficient if the client didn’t need to call the &lt;em&gt;API&lt;/em&gt; to check if something changed?&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Streaming APIs&lt;/em&gt;&lt;/strong&gt; (when implemented properly) try to solve exactly that. On this post we will see how these could be implemented and how &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt; works in order to turn a traditional &lt;em&gt;API&lt;/em&gt; into a &lt;em&gt;Streaming API&lt;/em&gt;.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;streaming-apis&quot;&gt;Streaming APIs&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A &lt;em&gt;Streaming API&lt;/em&gt; is capable of sending notifications to the client.&lt;/strong&gt;&lt;br /&gt;
In traditional &lt;em&gt;HTTP&lt;/em&gt; (base protocol for &lt;em&gt;webAPIs&lt;/em&gt;) schemas, the client sends a &lt;em&gt;request&lt;/em&gt; to the server. The server receives it, understands, even call the proper &lt;em&gt;listeners&lt;/em&gt; (if any) and ends returning a &lt;em&gt;response&lt;/em&gt; to the client. On this schema, once the server sent the &lt;em&gt;response&lt;/em&gt;, it can’t send anything else to the client until this one makes a new &lt;em&gt;request&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/traditional-request.png&quot; alt=&quot;Traditional HTTP Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But it’s possible for our server to receive the &lt;em&gt;request&lt;/em&gt;, process it and even send a &lt;em&gt;response&lt;/em&gt;, but leave it &lt;em&gt;on-hold&lt;/em&gt; instead of closing it. This way the server could keep sending information to the client for a long period of time. This technique is better known as &lt;strong&gt;&lt;em&gt;long polling&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/long-polling-request.png&quot; alt=&quot;Long Polling HTTP Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By &lt;em&gt;long polling&lt;/em&gt;, our &lt;em&gt;API&lt;/em&gt; could receive a call and provide the resource that is being requested as a first &lt;em&gt;response&lt;/em&gt;. But instead of closing the connection, the &lt;em&gt;API&lt;/em&gt; could send new &lt;em&gt;responses&lt;/em&gt; in case the resource changes after the first &lt;em&gt;response&lt;/em&gt;.&lt;br /&gt;
Furthermore, the &lt;em&gt;API&lt;/em&gt; could send just the changes that impacted the resource.&lt;/p&gt;

&lt;p&gt;Let’s consider the following example&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/streaming-API-example.png&quot; alt=&quot;Streaming API example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1- Client 1 sends a &lt;em&gt;request&lt;/em&gt; with method &lt;em&gt;GET&lt;/em&gt; in order to request a book with id 123321.&lt;br /&gt;
2- The server returns a &lt;em&gt;response&lt;/em&gt; to the client 1 with a &lt;em&gt;200 OK&lt;/em&gt; code and a &lt;em&gt;JSON&lt;/em&gt; containing the book information&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My book&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;ISBN&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4th&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Let&amp;#39;s assume a complex structure with a lot of fields&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3- Client 2 sends a &lt;em&gt;request&lt;/em&gt; with method &lt;em&gt;PATCH&lt;/em&gt; in order to modify the book edition (now “5th”).&lt;br /&gt;
4- The server sends a &lt;em&gt;response&lt;/em&gt; to the client 2 with a &lt;em&gt;200 OK&lt;/em&gt; code.&lt;br /&gt;
5- The server sends a  &lt;em&gt;response&lt;/em&gt; to the client 1 with a &lt;em&gt;200 OK&lt;/em&gt; code and a &lt;em&gt;JSON&lt;/em&gt; with the book information.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My book&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;ISBN&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;5th&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Let&amp;#39;s assume a complex structure with a lot of fields&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We are not going into any discussion about which methods should be used (&lt;em&gt;PATCH&lt;/em&gt; o &lt;em&gt;PUT&lt;/em&gt;) or which &lt;em&gt;HTTP&lt;/em&gt; codes. This topics deserve their own post.&lt;/p&gt;

&lt;p&gt;Because the server implements &lt;em&gt;long polling&lt;/em&gt;, the &lt;em&gt;API&lt;/em&gt; is able to notify the client that the previously requested resource has changed, without having the client sending a second &lt;em&gt;request&lt;/em&gt;.&lt;br /&gt;
The process where &lt;em&gt;APIs proactively&lt;/em&gt; notify the client about changes on the resources is known as &lt;em&gt;Push Notification&lt;/em&gt;. It worth clarifying that &lt;em&gt;long polling&lt;/em&gt; is not the only way of achieving this behaviour. &lt;a href=&quot;https://www.websocket.org/&quot;&gt;&lt;em&gt;WebSockets&lt;/em&gt;&lt;/a&gt; is another specification that does the trick.  &lt;/p&gt;

&lt;p&gt;Although the example shows the benefits of implementing &lt;em&gt;Push Notifications&lt;/em&gt; as a feature of our &lt;em&gt;Streaming API&lt;/em&gt;, the impact regarding to the performance is not neatly visible. Even though is true that the client won’t be periodically sending &lt;em&gt;requests&lt;/em&gt; in order to check if the resource changed, each time the &lt;em&gt;API&lt;/em&gt; makes a &lt;em&gt;push&lt;/em&gt; it will be sending the complete resource to the client. By implementing a &lt;em&gt;differential&lt;/em&gt; logic (server side), our &lt;em&gt;API&lt;/em&gt; would be able to just notify the updates when sending a &lt;em&gt;push&lt;/em&gt;. Considering our previous example, this could go like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;PATCH&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;5th&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;em&gt;JSON&lt;/em&gt; informs the client that the field “Edition” has changed. It also informs its new value. The client is now able to update its model according to this information. This way regardless how big a resource is, the &lt;em&gt;push&lt;/em&gt; is only sending the fields that have changed since the last update.&lt;/p&gt;

&lt;h3 id=&quot;request-timeout&quot;&gt;Request timeout&lt;/h3&gt;

&lt;p&gt;Avoiding infinite time &lt;em&gt;requests&lt;/em&gt; is a good practice. Connections could &lt;em&gt;timeout&lt;/em&gt; or even could be loss because of servers or network physical conditions. The code impact could be described (in a general way) as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Server: Checks that the &lt;em&gt;response&lt;/em&gt; is open before sending data.&lt;/li&gt;
  &lt;li&gt;Client: Check that the &lt;em&gt;request&lt;/em&gt; is active. Otherwise, make a new &lt;em&gt;request&lt;/em&gt;.  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case of having too short &lt;em&gt;timeouts&lt;/em&gt;, each new &lt;em&gt;request&lt;/em&gt; would be receiving the complete resource (again). A known solution consists in sending the server the &lt;em&gt;timestamp&lt;/em&gt; of the last received notification. This way, for every &lt;em&gt;request&lt;/em&gt; that is not the first one, the server could respond with the updates happened since that &lt;em&gt;timestamp&lt;/em&gt;. For a proper implementation, the server side logic should hold a change log of every resource.  &lt;/p&gt;

&lt;p&gt;This far we have covered an explanation about &lt;em&gt;Streaming APIs&lt;/em&gt; and some impelmentation approaches. It’s not this post goal to show a whole concrete example.&lt;/p&gt;

&lt;h2 id=&quot;from-an-api-to-a-streaming-api&quot;&gt;From an API to a Streaming API&lt;/h2&gt;

&lt;p&gt;But, what happens when an &lt;em&gt;API&lt;/em&gt; is not a &lt;em&gt;Streaming API&lt;/em&gt;? The short answer is: We use it as a regular &lt;em&gt;API&lt;/em&gt;. It means that, each time we need to know the state of a resource, we will be sending a &lt;em&gt;request&lt;/em&gt;.&lt;br /&gt;
A more complete answer includes a &lt;em&gt;proxy&lt;/em&gt; implementation capable of intercepting a &lt;em&gt;request&lt;/em&gt;, storing the &lt;em&gt;response&lt;/em&gt;, informing it to the original client, and repeat the operation as many time as needed. This &lt;em&gt;proxy&lt;/em&gt; implements &lt;em&gt;long polling&lt;/em&gt; which means that it is able to notify the client as soon as a change on a resource is detected. Next diagram shows this scenario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/streaming-API-proxy.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s see what happens on each of the instants (1-4):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Client 1 &lt;em&gt;requests&lt;/em&gt; the “book” with id “123321”.&lt;br /&gt;
  1.1 The &lt;em&gt;request&lt;/em&gt; is not got by the server but by a &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  1.2 The &lt;em&gt;proxy&lt;/em&gt; redirects the &lt;em&gt;request&lt;/em&gt; to the server.&lt;br /&gt;
  1.3 The server returns a &lt;em&gt;response&lt;/em&gt; to the &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  1.4 The &lt;em&gt;proxy&lt;/em&gt; redirects the &lt;em&gt;response&lt;/em&gt; to the client.  &lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;proxy&lt;/em&gt; sends a new &lt;em&gt;request&lt;/em&gt; to the server (and it will do that every  X seconds).&lt;br /&gt;
  2.1 The server returns a &lt;em&gt;response&lt;/em&gt; to the &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  2.2 The &lt;em&gt;proxy&lt;/em&gt; compares the fetched resource during this &lt;em&gt;request&lt;/em&gt; with the previous one and detects no changes.&lt;br /&gt;
  2.3 The &lt;em&gt;proxy&lt;/em&gt; doesn’t &lt;em&gt;Push&lt;/em&gt; anything to the client.  &lt;/li&gt;
  &lt;li&gt;Client 2 sends a &lt;em&gt;request&lt;/em&gt; with a &lt;em&gt;PATCH&lt;/em&gt; method.&lt;br /&gt;
  3.1 The client sends the &lt;em&gt;request&lt;/em&gt; directly to the server (there is no reason for involving &lt;strong&gt;this kind of&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;proxy&lt;/em&gt;&lt;/strong&gt; for a “write” operation).&lt;br /&gt;
  3.2 The server sends the &lt;em&gt;response&lt;/em&gt; confirming the operation.  &lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;proxy&lt;/em&gt; sends a new &lt;em&gt;request&lt;/em&gt; to the server (one of those being sent every X segundos).&lt;br /&gt;
  4.1 The server sends a  &lt;em&gt;response&lt;/em&gt; to the &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  4.2 The &lt;em&gt;proxy&lt;/em&gt; compares the fetched resource during this &lt;em&gt;request&lt;/em&gt; with the previous one and detects changes.&lt;br /&gt;
  4.3 The &lt;em&gt;proxy&lt;/em&gt; sends a &lt;em&gt;Push&lt;/em&gt; to the client informing the changes (ideally, just the news instead of the complete resource).  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This way, and without modifying a single line of the &lt;em&gt;API&lt;/em&gt; code, we can emulate the behaviour of a &lt;em&gt;streaming API&lt;/em&gt; (from the client perspective at least).  &lt;/p&gt;

&lt;p&gt;What is most interesting about this implementation is that it’s not hard to make it generic for virtually every existing &lt;em&gt;API&lt;/em&gt;. It means that we could implement a platform that offers this logic to an &lt;em&gt;API&lt;/em&gt; users turning it into a &lt;em&gt;streaming API&lt;/em&gt; transparently for both, the &lt;em&gt;API&lt;/em&gt; provider and the client.&lt;br /&gt;
This is exactly what &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt; does.&lt;/p&gt;

&lt;h3 id=&quot;example-using-streamdataio&quot;&gt;Example using streamdata.io&lt;/h3&gt;

&lt;p&gt;Considering the service provided by &lt;a href=&quot;https://bitcoinaverage.com&quot;&gt;BitcoinAverage&lt;/a&gt;, and looking at a simple method of its  &lt;a href=&quot;https://bitcoinaverage.com/api&quot;&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt;, we will write a simple code that allows us to query the following resource every 5 seconds: https://api.bitcoinaverage.com/ticker/global/EUR/&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.bitcoinaverage.com/ticker/global/EUR/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By using &lt;a href=&quot;https://jquery.com/&quot;&gt;JQuery&lt;/a&gt; for getting the benefits of the &lt;code&gt;ajax&lt;/code&gt; method and the &lt;code&gt;setInterval&lt;/code&gt; function (that lets us execute a function repeatedly on a time interval basis) we get the following response on the console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/setIntervalClientConsole.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As it can be seen, the &lt;em&gt;requests&lt;/em&gt; are being sent every 5 seconds and the complete object is being returned regardless if it was modified.&lt;/p&gt;

&lt;p&gt;From the &lt;em&gt;Network&lt;/em&gt; perspective we can also discover an interesting thing&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/setIntervalClientNetwork.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each &lt;em&gt;request&lt;/em&gt; is proven by a new &lt;em&gt;GET&lt;/em&gt;. Also, some &lt;em&gt;HTTP&lt;/em&gt; response codes are &lt;em&gt;200 OK&lt;/em&gt; while others are &lt;em&gt;304 Not Modified&lt;/em&gt;. This last code points that the resource hasn’t changed since last time it has been requested.&lt;/p&gt;

&lt;h3 id=&quot;using-streamdataio&quot;&gt;Using streamdata.io&lt;/h3&gt;

&lt;p&gt;Steps for getting started with &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt; are really simple and can be found on its web site. As a summary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create an account.&lt;/li&gt;
  &lt;li&gt;Once logged in we will see the Home page with a &lt;em&gt;dashboard&lt;/em&gt; in it.&lt;/li&gt;
  &lt;li&gt;Create an application (let’s call it “OutBitApp” for this example).&lt;/li&gt;
  &lt;li&gt;Access the application.&lt;/li&gt;
  &lt;li&gt;Check the configuration and make sure that the “Client Request Signature” option is disabled (&lt;strong&gt;only for this example, we want to avoid any not mandatory complexity&lt;/strong&gt;).&lt;/li&gt;
  &lt;li&gt;On that same screen we can see (and renew) the &lt;em&gt;App Token&lt;/em&gt; (it will be required for authenticating the client code).&lt;/li&gt;
  &lt;li&gt;Follow the instructions at the &lt;a href=&quot;https://github.com/streamdataio/streamdataio-js-sdk&quot;&gt;official GH repo&lt;/a&gt; in order to generate the &lt;em&gt;SDK&lt;/em&gt; that lets us interact with &lt;em&gt;streamdata.io&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Having accomplished these steps, the following code accesses the same &lt;em&gt;API&lt;/em&gt; from the previous example but receiving &lt;em&gt;Push notifications&lt;/em&gt; instead.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;./js/streamdataio.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;streamdataio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.bitcoinaverage.com/ticker/global/EUR/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/APP TOKEN/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;init&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;update&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;See the console&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The “APP TOKEN” must be replaced with the one generated for the application. Remember that &lt;em&gt;JavaScript&lt;/em&gt; runs on any client/browser and because of that, it’s not a good idea to place the &lt;em&gt;Token&lt;/em&gt; on that code. This is only valid for proof of concept and examples.&lt;/p&gt;

&lt;p&gt;Let’s check the response at the console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientConsole.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Even though these are hidden, objects are not being logged in regular intervals. This is due to the client only logs those when it receives a &lt;em&gt;response&lt;/em&gt; and this only happens when the observed resource changes.&lt;/li&gt;
  &lt;li&gt;The first received object (logged after an “init”) is similar to the one on the previous example, it means, the complete object. The following ones (logged after an “update”) are actually &lt;em&gt;arrays of objects&lt;/em&gt;..  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s analyze one of these &lt;em&gt;arrays&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientparticularUpdate.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each object in the &lt;em&gt;array&lt;/em&gt; indicates that an attribute has been replaced, and its new value is specified. Not every &lt;em&gt;array&lt;/em&gt; has the same length (4, 1 and 2 as can be seen on the previous image). This indicates the quantity of changes that has been detected on each &lt;em&gt;response&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;Finally, let’s see what happens on the &lt;em&gt;network&lt;/em&gt; view:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientNetwork.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It can be seen an ONLY &lt;em&gt;request&lt;/em&gt; to a &lt;em&gt;url&lt;/em&gt; belonging to &lt;em&gt;streamdata&lt;/em&gt; (the &lt;em&gt;proxy&lt;/em&gt;) and as parameters, the &lt;em&gt;token&lt;/em&gt; (only those clients knowing it will be able to access the app at &lt;em&gt;streamdata.io&lt;/em&gt;) and the &lt;em&gt;url&lt;/em&gt; of the original &lt;em&gt;request&lt;/em&gt;. That request has been opened for 2.5 minutes receiving notifications every time the resource changed at the server.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;It’s clear how practical and even how &lt;em&gt;performant&lt;/em&gt; using a &lt;em&gt;Streaming API&lt;/em&gt; could be. Only thinking of the current &lt;em&gt;web applications&lt;/em&gt; helps us understanding how useful is to receive notifications when the model changes at the server.&lt;br /&gt;
But we won’t always count with a &lt;em&gt;Streaming API&lt;/em&gt;. We are often hitting a 3rd party &lt;em&gt;API&lt;/em&gt; and lot of times, our &lt;em&gt;API&lt;/em&gt; already exists and we don’t count with time or money enough to change it (turn it into a &lt;em&gt;streaming API&lt;/em&gt;). By implementing a &lt;em&gt;proxy&lt;/em&gt; we can emulate that behaviour, and even if we didn’t count with the resources for implementing this solution, it would be possible to take advantage of a platform like &lt;em&gt;streamdata.io&lt;/em&gt; that provides this functionality as a service in the cloud.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//en/2015/09/09/from-api-to-streaming-api/</link>
        <guid isPermaLink="true">http://ourbit.github.io//en/2015/09/09/from-api-to-streaming-api/</guid>
        
        <category>API</category>
        
        <category>Streaming</category>
        
        <category>Long</category>
        
        <category>Polling</category>
        
        
      </item>
    
      <item>
        <title>Código expresivo en Javascript</title>
        <description>&lt;p&gt;Hay varios (si no demasiados) aspectos a tener en cuenta al momento de escribir una pieza de código: &lt;em&gt;performance, mantenibilidad y legibilidad&lt;/em&gt;, por mencionar algunos.
Un aspecto que me resulta particularmente interesante es el denominado “expresividad” y significa “la habilidad de enunciar lo que se está haciendo”.  &lt;/p&gt;

&lt;p&gt;Como buen &lt;em&gt;Javascript Hipster (“A mi me gustaba antes de que fuera popular”)&lt;/em&gt; me gustaría mostrar algunos ejemplos de cómo &lt;em&gt;Javascript&lt;/em&gt; nos permite ser realmente expresivos trabajando con &lt;em&gt;arrays&lt;/em&gt; (y algunas funciones en particular): &lt;em&gt;forEach, filter, map, reduce, every&lt;/em&gt; and &lt;em&gt;some&lt;/em&gt;.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;p&gt;Si bien habitualmente la característica de “Expresivo” se le atribuye al lenguaje, en todos los lenguajes se puede ser más o menos expresivo al escribir diferentes versiones de código que hagan lo mismo. De esta manera, sería más preciso definir a una pieza de código como “expresiva” si realmente es capaz de enunciar lo que está haciendo.&lt;/p&gt;

&lt;p&gt;Tomemos como ejemplo un conjunto de personas:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;176&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;John Doe Jr.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Jane Doe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Julian Doe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ahora, recorramos este &lt;em&gt;array&lt;/em&gt; y por cada persona imprimamos “&lt;em&gt;Name&lt;/em&gt; is &lt;em&gt;age&lt;/em&gt; years old”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; - &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Este código es bastante simple, corto y podríamos decir que es bastante legible. Pero esto no lo hace necesariamente &lt;strong&gt;expresivo&lt;/strong&gt;. Lo que queríamos hacer era: Imprimir “&lt;em&gt;Name&lt;/em&gt; is &lt;em&gt;age&lt;/em&gt; years old” por cada persona. Esto es lo que dice el código que acabamos de escribir:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Inicializar una variable &lt;em&gt;i&lt;/em&gt; con el valor &lt;em&gt;0&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Siempre y cuando la variable sea menor a la cantidad de personas, incrementarla y ejecutar el siguiente bloque de código:&lt;br /&gt;
  2.1. Obtener el nombre de la persona en la posición indicada por la variable previamente inicializada.&lt;br /&gt;
  2.2. Concatenarle un espacio, un guión y luego otro espacio.&lt;br /&gt;
  2.3. Concatenarle la edad de la persona en la posición indicada por la variable previamente inicializada.&lt;br /&gt;
  2.4. &lt;em&gt;Loggear&lt;/em&gt; el resultado en la consola.  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Comencemos por quitar la línea dentro del &lt;em&gt;for&lt;/em&gt; y ubicarla dentro de una función que reciba una &lt;em&gt;persona&lt;/em&gt; como parámetro e imprima el patrón especificado.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; - &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si estás pensando “esto no tiene nada que ver con &lt;em&gt;Javascript&lt;/em&gt; y las funciones de sus &lt;em&gt;arrays&lt;/em&gt;”, estás en lo cierto, pero no te impacientes.&lt;br /&gt;
No hicimos más que &lt;em&gt;encapsular&lt;/em&gt; una funcionalidad para ocultar su complejidad. &lt;em&gt;Encapsulamiento&lt;/em&gt; es un concepto habitualmente relacionado al Paradigma de Programación orientada a objetos, pero en realidad puede lograrse de muchas maneras, y las &lt;em&gt;funciones&lt;/em&gt; son una forma ancestral de lograrlo. El objetivo de &lt;em&gt;encapsular&lt;/em&gt; código no es el de hacerlo más expresivo, pero en la mayoría de los casos, es un efecto colateral.&lt;/p&gt;

&lt;p&gt;Si leemos nuevamente el código (y obviamos describir la nueva función):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Inicializar una variable &lt;em&gt;i&lt;/em&gt; con el valor &lt;em&gt;0&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Siempre y cuando la variable sea menor a la cantidad de personas, incrementarla e&lt;/li&gt;
  &lt;li&gt;Imprimir el patrón para la persona en la posición indicada por la variable previamente inicializada.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;arrayprototypeforeach&quot;&gt;Array.Prototype.forEach&lt;/h3&gt;
&lt;p&gt;Si bien el código se ha vuelto un poco más expresivo, parece estar más preocupado por la variable &lt;em&gt;i&lt;/em&gt;, su inicialización, y su cota, que por la persona en sí misma.&lt;br /&gt;
Afortunadamente hay otras formas de recorrer un &lt;em&gt;array&lt;/em&gt;. Por ejemplo el método &lt;code&gt;Array.prototype.forEach(function)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si leemos nuevamente el código:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Por cada persona, imprimir el patrón.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;De esta forma, el código &lt;em&gt;hace&lt;/em&gt; y &lt;em&gt;expresa&lt;/em&gt; exactamente lo que queremos.&lt;br /&gt;
Pero, si bien la lectura resulta más simple, es necesario comprender que es lo que está ocurriendo detrás del telón.&lt;br /&gt;
En primer lugar, algo a destacar de &lt;em&gt;Javascript&lt;/em&gt; es que &lt;em&gt;todo (o casi todo) es un mensaje.&lt;/em&gt; Esto significa que objetos, funciones, métodos y valores son mensajes (o expresiones) y como tales pueden ser pasadas como parámetros.&lt;br /&gt;
A diferencia del &lt;em&gt;for&lt;/em&gt; que es una instrucción, el &lt;em&gt;forEach&lt;/em&gt; es un método del objeto &lt;em&gt;Array&lt;/em&gt; (o de su &lt;em&gt;prototipo&lt;/em&gt;). Combinando estos conceptos, &lt;em&gt;forEach&lt;/em&gt; recorre el &lt;em&gt;array&lt;/em&gt; y en cada iteración invoca a la función que recibió como parámetro. En dicha invocación, &lt;em&gt;forEach&lt;/em&gt; le pasa como parámetro a la otra función, el elemento que está siendo iterado.&lt;br /&gt;
Una implementación muy básica del &lt;em&gt;forEach&lt;/em&gt; podría ser:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Adicionalmente, el &lt;em&gt;forEach&lt;/em&gt; recibe un segundo parámetro opcional que representa una función que será invocada cuando se haya finalizado la recorrida del &lt;em&gt;array&lt;/em&gt;. En los ejemplos que se están mostrando esto puede parecer inútil, pero cuando se está en un entorno de programación &lt;em&gt;asincrónica&lt;/em&gt; (como &lt;a href=&quot;http://nodejs.org&quot;&gt;NodeJS&lt;/a&gt;), este tipo de implementaciones se vuelve indispensable.&lt;/p&gt;

&lt;p&gt;Aún más útiles quizá resulten 2 parámetros adicionales que &lt;strong&gt;el &lt;em&gt;forEach&lt;/em&gt; le pasa a la función especificada en el primer parámetro:&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: El índice del elemento que está siendo iterado.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: El &lt;em&gt;array&lt;/em&gt; completo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El &lt;em&gt;forEach&lt;/em&gt; no devuelve ningún resultado, pero entre las acciones realizadas dentro de la función invocada, es posible modificar el &lt;em&gt;array&lt;/em&gt; que está siendo iterado (lo cual, como veremos, deberá hacerse con cuidado).&lt;/p&gt;

&lt;h3 id=&quot;no-apto-para-menores-de-25-aos&quot;&gt;No apto para menores de 25 años&lt;/h3&gt;
&lt;p&gt;Supongamos que en un bar muy exclusivo no se admiten menores de 25 años. Podríamos intentar escribir un código que elimine del &lt;em&gt;array&lt;/em&gt; aquellas personas que no alcancen dicha edad. El código podría ser:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;em&gt;splice&lt;/em&gt;&lt;/a&gt; es útil para eliminar elementos de un &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Si ejecutamos este código, vamos a obtener el siguiente resultado:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;John Doe - 27&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Jane Doe - 24&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Julian Doe - 32&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Por algún motivo, Jane Doe logró vencer la seguridad de nuestro bar, e ingresar. Dicho motivo es causa de incontables &lt;em&gt;bugs&lt;/em&gt; en incontables piezas de código.&lt;br /&gt;
En cada iteración, &lt;em&gt;index&lt;/em&gt; incrementa 1. La primera vez (&lt;em&gt;index=0&lt;/em&gt;) encontramos a John Doe de 27 años. Queda en el &lt;em&gt;array&lt;/em&gt;. La segunda vez (&lt;em&gt;index=1&lt;/em&gt;), encontramos a John Doe Jr de 3 años (quien claramente no debería estar en nuestro bar). Al removerlo del &lt;em&gt;array&lt;/em&gt; Jane Doe pasa a estar en el &lt;em&gt;index 1&lt;/em&gt; y Julian Doe en el &lt;em&gt;index 2&lt;/em&gt;. La tercera iteración (&lt;em&gt;index=2&lt;/em&gt;) aparece Julian Doe. Es decir que Jane Doe ha sido salteada. &lt;strong&gt;Es como si el guardia de seguridad se diera vuelta cada vez que saca a alguien de la fila del bar y en ese momento dejara pasar a una persona sin importar su edad.&lt;/strong&gt;&lt;br /&gt;
No siempre es buena idea modificar el &lt;em&gt;array&lt;/em&gt; que se está iterando. Como soluciones alternativas, se puede utilizar un &lt;em&gt;array&lt;/em&gt; auxiliar y sobreescribir el original una vez que ya se haya finalizado la iteración.  &lt;/p&gt;

&lt;p&gt;Pero más allá de el mal funcionamiento del código anterior, analicemos su &lt;strong&gt;expresividad&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Por cada persona:&lt;br /&gt;
  1.1. Verificar si supera o iguala los 25 años.&lt;br /&gt;
  1.2. Si no lo hace, remover del &lt;em&gt;array&lt;/em&gt; 1 posición comenzando en &lt;em&gt;index&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Por cada persona, imprimir el patrón (hay que prestar atención al código para entender que es “por cada persona que haya quedado en el &lt;em&gt;array&lt;/em&gt;”).  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No parece ser tan grave, pero seguimos teniendo conocimiento del &lt;em&gt;array&lt;/em&gt;, el &lt;em&gt;index&lt;/em&gt; y la lógica para realizar la comparación. Además, si quisiéramos reutilizar este código para quitar menores de edad, deberíamos duplicarlo.&lt;br /&gt;
Comencemos por atacar este segundo problema (al menos parte del mismo).&lt;/p&gt;

&lt;h3 id=&quot;funciones-que-crean-funciones&quot;&gt;Funciones que crean funciones&lt;/h3&gt;
&lt;p&gt;Esta es una característica de &lt;em&gt;Javascript&lt;/em&gt; que, bien utilizada, nos permite escribir código expresivo y altamente reutilizable.&lt;br /&gt;
Tomemos por ejemplo el siguiente código:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;older&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;olderThan25&lt;/em&gt; está devolviendo una función que recibe una persona y devuelve &lt;em&gt;true&lt;/em&gt; si la persona es mayor de (o tiene exactos) 25 años. Es decir que, al asignar el resultado de su ejecución a la variable &lt;em&gt;older&lt;/em&gt;, &lt;code&gt;older(person)&lt;/code&gt; realizará la evaluación antes mencionada.&lt;br /&gt;
Entonces,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;older&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;John Doe Jr.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;imprime &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Siguiendo este mismo concepto, podemos aún lograr un código más reutilizable e incluso más expresivo. Pasemos como parámetro el “umbral” de edad que queremos evaluar.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ahora, podemos crear cuantas funciones queramos con diferentes umbrales de edad, y nomenclarlas de forma tal que representen lo que hacen.&lt;br /&gt;
Aplicando al código anterior (que intentaba remover a los menores de 25 años):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;El código sigue sin funcionar (el problema descripto anteriormente sigue allí).&lt;/li&gt;
  &lt;li&gt;Si bien la legibilidad del código mejoró, se sigue leyendo “si la persona es mayor de 25, remover una posición del &lt;em&gt;array&lt;/em&gt; comenzando en &lt;em&gt;index&lt;/em&gt;”. Es decir que la expresividad sigue siendo similar.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;arrayprototypefilter&quot;&gt;Array.Prototype.filter&lt;/h3&gt;

&lt;p&gt;Afortunadamente, &lt;em&gt;Javascript&lt;/em&gt; nos da un método del &lt;em&gt;array&lt;/em&gt; que hace exactamente lo que queremos.&lt;br /&gt;
El método &lt;em&gt;filter&lt;/em&gt; recibe 2 parámetros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: La función que evalua la condición que decide si el elemento que está siendo iterado, debe pertenecer (deberá devolver &lt;em&gt;true&lt;/em&gt; si el elemento debe pertenecer al nuevo grupo, y &lt;em&gt;false&lt;/em&gt; en caso contrario).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (opcional): El objeto que será utilizado como &lt;em&gt;this&lt;/em&gt; dentro de la función &lt;em&gt;callback&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A su vez, &lt;em&gt;filter&lt;/em&gt; pasa a &lt;em&gt;callback&lt;/em&gt; 3 parámetros (al igual que lo hacía &lt;em&gt;forEach&lt;/em&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: El elemento que está siendo iterado.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: La posición de dicho elemento dentro del &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: El &lt;em&gt;array&lt;/em&gt; que está siendo iterado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A diferencia del &lt;em&gt;forEach&lt;/em&gt;, &lt;em&gt;filter&lt;/em&gt; devuelve un &lt;strong&gt;nuevo&lt;/strong&gt; &lt;em&gt;array&lt;/em&gt; con los elementos que pasen la prueba evaluada en &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Teniendo en cuenta este nuevo método, el siguiente código resuelve el requerimiento expresado anteriormente:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Respecto de su expresividad, puede ser leído como:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Filtrar las personas &lt;strong&gt;que no&lt;/strong&gt; sean mayores de 25 y por cada una imprimir el patrón.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Un problema de este método (respecto de su expresividad) es el nombre &lt;em&gt;filter&lt;/em&gt; (y/o el hecho de remueva el elemento cuando &lt;em&gt;callback&lt;/em&gt; devuelve &lt;em&gt;false&lt;/em&gt;). Eso haría que sea lea “filtrar los mayores de 25”, cuando en realidad se está haciendo lo contrario. &lt;em&gt;Nada es perfecto&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;cuida-tu-peso&quot;&gt;Cuida tu peso&lt;/h3&gt;

&lt;p&gt;Hemos logrado trabajar con cada persona de nuestro grupo, y realizar operaciones con cada una de ellas. Pero muchas veces, es necesario trabajar con el grupo como un todo.&lt;br /&gt;
Supongamos que &lt;em&gt;nuestras&lt;/em&gt; personas están subiendo a un ascensor. Por motivos de seguridad, los ascensores más modernos incluyen una balanza para asegurarse de que no se haya superado el peso máximo soportado por el mismo. Intentemos evitar la vergüenza de escuchar la chicharra indicando que nos hemos excedido y calculemos el peso total previamente:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Algunas observaciones acerca de este código:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Como vimos, &lt;em&gt;forEach&lt;/em&gt; recibe como primer parámetro una función. Hasta aquí, solíamos crear la función como un paso previo y pasar el nombre de la función como parámetro. Pero, como &lt;em&gt;function&lt;/em&gt; es una expresión que devuelve una función, la sintaxis de &lt;em&gt;Javascript&lt;/em&gt; nos permite definir la función directamente en el lugar donde escribiríamos el valor del parámetro. En particular, esta función no tiene nombre, lo que la convierte en una &lt;strong&gt;función anónima&lt;/strong&gt;. Los diferentes tipos de funciones y las diferentes formas de definirlas, ameritan un &lt;em&gt;post&lt;/em&gt; en sí mismo.&lt;/li&gt;
  &lt;li&gt;Como &lt;em&gt;forEach&lt;/em&gt; no devuelve nada, es necesario definir una variable externa que acumule el valor de la suma.&lt;/li&gt;
  &lt;li&gt;El código que vamos a generar, &lt;strong&gt;en mi opinión&lt;/strong&gt; no es &lt;em&gt;automáticamente&lt;/em&gt; más expresivo que el que ya generamos. Pero sin duda, se vuelve increíblemente entendible cuando comprendemos el significado e importancia de los métodos &lt;em&gt;map&lt;/em&gt; y &lt;em&gt;reduce&lt;/em&gt;.  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Paso a paso. Primero consideremos la sensibilidad de la gente respecto de su peso e intentemos mantener cierta confidencialidad. Obtengamos un nuevo &lt;em&gt;array&lt;/em&gt; que solo tenga los pesos de las personas de nuestro grupo.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Este código puede leerse de la siguiente manera:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Crear un array vacío llamado &lt;em&gt;weights&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Por cada persona, invocar una función que reciba a dicha persona y el índice de la misma en el &lt;em&gt;array&lt;/em&gt; original.&lt;/li&gt;
  &lt;li&gt;La función obtiene el peso de la persona y lo asigna a la posición indicada en el nuevo &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;imprime&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[ 176, 22, 127, 160 ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;arrayprototypemap&quot;&gt;Array.prototype.map&lt;/h3&gt;

&lt;p&gt;En general, llamamos al proceso de asociar los elementos de un conjunto, con los elementos de otro conjunto “&lt;a href=&quot;https://en.wikipedia.org/wiki/Map_(mathematics)&quot;&gt;mapear&lt;/a&gt;”, y el criterio de dicha asociación puede variar dependiendo la función utilizada.&lt;br /&gt;
Es decir, que el código que escribimos anteriormente “mapea las personas con/por su peso”.&lt;br /&gt;
Sería bueno poder escribir eso mismo en &lt;em&gt;Javascript&lt;/em&gt; de la siguiente manera:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;De hecho, definiendo &lt;em&gt;weight&lt;/em&gt; como una función que dada una persona, devuelva su peso, la línea anterior hace &lt;strong&gt;exactamente&lt;/strong&gt; lo que dice.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;El método &lt;em&gt;map&lt;/em&gt;, recibe los mismos 2 parámetros que &lt;em&gt;filter&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: La función que determina el criterio de asociación (deberá devolver el valor a mapear con cada elemento).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (opcional): El objeto que será utilizado como &lt;em&gt;this&lt;/em&gt; dentro de la función &lt;em&gt;callback&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A su vez, &lt;em&gt;map&lt;/em&gt; pasa a &lt;em&gt;callback&lt;/em&gt; 3 parámetros (al igual que lo hacían &lt;em&gt;forEach&lt;/em&gt; y &lt;em&gt;filter&lt;/em&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: El elemento que está siendo iterado.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: La posición de dicho elemento dentro del &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: El &lt;em&gt;array&lt;/em&gt; que está siendo iterado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;map&lt;/em&gt; devuelve un &lt;strong&gt;nuevo&lt;/strong&gt; &lt;em&gt;array&lt;/em&gt; con los elementos del segundo conjunto. En nuestro ejemplo, un &lt;em&gt;array&lt;/em&gt; con los pesos de las personas.  &lt;/p&gt;

&lt;p&gt;Ahora bien, volviendo a nuestro ejemplo, los pesos por separado no nos ayudan a determinar si es peligroso o no activar el ascensor. Aún debemos obtener el peso total.&lt;/p&gt;

&lt;p&gt;Si siguiéramos el enfoque anterior, pero aprovechando la función &lt;em&gt;map&lt;/em&gt;, nuestro código quedaría así:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Es decir que primero obtenemos el &lt;em&gt;array&lt;/em&gt; de pesos y luego lo iteramos realizando la acumulación. Es una pequeña (casi insignificante) mejora respecto de nuestra versión anterior.&lt;/p&gt;

&lt;h3 id=&quot;arrayprototypereduce&quot;&gt;Array.prototype.reduce&lt;/h3&gt;

&lt;p&gt;El término &lt;em&gt;reduce&lt;/em&gt; resulta, al menos para mi, poco descriptivo respecto del objetivo de este método. Otros lenguajes (asociados al paradigma &lt;em&gt;funcional&lt;/em&gt;) suelen referirse a esta función como &lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;&lt;em&gt;fold&lt;/em&gt;&lt;/a&gt;. Pero una buena forma de entenderlo es pensar en &lt;em&gt;reduce&lt;/em&gt; como “resumir”. Queremos encontrar un solo valor que &lt;em&gt;resuma&lt;/em&gt; de alguna manera a todos los demás. Por ejemplo, 10 resume a 4, 3, 2 y 1 si consideramos a la suma como forma de resumir. 24 resume a 4, 3, 2, 1 si consideramos a la multiplicación como forma de resumir.&lt;br /&gt;
Entonces, Definiendo &lt;em&gt;sum&lt;/em&gt; como&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;y considerando el siguiente código&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;se podría leer: resumir mediante la suma, el peso de las personas. O, sumar el peso de las personas.&lt;/p&gt;

&lt;p&gt;El método &lt;em&gt;reduce&lt;/em&gt;, recibe 2 parámetros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: La función que contiene la lógica de reducción (la forma de resumir).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;initialValue&lt;/em&gt; (opcional): El valor inicial del &lt;em&gt;acumulador&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A su vez, &lt;em&gt;reduce&lt;/em&gt; pasa a &lt;em&gt;callback&lt;/em&gt; 4 parámetros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;previousValue&lt;/em&gt;: El resultado de la última ejecución de &lt;em&gt;callback&lt;/em&gt; o &lt;em&gt;initialValue&lt;/em&gt; (la primera vez que se ejecuta).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;currentValue&lt;/em&gt;: El valor que está siendo iterado.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: La posición de dicho valor dentro del &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: El &lt;em&gt;array&lt;/em&gt; que está siendo iterado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;reduce&lt;/em&gt; devuelve un &lt;strong&gt;único&lt;/strong&gt; valor que coincide con el resultado de la última ejecución de &lt;em&gt;callback&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;Hay algunas características de &lt;em&gt;reduce&lt;/em&gt; que podrían catalogarlo como un método recursivo. En lugar de pensar a &lt;em&gt;reduce&lt;/em&gt; como una función que itera el &lt;em&gt;array&lt;/em&gt; aplicando &lt;em&gt;callback&lt;/em&gt;, podríamos pensarlo como una función que toma la primera posición del &lt;em&gt;array&lt;/em&gt; y aplica &lt;em&gt;callback&lt;/em&gt; pasando esta posición y el resultado de &lt;em&gt;reduce&lt;/em&gt; para un segundo &lt;em&gt;array&lt;/em&gt; que va desde la segunda hasta la última posición del primer &lt;em&gt;array&lt;/em&gt;. Al usarlo, esto es transparente, pero saberlo nos ayuda a entender cómo funciona, por qué &lt;strong&gt;acumula&lt;/strong&gt; y cómo funciona el &lt;em&gt;initialValue&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;una-visita-al-autocine&quot;&gt;Una visita al autocine&lt;/h3&gt;

&lt;p&gt;Las personas salieron del ascensor, subieron al auto y partieron con rumbo al auto-cine. Eligieron una película no apta para menores de 18 años. Al intentar ingresar, debemos preguntar si &lt;strong&gt;todas&lt;/strong&gt; las personas en el auto alcanzan dicha edad.&lt;br /&gt;
Hay muchas formas de lograrlo. Entre ellas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Iterar y preguntar  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;areOlder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;areOlder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Estamos utilizando la función &lt;em&gt;olderThan(threshold)&lt;/em&gt; para generar la función &lt;em&gt;olderThan18&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reducir mediante el operador lógico “Y”  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousOlder18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousOlder18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Mapear al &lt;em&gt;array&lt;/em&gt; de edades y reducir mediante el operador lógico “Y”  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousGreater18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousGreater18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greaterThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Es similar a la anterior, pero antes de &lt;em&gt;reducir&lt;/em&gt;, obtenemos el &lt;em&gt;array&lt;/em&gt; de edades (y por lo tanto, en lugar de utilizar una función que reciba una persona y compare su edad, utilizamos una similar pero que compare directamente la edad. &lt;em&gt;greaterThan18&lt;/em&gt; es generada de forma similar que &lt;em&gt;olderThan18&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Todas estas soluciones tienen un problema (u oportunidad de mejora): Evalúan todo el &lt;em&gt;array&lt;/em&gt; sin importar lo que ocurra. En nuestro caso, evaluando el segundo elemento podríamos concluir que no todas las personas son mayores de 18. En evaluaciones de expresiones &lt;em&gt;booleanas&lt;/em&gt; esto se conoce como “evaluación de cortocircuito”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;whatever&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;whatever&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En ambos casos, es innecesario evaluar &lt;em&gt;whatever&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Esto parece ser irrelevante en un &lt;em&gt;array&lt;/em&gt; de 4 elementos. Pero ¿qué pasaría si tuviéramos un colectivo, tren o avión intentando ingresar al auto-cine? Además del posible problema de espacio del predio, nuestras soluciones estarían ocupando ciclos de procesamiento innecesarios, lo que se conoce como &lt;strong&gt;mala performance&lt;/strong&gt;.&lt;br /&gt;
La forma de solucionar esto es &lt;em&gt;rompiendo&lt;/em&gt; las iteraciones cuando no es necesario seguir evaluando. La instrucción &lt;em&gt;break&lt;/em&gt; hace exactamente eso, pero no es aplicable a los métodos que estamos utilizando (es aplicable al &lt;em&gt;for&lt;/em&gt; clásico). Existen otras “técnicas” para salir de estos métodos, pero ninguna es elegante ni recomendable (por ejemplo, podríamos asignar “0” a &lt;em&gt;array.length&lt;/em&gt;, si no necesitaramos seguir trabajando con el &lt;em&gt;array&lt;/em&gt;. O hacer una copia del mismo, para poder cambiar el &lt;em&gt;length&lt;/em&gt; sin problemas. También podríamos &lt;em&gt;lanzar una excepción&lt;/em&gt; y &lt;em&gt;capturarla&lt;/em&gt; inmediatamente al salir del método).  &lt;/p&gt;

&lt;p&gt;Pero hay un motivo por el cual este problema se presenta al utilizar estos métodos. En el caso del &lt;em&gt;forEach&lt;/em&gt; el motivo es incluso explícito en el nombre de la función. &lt;strong&gt;Por cada&lt;/strong&gt; elemento de un &lt;em&gt;array&lt;/em&gt; implica que &lt;strong&gt;todos&lt;/strong&gt; los elementos van a ser iterados.&lt;/p&gt;

&lt;h3 id=&quot;every-some&quot;&gt;Every-Some&lt;/h3&gt;

&lt;p&gt;Volviendo al tema de la &lt;em&gt;expresividad&lt;/em&gt;, ninguna de las soluciones resultan demasiado expresivas (hagan el ejercicio de identificar lo que cada una está diciendo y lo que cada una está haciendo). El enunciado debería ser más sencillo. Verificar que todas las personas sean mayores de 18.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Esta solución dice y hace exactamente lo que buscamos. Devuelve &lt;em&gt;true&lt;/em&gt; si todas las personas son mayores de 18 años. Caso contrario, devuelve &lt;em&gt;false&lt;/em&gt;.&lt;br /&gt;
Además de ser altamente expresiva, &lt;em&gt;every&lt;/em&gt; respeta la evaluación de cortocircuito, es decir que dejará de iterar ni bien encuentre una persona que no cumpla la condición.&lt;/p&gt;

&lt;p&gt;El método &lt;em&gt;every&lt;/em&gt; recibe 2 parámetros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: La función que evalua la condición a cumplir (deberá devolver &lt;em&gt;true&lt;/em&gt; o &lt;em&gt;false&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (opcional): El objeto que será utilizado como &lt;em&gt;this&lt;/em&gt; dentro de la función &lt;em&gt;callback&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A su vez, &lt;em&gt;every&lt;/em&gt; pasa a &lt;em&gt;callback&lt;/em&gt; 3 parámetros (al igual que lo hacían los demás métodos):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: El elemento que está siendo iterado.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: La posición de dicho elemento dentro del &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: El &lt;em&gt;array&lt;/em&gt; que está siendo iterado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;every&lt;/em&gt; devuelve &lt;em&gt;true&lt;/em&gt; si todos los elementos iterados cumplieron con la condición, y &lt;em&gt;false&lt;/em&gt; si al menos un elemento no lo hace (y deja de iterar cuando lo encuentra).&lt;/p&gt;

&lt;h3 id=&quot;en-busca-de-una-pelcula-apta&quot;&gt;En busca de una película apta&lt;/h3&gt;

&lt;p&gt;Las restricciones de edad en las películas deben ser respetadas. Y si bien nuestras personas no  encontraron ninguna película apta para todo público, apareció un nuevo estreno que puede ser vista por menores con la supervisión de un adulto. Dejando de lado el criterio del adulto, escribamos la solución que nos permita evaluar si alguna persona es mayor de 18 años. Pero antes de comenzar a mostrar todas las alternativas (como hicimos con el caso anterior &lt;em&gt;every&lt;/em&gt;) pensemos ¿no existirá algún otro método que diga y haga lo estamos buscando?&lt;br /&gt;
Mi respuesta rápida es &lt;strong&gt;sí&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;El método &lt;em&gt;some&lt;/em&gt; recibe 2 parámetros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: La función que evalua la condición a cumplir (deberá devolver &lt;em&gt;true&lt;/em&gt; o &lt;em&gt;false&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (opcional): El objeto que será utilizado como &lt;em&gt;this&lt;/em&gt; dentro de la función &lt;em&gt;callback&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A su vez, &lt;em&gt;some&lt;/em&gt; pasa a &lt;em&gt;callback&lt;/em&gt; 3 parámetros (al igual que lo hacían los demás métodos):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: El elemento que está siendo iterado.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: La posición de dicho elemento dentro del &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: El &lt;em&gt;array&lt;/em&gt; que está siendo iterado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;some&lt;/em&gt; devuelve &lt;em&gt;false&lt;/em&gt; si ningún elemento cumple con la condición, y &lt;em&gt;true&lt;/em&gt; si al menos un elemento lo hace (y deja de iterar cuando lo encuentra).&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;Como mencioné al comienzo del &lt;em&gt;post&lt;/em&gt;, la &lt;em&gt;expresividad&lt;/em&gt; es solo uno de muchos aspectos a considerar. Muchas veces, estos aspectos entran en conflicto y es necesario evaluar cuál prima.&lt;br /&gt;
Consideremos el siguiente problema: Debo obtener un &lt;em&gt;array&lt;/em&gt; con las personas con peso menor a 130 libras, que tengan más de 10 años.&lt;br /&gt;
Con todo lo que hemos visto, naturalmente podríamos pensar que la siguiente solución es ideal:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;softerThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La realidad es que esta solución no es ideal, tan solo es expresiva.&lt;br /&gt;
Al filtrar, estamos iterando el &lt;em&gt;array&lt;/em&gt;. Al filtrar 2 veces, estamos iterando 2 &lt;em&gt;arrays&lt;/em&gt;. Si &lt;em&gt;persons&lt;/em&gt; contiene N elementos y M son mayores de 10, la solución anterior recorrerá N + M elementos. La siguiente solución puede ser un poco menos expresiva pero nos asegura que solo se recorrerán N elementos:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan10AndsofterThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;considerando&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan10AndsofterThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;softerThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Al negociar un aspecto por otro, es necesario considerar el caso de uso. Si nuestros &lt;em&gt;arrays&lt;/em&gt; contienen familias (es decir, pocos elementos), quizá podamos darnos el lujo de tener el código más expresivo. Si estamos procesando el padrón electoral completo, mejor preocuparse por la &lt;em&gt;performance&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;conclusin&quot;&gt;Conclusión&lt;/h3&gt;

&lt;p&gt;La misma sintaxis de &lt;em&gt;Javascript&lt;/em&gt; nos permite trabajar con partes buenas de los paradigmas &lt;em&gt;estructurado&lt;/em&gt;, &lt;em&gt;orientado a objetos&lt;/em&gt; y &lt;em&gt;funcional&lt;/em&gt;. Las buenas prácticas de cada paradigma pueden favorecernos a la hora de mejorar algunos aspectos de nuestro código. En la mayoría de los casos, al mejorar un aspecto, estaremos empeorando otros (Ej: Mayor Expresividad -&amp;gt; Menor Performance). Muchas veces estos aspectos se conjugarán de formas más complejas (Ej: Mayor Performance y Buena Expresividad -&amp;gt; Poca Flexibilidad). Es parte de nuestro trabajo cuando escribimos una pieza de código, evaluar qué aspectos queremos favorecer y cuáles podemos castigar. La mayoría de las veces caeremos en la trampa y favoreceremos los aspectos que más nos gusten. Eso es algo a evitar. Para saber qué aspectos favorecer, la mejor opción es analizar el caso de uso.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Aug 2015 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2015/08/13/expressive-code-javscript/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2015/08/13/expressive-code-javscript/</guid>
        
        <category>javascript</category>
        
        <category>expressive</category>
        
        <category>code</category>
        
        <category>array</category>
        
        <category>prototype</category>
        
        <category>functions</category>
        
        <category>forEach</category>
        
        <category>map</category>
        
        <category>reduce</category>
        
        <category>filter</category>
        
        <category>every</category>
        
        <category>some</category>
        
        
      </item>
    
      <item>
        <title>Expressive code in Javascript</title>
        <description>&lt;p&gt;There are many (maybe too many) aspects to take care of when writing a piece of code: &lt;em&gt;performance, maintainability and readability&lt;/em&gt;, for mentioning a few of them.&lt;br /&gt;
One aspect I find particularly interesting is “expressiveness” which means “the ability of enunciate what is being done”.&lt;/p&gt;

&lt;p&gt;Since I am a &lt;em&gt;Javascript Hipster (“I loved it before it was catching on”)&lt;/em&gt; I would like to show some examples of how &lt;em&gt;Javascript&lt;/em&gt; lets us be really expressive working with &lt;em&gt;arrays&lt;/em&gt; (and some particular functions): &lt;em&gt;forEach, filter, map, reduce, every&lt;/em&gt; and &lt;em&gt;some&lt;/em&gt;.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;p&gt;Even though “Expressiveness” is an attribute often associated to the language, all of them let us be more or less expressive when writing different pieces of code that do the same. Because of that, it would be more precise to say that a piece of code is “expressive” if it is capable of really enunciate what is it doing.&lt;/p&gt;

&lt;p&gt;Let’s consider, for example, this group of people:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;176&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;John Doe Jr.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Jane Doe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Julian Doe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s traverse this &lt;em&gt;array&lt;/em&gt; and, for each person, print “&lt;em&gt;Name&lt;/em&gt; is &lt;em&gt;age&lt;/em&gt; years old”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; - &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This piece of code is fairly straightforward, short and readable enough. Though, that doesn’t make it necessarily &lt;strong&gt;expressive&lt;/strong&gt;. What we were trying to do: Print “&lt;em&gt;Name&lt;/em&gt; is &lt;em&gt;age&lt;/em&gt; years old” per each person. This is what our code is actually saying:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Initialize a variable named &lt;em&gt;i&lt;/em&gt; with the value &lt;em&gt;0&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;As long as the variable is lower than the persons quantity, increment it and run the following code block:&lt;br /&gt;
  2.1. Get the name of the person at the index equals to the previously initialized variable.&lt;br /&gt;
  2.2. Concatenate a space, a hyphen and then another space.&lt;br /&gt;
  2.3. Concatenate the age of the person at the index equals to the previously initialized variable.&lt;br /&gt;
  2.4. Log the result on the console.  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s start by extracting the code inside the &lt;em&gt;for&lt;/em&gt; to a function receiving a &lt;em&gt;person&lt;/em&gt; as parameter. The function prints the specified pattern.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; - &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you are now thinking “this is not even related to &lt;em&gt;Javascript&lt;/em&gt; and its &lt;em&gt;arrays&lt;/em&gt; functions”, you are right. &lt;em&gt;All you need is to have a little patience&lt;/em&gt;.&lt;br /&gt;
We just &lt;em&gt;encapsulated&lt;/em&gt; a functionality in order to hide it complexity. Even though &lt;em&gt;encapsulation&lt;/em&gt; is a concept mainly related to the Object Oriented Programming paradigm, it can be achieved in so many different ways and &lt;em&gt;functions&lt;/em&gt; are an ancient way of doing it. The goal of &lt;em&gt;encapsulating&lt;/em&gt; code is not to make it more expressive, but it does it in most of the cases as a collateral effect.&lt;/p&gt;

&lt;p&gt;If we read the new code (skipping the new function description):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Initialize a variable named  &lt;em&gt;i&lt;/em&gt; with the value &lt;em&gt;0&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;As long as the variable is lower to the persons quantity, increment it and&lt;/li&gt;
  &lt;li&gt;Print the pattern for the person at the index equals to the previously initialized variable.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;arrayprototypeforeach&quot;&gt;Array.Prototype.forEach&lt;/h3&gt;
&lt;p&gt;Though the code has turned into something a little bit more expressive, it seems to be more concerned for the variable &lt;em&gt;i&lt;/em&gt;, its initialization and limit than focused on the person itself.
Fortunately, there are other ways of traversing an &lt;em&gt;array&lt;/em&gt;. For example, the  &lt;code&gt;Array.prototype.forEach(function)&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we read this new code:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For each person, print the pattern.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This way, this piece of code &lt;em&gt;does&lt;/em&gt; and &lt;em&gt;expresses&lt;/em&gt; exactly what we want it to.
However, regardless reading it is much simpler, it’s necessary to understand what’s going on behind the curtain.&lt;br /&gt;
For starter, something to highlight about &lt;em&gt;Javascript&lt;/em&gt; is that &lt;em&gt;everything (or almost everything) is a message.&lt;/em&gt; This means that objects, functions, methods and values are messages (or expressions) and hence, can be passed as parameters.
Unlike the &lt;em&gt;for&lt;/em&gt; that is a statement, the &lt;em&gt;forEach&lt;/em&gt; is a method belonging to the object &lt;em&gt;Array&lt;/em&gt; (or its &lt;em&gt;prototype&lt;/em&gt;). Combining these concepts, &lt;em&gt;forEach&lt;/em&gt; traverses the &lt;em&gt;array&lt;/em&gt; and invokes the function it received as parameter, on each iteration. During that invocation &lt;em&gt;forEach&lt;/em&gt; passes to the other function, the element that is being iterated.
This could be a homemade &lt;em&gt;forEach&lt;/em&gt; impleentation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Additionally &lt;em&gt;forEach&lt;/em&gt; receives a second (and optional) parameter that represents a function that will be invoked when the &lt;em&gt;array&lt;/em&gt; traversing is over.
This could look useless for the examples we are working on, however, it becomes essential when working on an asynchronous development scenario (as you would have working with &lt;a href=&quot;http://nodejs.org&quot;&gt;NodeJS&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There are 2 other parameters that &lt;strong&gt;&lt;em&gt;forEach&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;passes to the other function&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: The index of the element being iterated.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: The full &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;forEach&lt;/em&gt; does not return any result, but it’s possible to modify the &lt;em&gt;array&lt;/em&gt; being iterated inside the function it calls (we will learn that it must be done carefully).&lt;/p&gt;

&lt;h3 id=&quot;not-suitable-for-under-25s&quot;&gt;Not suitable for under 25s&lt;/h3&gt;
&lt;p&gt;Let’s suppose that a really exclusive bar is not suitable for under 25s. We could try to write a piece of code that removes from the &lt;em&gt;array&lt;/em&gt; those people that don’t match that criteria. The piece of code looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;em&gt;splice&lt;/em&gt;&lt;/a&gt; is useful for removing elements from an &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we run this code, we will get the following output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;John Doe - 27&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Jane Doe - 24&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Julian Doe - 32&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For some reason, Jane Doe successfully beat our bar’s security and slunk. That reason is cause of countless &lt;em&gt;bugs&lt;/em&gt; on countless pieces of code.&lt;br /&gt;
On each iteration &lt;em&gt;index&lt;/em&gt; is incremented by 1. First time (&lt;em&gt;index=0&lt;/em&gt;) we find John Doe, 27 years old. It is kept in the &lt;em&gt;array&lt;/em&gt;. Second time (&lt;em&gt;index=1&lt;/em&gt;) we find John Doe Jr, 3 years old (who, of course, &lt;em&gt;shall not pass&lt;/em&gt;). When we remove him from the &lt;em&gt;array&lt;/em&gt; Jane Doe is moved to the &lt;em&gt;index 1&lt;/em&gt; and Julian Doe to the &lt;em&gt;index 2&lt;/em&gt;. Third time (&lt;em&gt;index=2&lt;/em&gt;) Julian Doe appears. This means that Jane Doe has been skipped. &lt;strong&gt;It’s like if the security guy turned away each time he pull someone away from the bar, and at that moment let anybody go in regardless its age.&lt;/strong&gt;
It’s usually not a good idea to modify the &lt;em&gt;array&lt;/em&gt; being iterated. As a workaround we could use an auxiliary &lt;em&gt;array&lt;/em&gt; and overwrite the original once the iteration is over.&lt;/p&gt;

&lt;p&gt;Regardless of the previous code malfunctioning, let’s analyze its &lt;strong&gt;expressivity&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For each person:&lt;br /&gt;
  1.1. Check if it’s age is greater or equals than 25.&lt;br /&gt;
  1.2. If it isn’t, remove 1 position from the &lt;em&gt;array&lt;/em&gt; starting at &lt;em&gt;index&lt;/em&gt;.  &lt;/li&gt;
  &lt;li&gt;For each person, print the pattern (special care to the code in order to understand that it means “for each person that has been kept in the &lt;em&gt;array&lt;/em&gt;).  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It doesn’t seem to be that bad, but we are still aware of the &lt;em&gt;array&lt;/em&gt;, the &lt;em&gt;index&lt;/em&gt; and the comparison logic. Furthermore, if we wanted to reuse this code for removing people younger than 18 we would need to duplicate it.
Let’s start by tackling this second issue&lt;/p&gt;

&lt;h3 id=&quot;functions-creating-functions&quot;&gt;Functions creating functions&lt;/h3&gt;
&lt;p&gt;This is a &lt;em&gt;Javascript&lt;/em&gt; feature that, properly used, allows us to write expressive and highly reusable code.
Let’s take this code as an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;older&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;olderThan25&lt;/em&gt; is returning a function that receives a person and returns &lt;em&gt;true&lt;/em&gt; if that person is older than 25. It means that, when we assign the result of its execution to the &lt;em&gt;older&lt;/em&gt; variable, &lt;code&gt;older(person)&lt;/code&gt; will perform the previously mentioned evaluation.&lt;br /&gt;
Thus,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;older&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;John Doe Jr.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;outputs &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Applying this same concept we can achieve a more reusable and even more expressive piece of code. Let’s pass the “age threshold” we want to evaluate as a parameter&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can create as many functions we want with different thresholds and name these in a way that represent what it’s being done.&lt;br /&gt;
Applied to the previous code (that was trying to remove people younger than 25):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The code is still not working (the problem described above is still there).&lt;/li&gt;
  &lt;li&gt;Even though the readability has improved, it’s still being read as “if the person is older than 25, remove 1 position from the &lt;em&gt;array&lt;/em&gt; starting at &lt;em&gt;index&lt;/em&gt;”. Expressivity is almost the same.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;arrayprototypefilter&quot;&gt;Array.Prototype.filter&lt;/h3&gt;

&lt;p&gt;Fortunately &lt;em&gt;JavaScript&lt;/em&gt; gives us an &lt;em&gt;array&lt;/em&gt; method that does exactly what we are looking for.
The &lt;em&gt;filter&lt;/em&gt; method receives 2 parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: The function that evaluates the condition that defines if the element being iterated belongs to the set. It needs to return &lt;em&gt;true&lt;/em&gt; if the element belongs, and &lt;em&gt;false&lt;/em&gt; otherwise.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (optional): The object that will be used as &lt;em&gt;this&lt;/em&gt; inside the &lt;em&gt;callback&lt;/em&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the same time,  &lt;em&gt;filter&lt;/em&gt; passes 3 parameters to &lt;em&gt;callback&lt;/em&gt; (the same way &lt;em&gt;forEach&lt;/em&gt; does):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: The element being iterated.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: The position of that element inside the &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: The &lt;em&gt;array&lt;/em&gt; being iterated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unlike the &lt;em&gt;forEach&lt;/em&gt;, &lt;em&gt;filter&lt;/em&gt; does return a &lt;strong&gt;new&lt;/strong&gt; &lt;em&gt;array&lt;/em&gt; with the elements that match the test performed by &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Considering this new method, the next piece of code solves the requirement:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;About its expressivity, it could be read as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Filter those persons &lt;strong&gt;not&lt;/strong&gt; older than 25 and print the pattern for each one.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An issue about this method expressivity is its name &lt;em&gt;filter&lt;/em&gt; (and/or the fact that it removes the element when &lt;em&gt;callback&lt;/em&gt; returns &lt;em&gt;false&lt;/em&gt;). This would make us to read “filter older than 25”, when we are doing exactly the opposite. &lt;em&gt;Well, nothing is perfect&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;watch-your-weight&quot;&gt;Watch your weight&lt;/h3&gt;

&lt;p&gt;We have succeeded at working with each person in our group and performing operations with each one of them. But lot of times we’ll need to work with the group as a whole.&lt;br /&gt;
Let’s suppose that &lt;em&gt;our&lt;/em&gt; persons are stepping into an elevator. For security reasons, moderns elevators use a scale in order to make sure that the maximum allowed weight is not exceeded. Let’s try to avoid the shame of hearing the buzzer and calculate the total weight in advance:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some observations about this code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As we have seen, &lt;em&gt;forEach&lt;/em&gt; receives a function as its first parameter. This far, we used to create the function as a previous step and pass its name as parameter. However, since &lt;em&gt;function&lt;/em&gt; is an expression that returns a function, &lt;em&gt;Javascript&lt;/em&gt; syntax lets us to define the function in place. This function in particular has no name. These kind of functions are called &lt;strong&gt;anonymous functions&lt;/strong&gt;. Functions categorization would worth its own post.&lt;/li&gt;
  &lt;li&gt;Since &lt;em&gt;forEach&lt;/em&gt; is not returning any value, it’s necessary to define an external variable that accumulates the successive sums.&lt;/li&gt;
  &lt;li&gt;The code we are going to write is not &lt;em&gt;automatically&lt;/em&gt; more expressive than the one we wrote above (&lt;strong&gt;IMO&lt;/strong&gt;), but doubtless, it turns amazingly easy to get when we understand the meaning and importance of &lt;em&gt;map&lt;/em&gt; and &lt;em&gt;reduce&lt;/em&gt; methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step by step. Let’s first consider how sensitive people are about their weight and let’s try to keep it confidential. Let’s obtain a new &lt;em&gt;array&lt;/em&gt; that only contains the weight of the people in our group.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code can be read as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Declare an empty &lt;em&gt;weights&lt;/em&gt; array.&lt;/li&gt;
  &lt;li&gt;For each person, invoke a function that receives the person and its index inside the original &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The function gets the person weight and assign it to that index but in the new &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;outputs&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[ 176, 22, 127, 160 ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;arrayprototypemap&quot;&gt;Array.prototype.map&lt;/h3&gt;

&lt;p&gt;In general, we call “&lt;a href=&quot;https://en.wikipedia.org/wiki/Map_(mathematics)&quot;&gt;to map&lt;/a&gt;” to the process of associating elements from one set with elements from a different set. This means that the code above “maps people with/by their corresponding weights”.
It would be nice to be able to write that same thing in &lt;em&gt;Javascript&lt;/em&gt; the following way:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a matter of fact, if we defined &lt;em&gt;weight&lt;/em&gt; as a function that returns the weight of a person, the code above does &lt;strong&gt;exactly&lt;/strong&gt; what it says.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;map&lt;/em&gt; method receives the same 2 parameters than &lt;em&gt;filter&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: The function that determines the association criteria (it must return the value to map to each element).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (optional): The object that will be used as &lt;em&gt;this&lt;/em&gt; inside the &lt;em&gt;callback&lt;/em&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the same time &lt;em&gt;map&lt;/em&gt; passes 3 parameters to &lt;em&gt;callback&lt;/em&gt; (the same way &lt;em&gt;forEach&lt;/em&gt; and &lt;em&gt;filter&lt;/em&gt; do):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: The element being iterated.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: The &lt;em&gt;index&lt;/em&gt; of that element in the &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: The &lt;em&gt;array&lt;/em&gt; being iterated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;map&lt;/em&gt; returns a &lt;strong&gt;new&lt;/strong&gt; &lt;em&gt;array&lt;/em&gt; with the elements of the second set. In our case it returns an &lt;em&gt;array&lt;/em&gt; with people weights.  &lt;/p&gt;

&lt;p&gt;Going back to our example, each weight doesn’t help us to determine whether is dangerous to activate the elevator or not. We still need to get the total weight.&lt;/p&gt;

&lt;p&gt;Following the previous approach, and taking advantage of the &lt;em&gt;map&lt;/em&gt; function, our code would look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It means that we first get the weights &lt;em&gt;array&lt;/em&gt; and then we iterate it performing the sum. This is a small (almost trivial) improvement in comparison with our last version.&lt;/p&gt;

&lt;h3 id=&quot;arrayprototypereduce&quot;&gt;Array.prototype.reduce&lt;/h3&gt;

&lt;p&gt;The term &lt;em&gt;reduce&lt;/em&gt; is, IMO, not too much descriptive in regards to the goal of this method. Other languages (associated to the &lt;em&gt;functional&lt;/em&gt; paradigm) usually refers to this function as &lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;&lt;em&gt;fold&lt;/em&gt;&lt;/a&gt;. A good approach to understand it is to think about &lt;em&gt;reduce&lt;/em&gt; as “summarize”. We want to find a single value that &lt;em&gt;summarizes&lt;/em&gt; every other values. For example, 10 summarizes 4, 3, 2 and 1 if we consider the addition as a way of summarizing. 24 summarizes 4, 3, 2, 1 if we consider multiplication as a way of summarizing.&lt;br /&gt;
So, defining sum as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and considering the following piece of code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;we could read: summarize by sum the weight of the people. Or, sum the weight of the people.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;reduce&lt;/em&gt; method receives 2 parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: The function containing the reduction logic (the way of summarizing).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;initialValue&lt;/em&gt; (optional): The initial value of the &lt;em&gt;acummulator&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the same time, &lt;em&gt;reduce&lt;/em&gt; passes 4 parameters to &lt;em&gt;callback&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;previousValue&lt;/em&gt;: The result of &lt;em&gt;callback&lt;/em&gt; last execution, or &lt;em&gt;initialValue&lt;/em&gt; (the first time it’s executed).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;currentValue&lt;/em&gt;: The value being iterated.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: The position of that value inside the &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: The &lt;em&gt;array&lt;/em&gt; being iterated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;reduce&lt;/em&gt; returns an &lt;strong&gt;only&lt;/strong&gt; value that matches the result of &lt;em&gt;callback&lt;/em&gt; last execution.  &lt;/p&gt;

&lt;p&gt;There are some qualities of &lt;em&gt;reduce&lt;/em&gt; that could label it as a recursive method. Instead of thinking &lt;em&gt;reduce&lt;/em&gt; as a function that iterates the &lt;em&gt;array&lt;/em&gt; applying &lt;em&gt;callback&lt;/em&gt;, we could think about it as a function that takes the &lt;em&gt;array&lt;/em&gt; first position and applies &lt;em&gt;callback&lt;/em&gt; passing the current position and the result of &lt;em&gt;reduce&lt;/em&gt; for a second &lt;em&gt;array&lt;/em&gt; that goes from the original &lt;em&gt;array&lt;/em&gt; second position to the last one. This is meaningless when using it, but knowing this, will help us to understand how it works, why it &lt;strong&gt;accumulates&lt;/strong&gt; and how the &lt;em&gt;initialValue&lt;/em&gt; works.&lt;/p&gt;

&lt;h3 id=&quot;a-visit-to-the-drive-in-cinema&quot;&gt;A visit to the drive-in cinema&lt;/h3&gt;

&lt;p&gt;People get out of the elevator, jumped into the car and drove to the drive-in cinema. They choose a not suitable for under 18s movie. We need to figure out if &lt;strong&gt;every&lt;/strong&gt; person in the car matches the criteria.&lt;/p&gt;

&lt;p&gt;There are several ways of achieving this. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Iterate and query  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;areOlder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;areOlder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We are using the &lt;em&gt;olderThan(threshold)&lt;/em&gt; in order to generate the function &lt;em&gt;olderThan18&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reduce by applying the logical “AND”&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousOlder18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousOlder18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Mapping the ages &lt;em&gt;array&lt;/em&gt; and reduce by applying the logical “AND”&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousGreater18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousGreater18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greaterThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This one is similar to the previous one, but before &lt;em&gt;reducing&lt;/em&gt; we get the ages &lt;em&gt;array&lt;/em&gt; and hence, instead of using a function that receives a person and compares it age, we are now using a similar one that simply compares the age. &lt;em&gt;greaterThan18&lt;/em&gt; is generated in a similar way than &lt;em&gt;olderThan18&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;All these solutions have the same problem (or improvement opportunity): These are evaluating the entire &lt;em&gt;array&lt;/em&gt; regardless what happens with each element. In our case, evaluating the second element we could tell that not every people are older than 18. In &lt;em&gt;boolean&lt;/em&gt; evaluations, this is known as “short circuit evaluation”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;whatever&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;whatever&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In both cases, evaluating &lt;em&gt;whatever&lt;/em&gt; is useless.&lt;/p&gt;

&lt;p&gt;This seems to be meaningless in a 4 elements &lt;em&gt;array&lt;/em&gt;. However, what would happen if we had a bus, train, or plain trying to enter the drive-in cinema? Aside from the probable venue space issue, our solutions would be using unnecesary processing cycles A.K.A &lt;strong&gt;bad performance&lt;/strong&gt;.&lt;br /&gt;
The way of solving this issue is &lt;em&gt;breaking&lt;/em&gt; the iterations when evaluation is no longer needed. The instruction &lt;em&gt;break&lt;/em&gt; does exactly that, but is not suitable for the methods we are using (as it is for the classic &lt;em&gt;for&lt;/em&gt;). There are other “techniques” for quitting these methods, but none of them is smart nor recommended (for example, we could assign 0 to the &lt;em&gt;array.length&lt;/em&gt; if we didn’t need to keep working with the &lt;em&gt;array&lt;/em&gt;. We could also make a copy of that &lt;em&gt;array&lt;/em&gt; if we wanted to change its length without any problem. Or we could just &lt;em&gt;throw an exception&lt;/em&gt; and &lt;em&gt;catch it&lt;/em&gt; immediately after the method call).&lt;/p&gt;

&lt;p&gt;But there is a reason for this problem to appear when using these methods. On the &lt;em&gt;forEach&lt;/em&gt; case, that reason is even explicit at its name. &lt;em&gt;For Each&lt;/em&gt; element in the &lt;em&gt;array&lt;/em&gt; implies that &lt;em&gt;all&lt;/em&gt; of its elements will be iterated.&lt;/p&gt;

&lt;h3 id=&quot;every-some&quot;&gt;Every-Some&lt;/h3&gt;

&lt;p&gt;Going back to the &lt;strong&gt;expressiveness&lt;/strong&gt; topic, none of our solutions turned to be too much expressive (do the exercise yourselves of identifying what is being said by each one and what is being done). The statement should be simpler. Verify that every person is older than 18.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This solution says and does exactly what we are looking for. It returns &lt;em&gt;true&lt;/em&gt; if every people in the array are older than 18. Otherwise, it returns &lt;em&gt;false&lt;/em&gt;.
In addition of being highly expressive, &lt;em&gt;every&lt;/em&gt; respects the short circuit evaluation. This means that it will stop iterating as soon as it founds a not matching person.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;every&lt;/em&gt; method receives 2 parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: The function evaluating the condition to match (it must return &lt;em&gt;true&lt;/em&gt; or &lt;em&gt;false&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (optional): The object that will be used as &lt;em&gt;this&lt;/em&gt; inside the &lt;em&gt;callback&lt;/em&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the same time, &lt;em&gt;every&lt;/em&gt; passes 3 parameters to &lt;em&gt;callback&lt;/em&gt; (the same way that the other methods do):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: The element being iterated.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: The &lt;em&gt;index&lt;/em&gt; of that element inside the &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: The &lt;em&gt;array&lt;/em&gt; being iterated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;every&lt;/em&gt; returns &lt;em&gt;true&lt;/em&gt; if all its elements match the condition, or &lt;em&gt;false&lt;/em&gt; as soon as it find one element that doesn’t.&lt;/p&gt;

&lt;h3 id=&quot;looking-for-a-suitable-movie&quot;&gt;Looking for a suitable movie&lt;/h3&gt;

&lt;p&gt;Movies age restrictions must be observed. Although our people didn’t find any “suitable for all audiences”, a new release has just appeared and it can be watched even by children with adult supervision. Putting aside these adults criteria, let’s write a solution that evaluates if at least one person is older than 18. Before showing all the alternatives (the way we did for the previous scenario &lt;em&gt;every&lt;/em&gt;), let’s think: wouldn’t exist any other method capable of saying and doing what we are looking for?
The short answer is &lt;strong&gt;yes&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;some&lt;/em&gt; method receives 2 parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: The function evaluating the condition to match (it must return &lt;em&gt;true&lt;/em&gt; or &lt;em&gt;false&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (optional): The object that will be used as &lt;em&gt;this&lt;/em&gt; inside the &lt;em&gt;callback&lt;/em&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the same time, &lt;em&gt;every&lt;/em&gt; passes 3 parameters to &lt;em&gt;callback&lt;/em&gt; (the same way that the other methods do):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: The element being iterated.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: The &lt;em&gt;index&lt;/em&gt; of that element inside the &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: The &lt;em&gt;array&lt;/em&gt; being iterated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;some&lt;/em&gt; returns &lt;em&gt;false&lt;/em&gt; if none of its elements matches the condition, or &lt;em&gt;false&lt;/em&gt; as soon as it find one element that does.&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;As I mentioned at the very beginning, &lt;em&gt;expressivity&lt;/em&gt; is just one of many aspects that must be considered. Many times this aspects run into conflict and it’s necessary to evaluate which one is the most important.&lt;br /&gt;
Let’s consider the following problem: I must get an &lt;em&gt;array&lt;/em&gt; with people with weight under 130 pounds and older than 10.
Using what we have seen, we could naturally think that the following solution is the ideal one:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;softerThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a matter of fact, this solution is not ideal. It’s just expressive.
When filtering, we are iterating the &lt;em&gt;array&lt;/em&gt;. When filtering twice, we are iterating 2 &lt;em&gt;arrays&lt;/em&gt;. If &lt;em&gt;persons&lt;/em&gt; contains N elements and M are older than 10, the solution will iterate N + M elements. The following solution might be a little bit less expressive, but we can be sure that only N elements will be iterated:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan10AndsofterThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;considering&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan10AndsofterThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;softerThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When compromising aspects, it’s necessary to consider the use case. If our &lt;em&gt;arrays&lt;/em&gt; are containing families (a few elements), we might allow ourselves to have the most expressive code. But if we were processing the entire electoral roll, we should better worry about the &lt;em&gt;performance&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Javascript&lt;/em&gt; syntax is powerful enough to let us work with the good parts of the &lt;em&gt;procedural&lt;/em&gt;, &lt;em&gt;object oriented&lt;/em&gt; and &lt;em&gt;functional&lt;/em&gt; paradigms. Good practices of each paradigm could give us advantages when trying to improve some aspect of our code. Most of the times, when improving one aspect, we will be worsening others (For example: More Expressivity -&amp;gt; Less Performance). In occasions, these aspects will be related in more complex ways (For example: More Performance and Good Expressivity -&amp;gt; Less Flexibility). It’s part of our job when writing a piece of code, to evaluate which aspects we want to favor and which ones we will be punishing. Most of the times we will jump into the pitfall and favor those aspects that we like the most. That’s something to avoid. In order to know which aspects should be improved, the best option is to consider the use case.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Aug 2015 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//en/2015/08/13/expressive-code-javscript/</link>
        <guid isPermaLink="true">http://ourbit.github.io//en/2015/08/13/expressive-code-javscript/</guid>
        
        <category>javascript</category>
        
        <category>expressive</category>
        
        <category>code</category>
        
        <category>array</category>
        
        <category>prototype</category>
        
        <category>functions</category>
        
        <category>forEach</category>
        
        <category>map</category>
        
        <category>reduce</category>
        
        <category>filter</category>
        
        <category>every</category>
        
        <category>some</category>
        
        
      </item>
    
      <item>
        <title>Mudanza a GitHubPages</title>
        <description>&lt;p&gt;Con estas (no tan) recientes ganas de volver a escribir en ourBit me di cuenta de que las herramientas provistas por &lt;em&gt;blogger de Google&lt;/em&gt; no eran suficientes, o al menos, no cumplían los requerimientos que, en mi opinión, una plataforma de &lt;em&gt;blogging&lt;/em&gt; debe tener.
&lt;!--MORE--&gt;  &lt;/p&gt;

&lt;p&gt;Luego de investigar un poco otras herramientas que podían ayudarme en esta tarea (&lt;em&gt;Wordpress, Joomla&lt;/em&gt;, etc), llegué a la conclusión de que, por diferentes motivos, ninguna de estas iba a cumplir mis expectativas. Y básicamente me inclino a pensar que el motivo es que, si bien son buenas plataformas, apuntan a un usuario general no tan especializado como para utilizar otro tipo de herramientas.  &lt;/p&gt;

&lt;p&gt;Es así como recordé haber usado &lt;em&gt;Jekyll y GitHub Pages&lt;/em&gt; para construir alguna página estática en el pasado, y comencé a evaluarlo como alternativa.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definitivamente, &lt;em&gt;Jekyll&lt;/em&gt; no provee mejores herramientas que las otras plataformas&lt;/strong&gt;. No tiene comentarios, no crea un blog en minutos con sus correspondientes archivos, templates aplicables con solo un click, etc. Lo que termina primando aquí es la &lt;strong&gt;fléxibilidad&lt;/strong&gt;, lo cual la convierte en &lt;strong&gt;una herramienta candidata para desarrolladores&lt;/strong&gt; (u otros profesionales con conocimientos suficientes de IT) para ser su “plataforma” de &lt;em&gt;blogging&lt;/em&gt; a la medida.  &lt;/p&gt;

&lt;p&gt;El tiempo de adopción fue de apróximadamente 1 hora (si, nada más). En mi caso, ya contaba con algo de experiencia y fue solo cuestión de refrescar algunos conceptos, buscar algunos detalles de configuración y salir andando. Bueno, casi. Una vez que tenía todo funcionando, me puse a pensar en el diseño. No quería nada lujoso, pero si algo que fuera cómodo para el lector (y obviamente, respondiera a mis gustos personales). Pero claro, mis habilidades como diseñador son casi nulas, por lo cual decidí buscar &lt;em&gt;templates (o themes)&lt;/em&gt; gratuitos y adaptar mínimamente alguno. Me encontré con &lt;a href=&quot;https://github.com/IronSummitMedia/startbootstrap-clean-blog&quot;&gt;CleanBlog&lt;/a&gt; de &lt;a href=&quot;https://github.com/davidtmiller&quot;&gt;David Miller&lt;/a&gt; a quien agradezco por haber disponibilizado este material. Adaptarlo y aplicarlo al blog que ya estaba funcionando fue cuestión de minutos.&lt;/p&gt;

&lt;p&gt;¿Qué me hace elegir &lt;em&gt;Jekyll y GitHub Pages&lt;/em&gt;?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La posibilidad de contar con herramientas &lt;em&gt;Open Source&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Libre de publicidad: Esto es gratuito sin letra chica.&lt;/li&gt;
  &lt;li&gt;Flexibilidad y Extensibilidad: Puedo desarrollar plugins y herramientas sobre la plataforma.&lt;/li&gt;
  &lt;li&gt;Simpleza: Crear Posts es tan simple como escribir en un archivo de texto y seguir el flujo normal de GitHub para publicar.&lt;/li&gt;
  &lt;li&gt;Capacidad de Recibir &lt;em&gt;Pull Requests&lt;/em&gt;: Me interesa que cualquier lector pueda sugerir correcciones, o incluso, publicar en este blog. &lt;strong&gt;Espero Pull Requests con sus Posts&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Soporte a &lt;em&gt;Markdown&lt;/em&gt;: Esto quizá es un gusto personal. Pero encuentro muy simple y conveniente escribir en &lt;em&gt;Markdown&lt;/em&gt; en lugar de lidiar con editores &lt;em&gt;WYSIWYG&lt;/em&gt; que terminan fallando cuando quiero ir más allá que las opciones soportadas.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Highlight&lt;/em&gt; de código: Escencial para un Blog dónde haya snippets.  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Bienvenidos al nuevo OurBit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Estas son solo algunas razones. Pero cada uno debería tener las suyas. Ante la duda, inviertan 1 hora en aprender a usarlo (quizá no los convenza como herramienta de &lt;em&gt;Blogging&lt;/em&gt;, pero no está demás saber como funciona &lt;em&gt;Jekyll y GitHub Pages&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Les dejo algunos links para comenzar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si tienen dudas, espero su contacto.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Aug 2015 15:43:21 -0300</pubDate>
        <link>http://ourbit.github.io//es/jekyll/update/2015/08/03/moving-to-gh-pages/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/jekyll/update/2015/08/03/moving-to-gh-pages/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Moving to GitHub Pages</title>
        <description>&lt;p&gt;With this (not that) recent desires of writing at ourBit again, I realized that the tools provided by &lt;em&gt;blogger by Google&lt;/em&gt; were not good enough or didn’t fulfill requirements that, in my opinion, should be provided by a &lt;em&gt;blogging&lt;/em&gt; platform out of the box&lt;!--MORE--&gt;.  &lt;/p&gt;

&lt;p&gt;After researching other tools that could help me with this task (&lt;em&gt;Wordpress, Joomla&lt;/em&gt;, etc), I concluded that non of these would meet my expectations by one reason or another. Basically, I am biased to think that the main reason is that, even though these are good platforms, all of them are targeted to a user not specialized enogh for using another kind of tools.  &lt;/p&gt;

&lt;p&gt;That’s how I remembered having used &lt;em&gt;Jekyll and GitHub Pages&lt;/em&gt; in the past, for building some static page, and so I started evaluating it as an alternative.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Jekyll&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;is definitively not providing better tools than the other platforms&lt;/strong&gt;. It doesn’t count with a comments feature, it doesn’t create a new blog in minutes with its corresponding archives, one-click-apply templates, etc. What ends up being a priority here is the &lt;strong&gt;flexibility&lt;/strong&gt;, which turns &lt;em&gt;Jekyll&lt;/em&gt; into a &lt;strong&gt;candidate tool for developers&lt;/strong&gt; (or other professionals with IT knowledge enough) to becoming their tailored &lt;em&gt;blogging&lt;/em&gt; “platform”.  &lt;/p&gt;

&lt;p&gt;The ramp up time was about 1 hour (nothing more). In my case, I already had some experience so it was just a matter of revisiting some concepts, looking for some configuration details and start rolling. Well, almost. Once I had everything working, I started to think about the design. I didn’t want anything fancy but comfortable to read (and obviously, I wanted something that matches my personal tastes). Well, my design skills are close to null, hence, I decided to look for free &lt;em&gt;templates (or themes)&lt;/em&gt; and adapt one of them. I ran into &lt;a href=&quot;https://github.com/IronSummitMedia/startbootstrap-clean-blog&quot;&gt;CleanBlog&lt;/a&gt; by &lt;a href=&quot;https://github.com/davidtmiller&quot;&gt;David Miller&lt;/a&gt; to whom I give thanks for publishing this material. Adapting and applying it to the already running blog was a matter of minutes.  &lt;/p&gt;

&lt;h3 id=&quot;why-am-i-choosing-jekyll-y-github-pages&quot;&gt;Why am I choosing &lt;em&gt;Jekyll y GitHub Pages&lt;/em&gt;?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The possibility of counting with &lt;em&gt;Open Source&lt;/em&gt; tools.&lt;/li&gt;
  &lt;li&gt;Ads-Free: This is free. No strings attached.&lt;/li&gt;
  &lt;li&gt;Flexibility and Extensibility: I can build plugins and tools on top of the platform.&lt;/li&gt;
  &lt;li&gt;Simplicity:Creating Posts is as simple as writing a text file and follow the GitHub worflow for publishing.&lt;/li&gt;
  &lt;li&gt;Capability of receiving &lt;em&gt;Pull Requests&lt;/em&gt;: I’;’m interested on having readers suggesting fixes, or even having them publishing on this blog. &lt;strong&gt;I hope you send your Posts via Pull Requests&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Markdown&lt;/em&gt; Support: This might be a personal taste, but I find very simple and convenient to write in &lt;em&gt;Markdown&lt;/em&gt; instead of dealing with &lt;em&gt;WYSIWYG&lt;/em&gt; editors that end failing when attempting to go beyond their capabilities&lt;/li&gt;
  &lt;li&gt;Code Highlight: Mandatory for a snippet containing blog&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome to the new OurBit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These are just a few reasons. You should find yours. I suggest you to invest 1 hour in learning how to use it (maybe it won’t convince you as a &lt;em&gt;Blogging&lt;/em&gt; tool, but it worth knowing how &lt;em&gt;Jekyll and GitHub Pages&lt;/em&gt; works).  &lt;/p&gt;

&lt;p&gt;Here are some links for kicking off&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please, don’t hesitate to reach me if you have any doubt.  &lt;/p&gt;
</description>
        <pubDate>Mon, 03 Aug 2015 15:43:21 -0300</pubDate>
        <link>http://ourbit.github.io//en/jekyll/update/2015/08/03/moving-to-gh-pages/</link>
        <guid isPermaLink="true">http://ourbit.github.io//en/jekyll/update/2015/08/03/moving-to-gh-pages/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>SPAM - Caso Real</title>
        <description>&lt;p&gt;Quienes entendemos (y un poco más) de tecnología, solemos advertir, explicar, &lt;em&gt;retar&lt;/em&gt; a nuestros conocidos y familiares cuando vemos que están usando mal el &lt;em&gt;mail&lt;/em&gt;. En particular, un concepto simple pero que siempre se suele dejar de lado (por desconocimiento u olvido, a todos nos puede pasar).
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;para-principiantes&quot;&gt;Para principiantes&lt;/h2&gt;
&lt;p&gt;Cuando enviamos un &lt;em&gt;mail&lt;/em&gt;, tenemos que especificar las direcciones de los destinatarios. Pero hay 3 formas de hacerlo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Para: A quienes está dirigido el &lt;em&gt;mail&lt;/em&gt;. &lt;strong&gt;Todos los destinatarios pueden ver las direcciones que se escriban en este campo.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Copia Carbón: Gente en copia porque no son los principales destinatarios, pero queremos que estén enterados. &lt;strong&gt;Todos los destinatarios pueden ver las direcciones que se escriban en este campo.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Copia Oculta: Gente a la que queremos que le llegue el &lt;em&gt;mail&lt;/em&gt;, sin que los demás se enteren. &lt;strong&gt;Nadie más que el remitente y el destinatario puede ver las direcciones que se escriban en este campo.&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y es esta última opción la que sugerimos/rogamos utilizar cuando no podés evitar mandar ese &lt;em&gt;PPT&lt;/em&gt; con música de fondo y fotos de volcanes o cachorros siendo salvados por bomberos voluntarios. Es decir, si lo vas a mandar de todos modos, y a un montón de gente, al menos no publiques/compartas las direcciones con todo el mundo.&lt;br /&gt;
Personalmente me dio buenos resultados explicar &lt;strong&gt;por qué&lt;/strong&gt; está mal compartir las direcciones. Al enviar estas direcciones, y ser públicas para cualquiera, quien la recibe puede utilizarla para enviarme contenido que no me interesa (lo cual, en gran volumen, representa una molesta pérdida de tiempo). Pero aún peor: Muchos de tus contactos de confianza van a reenviar tu &lt;em&gt;mail&lt;/em&gt; (porque les resultó digno de ser compartido) y a su vez, sus contactos lo reenviarán en una cadena que podría propagarse hasta que todos hayamos recibido ese &lt;em&gt;mail&lt;/em&gt; (quizá más de una vez).&lt;br /&gt;
En toda esa cadena, &lt;strong&gt;al menos&lt;/strong&gt; uno de los eventuales destinatarios, se dedica a recolectar direcciones de &lt;em&gt;mail&lt;/em&gt; y armar “bases de datos” de los mismos. Estas bases de datos, o listas con gran cantidad de contactos tienen gran valor para empresas que publicitan sus productos y/o servicios vía internet, y por lo tanto, están dispuestas a pagar por ellas. Al final del recorrido, lo que ocurre es que uno empieza a recibir &lt;em&gt;mail&lt;/em&gt; no solicitado, de interés nulo, y &lt;strong&gt;en abundancia.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;caso-real&quot;&gt;Caso real&lt;/h2&gt;

&lt;p&gt;Esta mañana, un empleado de una compañía dedicada a proyectos de inversión, envió las novedades e imágenes de la demolición de un espacio para un nuevo emprendimiento. &lt;strong&gt;Mis felicitaciones a ellos, de paso.&lt;/strong&gt; Yo no conozco a esta persona, por lo que estimo que obtuvo mi &lt;em&gt;mail&lt;/em&gt; gracias a alguna cadena previa enviada de manera incorrecta. Pero aquí lo curioso: Puso a todos los destinatarios en el campo “Para”. Si, ese error que un familiar comete y al que le advertimos, explicamos, &lt;em&gt;retamos&lt;/em&gt;, fue cometido por un &lt;strong&gt;profesional de la industria del envío del &lt;em&gt;mail&lt;/em&gt; masivo (probablemente certificado por el instituto nacional del envío de correo electrónico y otras competencias altamente redituables, mejor conocido como el INdEdCEyOCAR).&lt;/strong&gt; Y obviamente, si a un familiar se lo marco, cómo no arremeter ante tal falta de profesionalismo. Respondí su &lt;em&gt;mail&lt;/em&gt; moviendo a los otros destinatarios desde el campo “Para” al campo “Copia Oculta” (si bien el mal estaba hecho, con esto evitaba cualquier problema que pudiera surgir por algún “Responder a Todos”). Puse en el campo “Copia Carbón” la dirección info@&lt;em&gt;laempresaencuestion&lt;/em&gt;.com (que obtuve de internet) a modo de “comunicame con un supervisor”. Y escribí mi respuesta:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hola &lt;em&gt;XXXX&lt;/em&gt;,&lt;br /&gt;
Te agradecería que la próxima vez que envíes un correo no solicitado (A.K.A SPAM) lo hagas utilizando la opción Copia Oculta (o BCC) para que no todos puedan ver mis datos de contacto así como yo no debería ver los datos de todas las personas que están recibiendo este mensaje.&lt;br /&gt;
Atte.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Aparentemente, el &lt;em&gt;mal&lt;/em&gt; ya está hecho. Uno tiene a minimizar estas cuestiones al nivel de “bueno, como mucho, recibis correo no deseado”. Pero al poner en copia (oculta) a las otras &lt;em&gt;víctimas&lt;/em&gt; de esta práctica ocurrieron algunas cosas que habitualmente se nos pasan por alto.&lt;/p&gt;

&lt;h2 id=&quot;consecuencias&quot;&gt;Consecuencias&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Muchas de las direcciones de destino eran pertenecientes a &lt;em&gt;mails&lt;/em&gt; laborales. Es decir que esta gente podrá empezar a recibir SPAM en sus correos laborales.&lt;/li&gt;
  &lt;li&gt;30 de Julio: Muchas de las personas tenían configurado la respuesta automática “Estoy de vacaciones hasta el día tal”. Es decir que, &lt;strong&gt;cualquiera de estas 400 personas podría saber que alguien (con nombre y apellido) probablemente no esté en casa&lt;/strong&gt; hasta dentro de unos días. Y déjenme decirles que, obtener el domicilio y otros datos de una persona con solo tener su nombre no es precisamente algo demasiado complicado (aunque no sea exacto).&lt;/li&gt;
  &lt;li&gt;Las direcciones inexistentes (o inválidas) son informadas ya que uno recibe el correo típico de “Correo no entregado” (Undelivered mail). Por lo que puedo asumir que las demás direcciones son válidas y usarlas con fines comerciales.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En mi caso particular, las posibilidades que acabo de mencionar no se encuentran dentro del grupo de mis actividades, lo cual deja conformes solo a quienes me conocen y confían en mi. El resto puede dudar. Pero hay otras 399 personas en esa cadena. 399 personas que tienen mi dirección de correo. 399 personas que quizá tengan tu dirección de correo.&lt;/p&gt;

&lt;p&gt;Es una época en donde lo que podemos hacer sentados en nuestros escritorios es cada vez más crítico. Podemos transferir dinero, contar nuestro itinerario, publicar nuestro estado de ánimo, mostrar fotos, publicar nuestros pensamientos y opiniones libremente, entre otras. Pero cada acción que hacemos, puede ser observada por otros. El uso consciente de las herramientas informáticas es la única forma real de asegurarnos que esos otros, sean el público al que apuntamos y nadie más.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jul 2015 14:45:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2015/07/30/spam-caso-real/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2015/07/30/spam-caso-real/</guid>
        
        
      </item>
    
      <item>
        <title>SPAM - Real case</title>
        <description>&lt;p&gt;Those who understand about technology (and maybe a little more than “understand”), are used to warning, explaining, or &lt;em&gt;scolding&lt;/em&gt; our friends and family about misusing the e-mail. There is a particular concept that is usually disregarded despite of being a simple one (mostly because of lack of knowledge or attention. It could happens to anyone).
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;for-rookies&quot;&gt;For rookies&lt;/h2&gt;

&lt;p&gt;When we send an e-mail, we need to specify the receivers addresses. There are 3 ways of doing this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To: To whom this e-mail is targeted. &lt;strong&gt;All receivers can see the addresses typed in this field.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Carbon Copy: People that, despite not being the main target, we want notify about something.  &lt;strong&gt;All receivers can see the addresses typed in this field.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Blind Carbon Copy: People we want to read the e-mail, but we don’t want other people notice. &lt;strong&gt;Nobody excepting the sender and the receiver can see the addresses typed in this field.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This last option is the one we recommend/beg to use when you can’t help sending that &lt;em&gt;PPT&lt;/em&gt; with a background sound and pictures of volcanoes or puppies being saved by volunteer firefighters. Thus, if sending to a bunch of people anyway, at least avoid publishing/sharing everyone else email addresses.
Personally I got great results by explaining &lt;strong&gt;why&lt;/strong&gt; sharing the addresses is that bad. When we send the addresses publicly to anyone, the receiver can use these for sending back to me content I am not interested in (which in high volumes, turns to be a really annoying waste of time). Even worse: Many of your trusted contacts will forward your email (since they think it’s worthy) and following, their contacts will forward the thread that might propagate until all of us have received that e-mail (maybe, even more than once).&lt;br /&gt;
At some point, there will probably be &lt;strong&gt;at least&lt;/strong&gt; one link of this chain dedicated to collecting email addresses for creating email databases. Databases are really valuable for companies that advertise their products and/or services via internet, and therefore, are willing to pay for these. At the end of the road, what happens is that you start receiving spam. &lt;strong&gt;A lot of spam.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;real-case&quot;&gt;Real case&lt;/h2&gt;

&lt;p&gt;This morning, an employee working at a company dedicated to investment projects, sent some news and images about a building wrecking for a new entrepreneurship. &lt;strong&gt;Congratulations to them, by the way&lt;/strong&gt;. I don’t know this person so I’m assuming that he got my email address thanks to some previous carelessly forwarded thread. But the funny thing: He placed all the receivers into the “To” field. Yes, that mistake typically committed by friends and family and that we warn, explain or &lt;em&gt;scold&lt;/em&gt; because of, was committed this time by a &lt;strong&gt;spam sending industry professional (probably certified by the National e-mail sending and other highly profitable competences institute A.K.A NESaOHPCI).&lt;/strong&gt; And obviously, if I blame a relative when doing this, how not to lash out at such lack of professionalism. I replied his email moving the other receivers from the “To” to the “BCC” field (avoiding any possible “reply to all” related problem). I put info@&lt;em&gt;thecompany&lt;/em&gt;.com in “CC” as an escalation, and wrote my answer:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hi XXXX,&lt;br /&gt;
I would appreciate if next time you send a spam message you could use the BCC option so my contact information is not shared with everyone, the same way I shouldn’t be seeing the contact information of all these people receiving this message.&lt;br /&gt;
Sincerely.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, &lt;em&gt;evil&lt;/em&gt; was done. People tend to understate these issues with thoughts like “well, it’s not a big deal. At most you will receive some SPAM”. But when I placed the other &lt;em&gt;victims&lt;/em&gt; in (B)CC some things happened. Things that we usually overlook.&lt;/p&gt;

&lt;h2 id=&quot;consequences&quot;&gt;Consequences&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Many of the addresses were work email addresses. This means that this people will probably start receiving SPAM at work.&lt;/li&gt;
  &lt;li&gt;July 30: At least on this region, lot of people are out for vacations. Lot of people had configured the automatic response “I’m out for vacations until some date”. This means that, &lt;strong&gt;any of these 400 persons might know first and last name of someone that is out of home&lt;/strong&gt; for the next days. And let me say that, getting the home address and other personal information with just the person name, is not exactly rocket science.&lt;/li&gt;
  &lt;li&gt;Non-existing or invalid addresses are informed by getting the “Undelivered email”. Because of that, I can assume that the other ones are valid and use these with commercial purposes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my case, the options I’ve just mentioned are not inside the set of activities I usually perform, which only assures the ones that know me and trust me. The rest of you are allowed to have second thougts. But there are other 399 persons on that thread. 399 persons that have my e-mail address. 399 that might have your e-mail address.&lt;/p&gt;

&lt;p&gt;We live in an era where we can do more and more critical and sensitive tasks from our desks. We can transfer money, share our routine, publish our mood, show pictures, share our thoughts and opinions, among others. But every move we make can be watched by others. Thoughtful usage of information tools is the only real way of making sure that these others, are our intended audience and nobody else.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jul 2015 14:45:00 -0300</pubDate>
        <link>http://ourbit.github.io//en/2015/07/30/spam-caso-real/</link>
        <guid isPermaLink="true">http://ourbit.github.io//en/2015/07/30/spam-caso-real/</guid>
        
        
      </item>
    
      <item>
        <title>De Chrome a Safari ida y vuelta</title>
        <description>¿Casi 3 años sin poner nada acá y aparecer de repente con poca información? No quiero faltarles el respeto, pero por algún lado hay que empezar (si queremos empezar).&lt;br /&gt;&lt;br /&gt;Hace un tiempo largo ya me convertí en usuario de Apple, sobretodo por las MacBook. Lo charlé con fundamentalistas, fanáticos, hinchas, simpatizantes, seres racionales, opositores, y &lt;i&gt;odiadores&lt;/i&gt; de todo lo que Mac representa y todos entendieron los motivos por los cuales no me muevo de Mac.&lt;!--MORE--&gt;&lt;br /&gt;&lt;br /&gt;Recientemente, instalé Yosemite en una nueva Retina Display de 15&#39;&#39;. Todo perfecto, la integración con iPhone mejoró considerablemente, y no tuve demasiados problemas con las herramientas de desarrollo u otras.&lt;br /&gt;&lt;br /&gt;Pero un par de días más tarde, todo empezó a funcionar raro (como en los tiempos de Windows). La Mac se colgaba, todo andaba &quot;trabado&quot;. Empecé a ver los motivos y al abrir el &quot;Monitor&quot; tenía aproximadamente 25 procesos &quot;Google Chrome Helper&quot; consumiendo memoria, procesador, y en estado &quot;Not responding&quot;. No esperé demasiado (y ya tenía curiosidad por ver cómo andaba Safari) así que cerré todo y cambié.&lt;br /&gt;&lt;br /&gt;La realidad es que Safari en Mac es superior en múltiples aspectos:&lt;br /&gt;- La velocidad mejora &lt;b&gt;notablemente&lt;/b&gt;.&lt;br /&gt;- El consumo de recursos disminuye &lt;b&gt;notablemente.&lt;/b&gt;&lt;br /&gt;- User Experience: Mejora salvo por unos detalles, que lograron hacer que vuelva a intentar Chrome:&lt;br /&gt;&lt;br /&gt;1. &quot;Abrir las últimas ventanas o pestañas cerradas&quot; simplemente no funciona (o no es consistente). Algunas veces, abre como corresponde. Pero otras, por ejemplo si Safari no pudo filtrar un pop-up, esta funcionalidad va a abrir ese pop-up cada vez que lo intentemos. El shortcut de una ventana cerrada es CMD+Z, lo cual dificulta UNDO en un FORM (depende del campo, se ejecuta una u otra función).&lt;br /&gt;2. Los &quot;Tabs&quot; no tienen favicon. Las pestañas llegan a achicarse hasta un punto en donde comienzan a desaparecer, y navegarlas se vuelve completamente anti-intuitivo.&lt;br /&gt;3. Las &quot;Developer Tools&quot;. Una vez que están habilitadas (porque no vienen por &lt;i&gt;default&lt;/i&gt;), no nos aportan demasiado. En especial los &lt;i&gt;Timelines. &lt;/i&gt;Si fuera por los &lt;i&gt;timelines&lt;/i&gt;, las páginas nunca fueron solicitadas.&lt;br /&gt;&lt;br /&gt;El hecho de que la comunidad de desarrolladores de &quot;extensions&quot; también sea más numerosa para Chrome, influye.&lt;br /&gt;&lt;br /&gt;Volví a Chrome. Voy a tener que pelear con los problemas de consumo de recursos (sobretodo de los programas que usen el Chrome Helper) hasta que se solucione.&lt;br /&gt;&lt;br /&gt;De paso: Instalé también la versión más beta &lt;a href=&quot;https://www.google.com/intl/en/chrome/browser/canary.html&quot; target=&quot;_blank&quot;&gt;Chrome Canary&lt;/a&gt;&amp;nbsp;para ir probando nuevas funcionalidades. No se cuánto lo vaya a usar, ya que no puedo ponerlo como &lt;i&gt;default browser&lt;/i&gt;, pero veremos como evoluciona.&lt;br /&gt;&lt;br /&gt;Nota: Espero retomar la costumbre de escribir cada tanto por aquí. Consideremos este post como una prueba piloto.
</description>
        <pubDate>Fri, 21 Nov 2014 18:37:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2014/11/21/de-chrome-safari-ida-y-vuelta/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2014/11/21/de-chrome-safari-ida-y-vuelta/</guid>
        
        
      </item>
    
      <item>
        <title>Legislando lo que prosperó anárquicamente</title>
        <description>Es claro que el titulo es tendencioso. Decir que Internet es un ente anárquico es, desde mi humilde opinión, una falacia no menor. Internet contiene lo que un numeroso grupo de individuos (personas físicas o jurídicas) publica, al menos conceptualmente y sin entrar en detalles técnicos que no aportan al tema a desarrollar. &lt;!--MORE--&gt;Estas personas se rigen por legislaciones existentes (algunas correspondientes a sus países y otras comunes al globo). Si yo violo una ley existente, ya sea por publicar un contenido no debido en una red, o por arrojar basura en la vía pública, no estoy realizando nada que no ocurriera antes de internet (masiva). Lo que quizás provee internet es cierta impunidad que brinda el anonimato. Estas características permitieron que internet se desarrollara y llegara a ser el lugar en donde millones de personas podemos compartir contenidos y potenciar nuestras capacidades. Quienes entendemos internet no podemos imaginarla de otra manera. Y creo que aquí es momento de mencionar algo que puede ser controversial: &quot;No es incorrecto legislar internet&quot;. Todos podemos querer que nuestros derechos de autor se vean resguardados al tiempo que queremos utilizar el medio que facilita su &quot;violación&quot; para difundir lo que queremos proteger. Probablemente, si el cine no fuera un gran negocio, su difusión sería limitada, y eso también sería una lástima. Lo que creo que no se puede dejar de lado, es el análisis COSTO-BENEFICIO de aplicar una ley. De alguna manera, se realiza este análisis (quizás de forma implícita) ante situaciones mucho más graves. Por ejemplo: tras muchos años de ver CANSADOS, que los accidentes de tránsito causados por conductores ebrios se cobran miles de vidas al año, nadie piensa en prohibir el alcohol. Se sigue penalizando su consumo al momento de manejar. Prohibir el alcohol sería, teóricamente, una medida más eficaz para evitar tragedias (Enorme beneficio). Pero el costo es también muy elevado, y sobretodo &lt;b&gt;corta libertades.&lt;/b&gt;&amp;nbsp;Si yo soy una persona responsable, que quiere disfrutar un buen vino con un plato de carne, sería ilógico que esta práctica se me&amp;nbsp;prohíba&amp;nbsp;(al menos bajo las normas culturales de mi región). Prohibir el alcohol, cambiaría rotundamente los hábitos de los individuos. Transformaría el objeto a legislar en algo completamente distinto. Imponer una legislación demasiado estricta sobre internet, haciendo que sitios que funcionan como herramientas para compartir todo tipo de contenidos, cierren, es cambiar la escencia de lo legislado: empeorar internet, prohibirme cenar con vino, enjaularme por ser Argentino.&lt;br /&gt;Pero más allá del análisis conceptual y el impacto negativo que tendría sobre internet, la aplicación de las leyes que intentaron aprobarse, e incluso más allá de lo retrógrado que esto sea (hoy noté el inmenso retroceso tecnológico y cultural que representa haber tenido que resguardar archivos de una cuenta de MediaFire en el disco rígido de una PC, y dejar de compartirlos en caso que este sitio cierre), lo que molesta, es la motivación. No hay una motivación real de cuidar a un artista (ya sea escritor, cineasta, músico o fotógrafo). La intención real, es &lt;b&gt;no perder un negocio.&lt;/b&gt;&amp;nbsp;Y no voy a juzgar a nadie que quiera conservar su medio de vida. Ni siquiera voy a juzgar a aquellos que quieran conservar su billetera abultada gracias a sus negocios.&lt;br /&gt;&lt;br /&gt;Pero sí me animo a juzgar a todos aquellos quienes en lugar de pensar creativamente, para adaptar sus negocios a nuevas eras, intenten imponer restricciones que modifiquen la escencia de una herramienta que fomenta la generación y sinergia de conocimiento, en pos del beneficio propio y sobretodo, &lt;b&gt;la comodidad.&lt;/b&gt;&amp;nbsp;Y luego de juzgarlos, me gustaría poder castigar, a todo aquel que además de intentarlo, lo haga por la fuerza, gracias a los favoritismos que un gobierno, y sus servicios de inteligencia, pueda tener, imponiendo el miedo con &quot;castigos ejemplares&quot; sentenciando a cárcel a personas que desarrollaron un negocio montado en software que permite almacenar archivos, pero dejando impunes y fomentando genocidios.
</description>
        <pubDate>Fri, 27 Jan 2012 10:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2012/01/27/legislando-lo-que-prospero/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2012/01/27/legislando-lo-que-prospero/</guid>
        
        
      </item>
    
  </channel>
</rss>
