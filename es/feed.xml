<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OurBit</title>
    <description>Ourbit is a blog dedicated to IT topics such as programming, management, qa, and technology in general</description>
    <link>http://ourbit.github.io//</link>
    <atom:link href="http://ourbit.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 20 Aug 2015 15:48:55 -0300</pubDate>
    <lastBuildDate>Thu, 20 Aug 2015 15:48:55 -0300</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Código expresivo en Javascript</title>
        <description>&lt;p&gt;Hay varios (si no demasiados) aspectos a tener en cuenta al momento de escribir una pieza de código: &lt;em&gt;performance, mantenibilidad y legibilidad&lt;/em&gt;, por mencionar algunos.
Un aspecto que me resulta particularmente interesante es el denominado “expresividad” y significa “la habilidad de enunciar lo que se está haciendo”.  &lt;/p&gt;

&lt;p&gt;Como buen &lt;em&gt;Javascript Hipster (“A mi me gustaba antes de que fuera popular”)&lt;/em&gt; me gustaría mostrar algunos ejemplos de cómo &lt;em&gt;Javascript&lt;/em&gt; nos permite ser realmente expresivos trabajando con &lt;em&gt;arrays&lt;/em&gt; (y algunas funciones en particular): &lt;em&gt;forEach, filter, map, reduce, every&lt;/em&gt; and &lt;em&gt;some&lt;/em&gt;.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;p&gt;Si bien habitualmente la característica de “Expresivo” se le atribuye al lenguaje, en todos los lenguajes se puede ser más o menos expresivo al escribir diferentes versiones de código que hagan lo mismo. De esta manera, sería más preciso definir a una pieza de código como “expresiva” si realmente es capaz de enunciar lo que está haciendo.&lt;/p&gt;

&lt;p&gt;Tomemos como ejemplo un conjunto de personas:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;176&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;John Doe Jr.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Jane Doe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Julian Doe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ahora, recorramos este &lt;em&gt;array&lt;/em&gt; y por cada persona imprimamos “&lt;em&gt;Name&lt;/em&gt; is &lt;em&gt;age&lt;/em&gt; years old”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; - &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Este código es bastante simple, corto y podríamos decir que es bastante legible. Pero esto no lo hace necesariamente &lt;strong&gt;expresivo&lt;/strong&gt;. Lo que queríamos hacer era: Imprimir “&lt;em&gt;Name&lt;/em&gt; is &lt;em&gt;age&lt;/em&gt; years old” por cada persona. Esto es lo que dice el código que acabamos de escribir:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Inicializar una variable &lt;em&gt;i&lt;/em&gt; con el valor &lt;em&gt;0&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Siempre y cuando la variable sea menor a la cantidad de personas, incrementarla y ejecutar el siguiente bloque de código:&lt;br /&gt;
  2.1. Obtener el nombre de la persona en la posición indicada por la variable previamente inicializada.&lt;br /&gt;
  2.2. Concatenarle un espacio, un guión y luego otro espacio.&lt;br /&gt;
  2.3. Concatenarle la edad de la persona en la posición indicada por la variable previamente inicializada.&lt;br /&gt;
  2.4. &lt;em&gt;Loggear&lt;/em&gt; el resultado en la consola.  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Comencemos por quitar la línea dentro del &lt;em&gt;for&lt;/em&gt; y ubicarla dentro de una función que reciba una &lt;em&gt;persona&lt;/em&gt; como parámetro e imprima el patrón especificado.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; - &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si estás pensando “esto no tiene nada que ver con &lt;em&gt;Javascript&lt;/em&gt; y las funciones de sus &lt;em&gt;arrays&lt;/em&gt;”, estás en lo cierto, pero no te impacientes.&lt;br /&gt;
No hicimos más que &lt;em&gt;encapsular&lt;/em&gt; una funcionalidad para ocultar su complejidad. &lt;em&gt;Encapsulamiento&lt;/em&gt; es un concepto habitualmente relacionado al Paradigma de Programación orientada a objetos, pero en realidad puede lograrse de muchas maneras, y las &lt;em&gt;funciones&lt;/em&gt; son una forma ancestral de lograrlo. El objetivo de &lt;em&gt;encapsular&lt;/em&gt; código no es el de hacerlo más expresivo, pero en la mayoría de los casos, es un efecto colateral.&lt;/p&gt;

&lt;p&gt;Si leemos nuevamente el código (y obviamos describir la nueva función):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Inicializar una variable &lt;em&gt;i&lt;/em&gt; con el valor &lt;em&gt;0&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Siempre y cuando la variable sea menor a la cantidad de personas, incrementarla e&lt;/li&gt;
  &lt;li&gt;Imprimir el patrón para la persona en la posición indicada por la variable previamente inicializada.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;arrayprototypeforeach&quot;&gt;Array.Prototype.forEach&lt;/h3&gt;
&lt;p&gt;Si bien el código se ha vuelto un poco más expresivo, parece estar más preocupado por la variable &lt;em&gt;i&lt;/em&gt;, su inicialización, y su cota, que por la persona en sí misma.&lt;br /&gt;
Afortunadamente hay otras formas de recorrer un &lt;em&gt;array&lt;/em&gt;. Por ejemplo el método &lt;code&gt;Array.prototype.forEach(function)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si leemos nuevamente el código:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Por cada persona, imprimir el patrón.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;De esta forma, el código &lt;em&gt;hace&lt;/em&gt; y &lt;em&gt;expresa&lt;/em&gt; exactamente lo que queremos.&lt;br /&gt;
Pero, si bien la lectura resulta más simple, es necesario comprender que es lo que está ocurriendo detrás del telón.&lt;br /&gt;
En primer lugar, algo a destacar de &lt;em&gt;Javascript&lt;/em&gt; es que &lt;em&gt;todo (o casi todo) es un mensaje.&lt;/em&gt; Esto significa que objetos, funciones, métodos y valores son mensajes (o expresiones) y como tales pueden ser pasadas como parámetros.&lt;br /&gt;
A diferencia del &lt;em&gt;for&lt;/em&gt; que es una instrucción, el &lt;em&gt;forEach&lt;/em&gt; es un método del objeto &lt;em&gt;Array&lt;/em&gt; (o de su &lt;em&gt;prototipo&lt;/em&gt;). Combinando estos conceptos, &lt;em&gt;forEach&lt;/em&gt; recorre el &lt;em&gt;array&lt;/em&gt; y en cada iteración invoca a la función que recibió como parámetro. En dicha invocación, &lt;em&gt;forEach&lt;/em&gt; le pasa como parámetro a la otra función, el elemento que está siendo iterado.&lt;br /&gt;
Una implementación muy básica del &lt;em&gt;forEach&lt;/em&gt; podría ser:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Adicionalmente, el &lt;em&gt;forEach&lt;/em&gt; recibe un segundo parámetro opcional que representa una función que será invocada cuando se haya finalizado la recorrida del &lt;em&gt;array&lt;/em&gt;. En los ejemplos que se están mostrando esto puede parecer inútil, pero cuando se está en un entorno de programación &lt;em&gt;asincrónica&lt;/em&gt; (como &lt;a href=&quot;http://nodejs.org&quot;&gt;NodeJS&lt;/a&gt;), este tipo de implementaciones se vuelve indispensable.&lt;/p&gt;

&lt;p&gt;Aún más útiles quizá resulten 2 parámetros adicionales que &lt;strong&gt;el &lt;em&gt;forEach&lt;/em&gt; le pasa a la función especificada en el primer parámetro:&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: El índice del elemento que está siendo iterado.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: El &lt;em&gt;array&lt;/em&gt; completo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El &lt;em&gt;forEach&lt;/em&gt; no devuelve ningún resultado, pero entre las acciones realizadas dentro de la función invocada, es posible modificar el &lt;em&gt;array&lt;/em&gt; que está siendo iterado (lo cual, como veremos, deberá hacerse con cuidado).&lt;/p&gt;

&lt;h3 id=&quot;no-apto-para-menores-de-25-aos&quot;&gt;No apto para menores de 25 años&lt;/h3&gt;
&lt;p&gt;Supongamos que en un bar muy exclusivo no se admiten menores de 25 años. Podríamos intentar escribir un código que elimine del &lt;em&gt;array&lt;/em&gt; aquellas personas que no alcancen dicha edad. El código podría ser:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;em&gt;splice&lt;/em&gt;&lt;/a&gt; es útil para eliminar elementos de un &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Si ejecutamos este código, vamos a obtener el siguiente resultado:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;John Doe - 27&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Jane Doe - 24&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Julian Doe - 32&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Por algún motivo, Jane Doe logró vencer la seguridad de nuestro bar, e ingresar. Dicho motivo es causa de incontables &lt;em&gt;bugs&lt;/em&gt; en incontables piezas de código.&lt;br /&gt;
En cada iteración, &lt;em&gt;index&lt;/em&gt; incrementa 1. La primera vez (&lt;em&gt;index=0&lt;/em&gt;) encontramos a John Doe de 27 años. Queda en el &lt;em&gt;array&lt;/em&gt;. La segunda vez (&lt;em&gt;index=1&lt;/em&gt;), encontramos a John Doe Jr de 3 años (quien claramente no debería estar en nuestro bar). Al removerlo del &lt;em&gt;array&lt;/em&gt; Jane Doe pasa a estar en el &lt;em&gt;index 1&lt;/em&gt; y Julian Doe en el &lt;em&gt;index 2&lt;/em&gt;. La tercera iteración (&lt;em&gt;index=2&lt;/em&gt;) aparece Julian Doe. Es decir que Jane Doe ha sido salteada. &lt;strong&gt;Es como si el guardia de seguridad se diera vuelta cada vez que saca a alguien de la fila del bar y en ese momento dejara pasar a una persona sin importar su edad.&lt;/strong&gt;&lt;br /&gt;
No siempre es buena idea modificar el &lt;em&gt;array&lt;/em&gt; que se está iterando. Como soluciones alternativas, se puede utilizar un &lt;em&gt;array&lt;/em&gt; auxiliar y sobreescribir el original una vez que ya se haya finalizado la iteración.  &lt;/p&gt;

&lt;p&gt;Pero más allá de el mal funcionamiento del código anterior, analicemos su &lt;strong&gt;expresividad&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Por cada persona:&lt;br /&gt;
  1.1. Verificar si supera o iguala los 25 años.&lt;br /&gt;
  1.2. Si no lo hace, remover del &lt;em&gt;array&lt;/em&gt; 1 posición comenzando en &lt;em&gt;index&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Por cada persona, imprimir el patrón (hay que prestar atención al código para entender que es “por cada persona que haya quedado en el &lt;em&gt;array&lt;/em&gt;”).  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No parece ser tan grave, pero seguimos teniendo conocimiento del &lt;em&gt;array&lt;/em&gt;, el &lt;em&gt;index&lt;/em&gt; y la lógica para realizar la comparación. Además, si quisiéramos reutilizar este código para quitar menores de edad, deberíamos duplicarlo.&lt;br /&gt;
Comencemos por atacar este segundo problema (al menos parte del mismo).&lt;/p&gt;

&lt;h3 id=&quot;funciones-que-crean-funciones&quot;&gt;Funciones que crean funciones&lt;/h3&gt;
&lt;p&gt;Esta es una característica de &lt;em&gt;Javascript&lt;/em&gt; que, bien utilizada, nos permite escribir código expresivo y altamente reutilizable.&lt;br /&gt;
Tomemos por ejemplo el siguiente código:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;older&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;olderThan25&lt;/em&gt; está devolviendo una función que recibe una persona y devuelve &lt;em&gt;true&lt;/em&gt; si la persona es mayor de (o tiene exactos) 25 años. Es decir que, al asignar el resultado de su ejecución a la variable &lt;em&gt;older&lt;/em&gt;, &lt;code&gt;older(person)&lt;/code&gt; realizará la evaluación antes mencionada.&lt;br /&gt;
Entonces,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;older&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;John Doe Jr.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;imprime &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Siguiendo este mismo concepto, podemos aún lograr un código más reutilizable e incluso más expresivo. Pasemos como parámetro el “umbral” de edad que queremos evaluar.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ahora, podemos crear cuantas funciones queramos con diferentes umbrales de edad, y nomenclarlas de forma tal que representen lo que hacen.&lt;br /&gt;
Aplicando al código anterior (que intentaba remover a los menores de 25 años):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;El código sigue sin funcionar (el problema descripto anteriormente sigue allí).&lt;/li&gt;
  &lt;li&gt;Si bien la legibilidad del código mejoró, se sigue leyendo “si la persona es mayor de 25, remover una posición del &lt;em&gt;array&lt;/em&gt; comenzando en &lt;em&gt;index&lt;/em&gt;”. Es decir que la expresividad sigue siendo similar.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;arrayprototypefilter&quot;&gt;Array.Prototype.filter&lt;/h3&gt;

&lt;p&gt;Afortunadamente, &lt;em&gt;Javascript&lt;/em&gt; nos da un método del &lt;em&gt;array&lt;/em&gt; que hace exactamente lo que queremos.&lt;br /&gt;
El método &lt;em&gt;filter&lt;/em&gt; recibe 2 parámetros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: La función que evalua la condición que decide si el elemento que está siendo iterado, debe pertenecer (deberá devolver &lt;em&gt;true&lt;/em&gt; si el elemento debe pertenecer al nuevo grupo, y &lt;em&gt;false&lt;/em&gt; en caso contrario).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (opcional): El objeto que será utilizado como &lt;em&gt;this&lt;/em&gt; dentro de la función &lt;em&gt;callback&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A su vez, &lt;em&gt;filter&lt;/em&gt; pasa a &lt;em&gt;callback&lt;/em&gt; 3 parámetros (al igual que lo hacía &lt;em&gt;forEach&lt;/em&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: El elemento que está siendo iterado.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: La posición de dicho elemento dentro del &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: El &lt;em&gt;array&lt;/em&gt; que está siendo iterado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A diferencia del &lt;em&gt;forEach&lt;/em&gt;, &lt;em&gt;filter&lt;/em&gt; devuelve un &lt;strong&gt;nuevo&lt;/strong&gt; &lt;em&gt;array&lt;/em&gt; con los elementos que pasen la prueba evaluada en &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Teniendo en cuenta este nuevo método, el siguiente código resuelve el requerimiento expresado anteriormente:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Respecto de su expresividad, puede ser leído como:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Filtrar las personas &lt;strong&gt;que no&lt;/strong&gt; sean mayores de 25 y por cada una imprimir el patrón.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Un problema de este método (respecto de su expresividad) es el nombre &lt;em&gt;filter&lt;/em&gt; (y/o el hecho de remueva el elemento cuando &lt;em&gt;callback&lt;/em&gt; devuelve &lt;em&gt;false&lt;/em&gt;). Eso haría que sea lea “filtrar los mayores de 25”, cuando en realidad se está haciendo lo contrario. &lt;em&gt;Nada es perfecto&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;cuida-tu-peso&quot;&gt;Cuida tu peso&lt;/h3&gt;

&lt;p&gt;Hemos logrado trabajar con cada persona de nuestro grupo, y realizar operaciones con cada una de ellas. Pero muchas veces, es necesario trabajar con el grupo como un todo.&lt;br /&gt;
Supongamos que &lt;em&gt;nuestras&lt;/em&gt; personas están subiendo a un ascensor. Por motivos de seguridad, los ascensores más modernos incluyen una balanza para asegurarse de que no se haya superado el peso máximo soportado por el mismo. Intentemos evitar la vergüenza de escuchar la chicharra indicando que nos hemos excedido y calculemos el peso total previamente:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Algunas observaciones acerca de este código:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Como vimos, &lt;em&gt;forEach&lt;/em&gt; recibe como primer parámetro una función. Hasta aquí, solíamos crear la función como un paso previo y pasar el nombre de la función como parámetro. Pero, como &lt;em&gt;function&lt;/em&gt; es una expresión que devuelve una función, la sintaxis de &lt;em&gt;Javascript&lt;/em&gt; nos permite definir la función directamente en el lugar donde escribiríamos el valor del parámetro. En particular, esta función no tiene nombre, lo que la convierte en una &lt;strong&gt;función anónima&lt;/strong&gt;. Los diferentes tipos de funciones y las diferentes formas de definirlas, ameritan un &lt;em&gt;post&lt;/em&gt; en sí mismo.&lt;/li&gt;
  &lt;li&gt;Como &lt;em&gt;forEach&lt;/em&gt; no devuelve nada, es necesario definir una variable externa que acumule el valor de la suma.&lt;/li&gt;
  &lt;li&gt;El código que vamos a generar, &lt;strong&gt;en mi opinión&lt;/strong&gt; no es &lt;em&gt;automáticamente&lt;/em&gt; más expresivo que el que ya generamos. Pero sin duda, se vuelve increíblemente entendible cuando comprendemos el significado e importancia de los métodos &lt;em&gt;map&lt;/em&gt; y &lt;em&gt;reduce&lt;/em&gt;.  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Paso a paso. Primero consideremos la sensibilidad de la gente respecto de su peso e intentemos mantener cierta confidencialidad. Obtengamos un nuevo &lt;em&gt;array&lt;/em&gt; que solo tenga los pesos de las personas de nuestro grupo.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Este código puede leerse de la siguiente manera:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Crear un array vacío llamado &lt;em&gt;weights&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Por cada persona, invocar una función que reciba a dicha persona y el índice de la misma en el &lt;em&gt;array&lt;/em&gt; original.&lt;/li&gt;
  &lt;li&gt;La función obtiene el peso de la persona y lo asigna a la posición indicada en el nuevo &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;imprime&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[ 176, 22, 127, 160 ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;arrayprototypemap&quot;&gt;Array.prototype.map&lt;/h3&gt;

&lt;p&gt;En general, llamamos al proceso de asociar los elementos de un conjunto, con los elementos de otro conjunto “&lt;a href=&quot;https://en.wikipedia.org/wiki/Map_(mathematics)&quot;&gt;mapear&lt;/a&gt;”, y el criterio de dicha asociación puede variar dependiendo la función utilizada.&lt;br /&gt;
Es decir, que el código que escribimos anteriormente “mapea las personas con/por su peso”.&lt;br /&gt;
Sería bueno poder escribir eso mismo en &lt;em&gt;Javascript&lt;/em&gt; de la siguiente manera:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;De hecho, definiendo &lt;em&gt;weight&lt;/em&gt; como una función que dada una persona, devuelva su peso, la línea anterior hace &lt;strong&gt;exactamente&lt;/strong&gt; lo que dice.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;El método &lt;em&gt;map&lt;/em&gt;, recibe los mismos 2 parámetros que &lt;em&gt;filter&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: La función que determina el criterio de asociación (deberá devolver el valor a mapear con cada elemento).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (opcional): El objeto que será utilizado como &lt;em&gt;this&lt;/em&gt; dentro de la función &lt;em&gt;callback&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A su vez, &lt;em&gt;map&lt;/em&gt; pasa a &lt;em&gt;callback&lt;/em&gt; 3 parámetros (al igual que lo hacían &lt;em&gt;forEach&lt;/em&gt; y &lt;em&gt;filter&lt;/em&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: El elemento que está siendo iterado.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: La posición de dicho elemento dentro del &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: El &lt;em&gt;array&lt;/em&gt; que está siendo iterado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;map&lt;/em&gt; devuelve un &lt;strong&gt;nuevo&lt;/strong&gt; &lt;em&gt;array&lt;/em&gt; con los elementos del segundo conjunto. En nuestro ejemplo, un &lt;em&gt;array&lt;/em&gt; con los pesos de las personas.  &lt;/p&gt;

&lt;p&gt;Ahora bien, volviendo a nuestro ejemplo, los pesos por separado no nos ayudan a determinar si es peligroso o no activar el ascensor. Aún debemos obtener el peso total.&lt;/p&gt;

&lt;p&gt;Si siguiéramos el enfoque anterior, pero aprovechando la función &lt;em&gt;map&lt;/em&gt;, nuestro código quedaría así:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Es decir que primero obtenemos el &lt;em&gt;array&lt;/em&gt; de pesos y luego lo iteramos realizando la acumulación. Es una pequeña (casi insignificante) mejora respecto de nuestra versión anterior.&lt;/p&gt;

&lt;h3 id=&quot;arrayprototypereduce&quot;&gt;Array.prototype.reduce&lt;/h3&gt;

&lt;p&gt;El término &lt;em&gt;reduce&lt;/em&gt; resulta, al menos para mi, poco descriptivo respecto del objetivo de este método. Otros lenguajes (asociados al paradigma &lt;em&gt;funcional&lt;/em&gt;) suelen referirse a esta función como &lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;&lt;em&gt;fold&lt;/em&gt;&lt;/a&gt;. Pero una buena forma de entenderlo es pensar en &lt;em&gt;reduce&lt;/em&gt; como “resumir”. Queremos encontrar un solo valor que &lt;em&gt;resuma&lt;/em&gt; de alguna manera a todos los demás. Por ejemplo, 10 resume a 4, 3, 2 y 1 si consideramos a la suma como forma de resumir. 24 resume a 4, 3, 2, 1 si consideramos a la multiplicación como forma de resumir.&lt;br /&gt;
Entonces, Definiendo &lt;em&gt;sum&lt;/em&gt; como&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;y considerando el siguiente código&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;se podría leer: resumir mediante la suma, el peso de las personas. O, sumar el peso de las personas.&lt;/p&gt;

&lt;p&gt;El método &lt;em&gt;reduce&lt;/em&gt;, recibe 2 parámetros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: La función que contiene la lógica de reducción (la forma de resumir).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;initialValue&lt;/em&gt; (opcional): El valor inicial del &lt;em&gt;acumulador&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A su vez, &lt;em&gt;reduce&lt;/em&gt; pasa a &lt;em&gt;callback&lt;/em&gt; 4 parámetros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;previousValue&lt;/em&gt;: El resultado de la última ejecución de &lt;em&gt;callback&lt;/em&gt; o &lt;em&gt;initialValue&lt;/em&gt; (la primera vez que se ejecuta).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;currentValue&lt;/em&gt;: El valor que está siendo iterado.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: La posición de dicho valor dentro del &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: El &lt;em&gt;array&lt;/em&gt; que está siendo iterado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;reduce&lt;/em&gt; devuelve un &lt;strong&gt;único&lt;/strong&gt; valor que coincide con el resultado de la última ejecución de &lt;em&gt;callback&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;Hay algunas características de &lt;em&gt;reduce&lt;/em&gt; que podrían catalogarlo como un método recursivo. En lugar de pensar a &lt;em&gt;reduce&lt;/em&gt; como una función que itera el &lt;em&gt;array&lt;/em&gt; aplicando &lt;em&gt;callback&lt;/em&gt;, podríamos pensarlo como una función que toma la primera posición del &lt;em&gt;array&lt;/em&gt; y aplica &lt;em&gt;callback&lt;/em&gt; pasando esta posición y el resultado de &lt;em&gt;reduce&lt;/em&gt; para un segundo &lt;em&gt;array&lt;/em&gt; que va desde la segunda hasta la última posición del primer &lt;em&gt;array&lt;/em&gt;. Al usarlo, esto es transparente, pero saberlo nos ayuda a entender cómo funciona, por qué &lt;strong&gt;acumula&lt;/strong&gt; y cómo funciona el &lt;em&gt;initialValue&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;una-visita-al-autocine&quot;&gt;Una visita al autocine&lt;/h3&gt;

&lt;p&gt;Las personas salieron del ascensor, subieron al auto y partieron con rumbo al auto-cine. Eligieron una película no apta para menores de 18 años. Al intentar ingresar, debemos preguntar si &lt;strong&gt;todas&lt;/strong&gt; las personas en el auto alcanzan dicha edad.&lt;br /&gt;
Hay muchas formas de lograrlo. Entre ellas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Iterar y preguntar  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;areOlder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;areOlder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Estamos utilizando la función &lt;em&gt;olderThan(threshold)&lt;/em&gt; para generar la función &lt;em&gt;olderThan18&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reducir mediante el operador lógico “Y”  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousOlder18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousOlder18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Mapear al &lt;em&gt;array&lt;/em&gt; de edades y reducir mediante el operador lógico “Y”  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousGreater18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousGreater18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greaterThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Es similar a la anterior, pero antes de &lt;em&gt;reducir&lt;/em&gt;, obtenemos el &lt;em&gt;array&lt;/em&gt; de edades (y por lo tanto, en lugar de utilizar una función que reciba una persona y compare su edad, utilizamos una similar pero que compare directamente la edad. &lt;em&gt;greaterThan18&lt;/em&gt; es generada de forma similar que &lt;em&gt;olderThan18&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Todas estas soluciones tienen un problema (u oportunidad de mejora): Evalúan todo el &lt;em&gt;array&lt;/em&gt; sin importar lo que ocurra. En nuestro caso, evaluando el segundo elemento podríamos concluir que no todas las personas son mayores de 18. En evaluaciones de expresiones &lt;em&gt;booleanas&lt;/em&gt; esto se conoce como “evaluación de cortocircuito”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;whatever&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;whatever&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En ambos casos, es innecesario evaluar &lt;em&gt;whatever&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Esto parece ser irrelevante en un &lt;em&gt;array&lt;/em&gt; de 4 elementos. Pero ¿qué pasaría si tuviéramos un colectivo, tren o avión intentando ingresar al auto-cine? Además del posible problema de espacio del predio, nuestras soluciones estarían ocupando ciclos de procesamiento innecesarios, lo que se conoce como &lt;strong&gt;mala performance&lt;/strong&gt;.&lt;br /&gt;
La forma de solucionar esto es &lt;em&gt;rompiendo&lt;/em&gt; las iteraciones cuando no es necesario seguir evaluando. La instrucción &lt;em&gt;break&lt;/em&gt; hace exactamente eso, pero no es aplicable a los métodos que estamos utilizando (es aplicable al &lt;em&gt;for&lt;/em&gt; clásico). Existen otras “técnicas” para salir de estos métodos, pero ninguna es elegante ni recomendable (por ejemplo, podríamos asignar “0” a &lt;em&gt;array.length&lt;/em&gt;, si no necesitaramos seguir trabajando con el &lt;em&gt;array&lt;/em&gt;. O hacer una copia del mismo, para poder cambiar el &lt;em&gt;length&lt;/em&gt; sin problemas. También podríamos &lt;em&gt;lanzar una excepción&lt;/em&gt; y &lt;em&gt;capturarla&lt;/em&gt; inmediatamente al salir del método).  &lt;/p&gt;

&lt;p&gt;Pero hay un motivo por el cual este problema se presenta al utilizar estos métodos. En el caso del &lt;em&gt;forEach&lt;/em&gt; el motivo es incluso explícito en el nombre de la función. &lt;strong&gt;Por cada&lt;/strong&gt; elemento de un &lt;em&gt;array&lt;/em&gt; implica que &lt;strong&gt;todos&lt;/strong&gt; los elementos van a ser iterados.&lt;/p&gt;

&lt;h3 id=&quot;every-some&quot;&gt;Every-Some&lt;/h3&gt;

&lt;p&gt;Volviendo al tema de la &lt;em&gt;expresividad&lt;/em&gt;, ninguna de las soluciones resultan demasiado expresivas (hagan el ejercicio de identificar lo que cada una está diciendo y lo que cada una está haciendo). El enunciado debería ser más sencillo. Verificar que todas las personas sean mayores de 18.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Esta solución dice y hace exactamente lo que buscamos. Devuelve &lt;em&gt;true&lt;/em&gt; si todas las personas son mayores de 18 años. Caso contrario, devuelve &lt;em&gt;false&lt;/em&gt;.&lt;br /&gt;
Además de ser altamente expresiva, &lt;em&gt;every&lt;/em&gt; respeta la evaluación de cortocircuito, es decir que dejará de iterar ni bien encuentre una persona que no cumpla la condición.&lt;/p&gt;

&lt;p&gt;El método &lt;em&gt;every&lt;/em&gt; recibe 2 parámetros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: La función que evalua la condición a cumplir (deberá devolver &lt;em&gt;true&lt;/em&gt; o &lt;em&gt;false&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (opcional): El objeto que será utilizado como &lt;em&gt;this&lt;/em&gt; dentro de la función &lt;em&gt;callback&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A su vez, &lt;em&gt;every&lt;/em&gt; pasa a &lt;em&gt;callback&lt;/em&gt; 3 parámetros (al igual que lo hacían los demás métodos):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: El elemento que está siendo iterado.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: La posición de dicho elemento dentro del &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: El &lt;em&gt;array&lt;/em&gt; que está siendo iterado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;every&lt;/em&gt; devuelve &lt;em&gt;true&lt;/em&gt; si todos los elementos iterados cumplieron con la condición, y &lt;em&gt;false&lt;/em&gt; si al menos un elemento no lo hace (y deja de iterar cuando lo encuentra).&lt;/p&gt;

&lt;h3 id=&quot;en-busca-de-una-pelcula-apta&quot;&gt;En busca de una película apta&lt;/h3&gt;

&lt;p&gt;Las restricciones de edad en las películas deben ser respetadas. Y si bien nuestras personas no  encontraron ninguna película apta para todo público, apareció un nuevo estreno que puede ser vista por menores con la supervisión de un adulto. Dejando de lado el criterio del adulto, escribamos la solución que nos permita evaluar si alguna persona es mayor de 18 años. Pero antes de comenzar a mostrar todas las alternativas (como hicimos con el caso anterior &lt;em&gt;every&lt;/em&gt;) pensemos ¿no existirá algún otro método que diga y haga lo estamos buscando?&lt;br /&gt;
Mi respuesta rápida es &lt;strong&gt;sí&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;El método &lt;em&gt;some&lt;/em&gt; recibe 2 parámetros:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: La función que evalua la condición a cumplir (deberá devolver &lt;em&gt;true&lt;/em&gt; o &lt;em&gt;false&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (opcional): El objeto que será utilizado como &lt;em&gt;this&lt;/em&gt; dentro de la función &lt;em&gt;callback&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A su vez, &lt;em&gt;some&lt;/em&gt; pasa a &lt;em&gt;callback&lt;/em&gt; 3 parámetros (al igual que lo hacían los demás métodos):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: El elemento que está siendo iterado.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: La posición de dicho elemento dentro del &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: El &lt;em&gt;array&lt;/em&gt; que está siendo iterado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;some&lt;/em&gt; devuelve &lt;em&gt;false&lt;/em&gt; si ningún elemento cumple con la condición, y &lt;em&gt;true&lt;/em&gt; si al menos un elemento lo hace (y deja de iterar cuando lo encuentra).&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;Como mencioné al comienzo del &lt;em&gt;post&lt;/em&gt;, la &lt;em&gt;expresividad&lt;/em&gt; es solo uno de muchos aspectos a considerar. Muchas veces, estos aspectos entran en conflicto y es necesario evaluar cuál prima.&lt;br /&gt;
Consideremos el siguiente problema: Debo obtener un &lt;em&gt;array&lt;/em&gt; con las personas con peso menor a 130 libras, que tengan más de 10 años.&lt;br /&gt;
Con todo lo que hemos visto, naturalmente podríamos pensar que la siguiente solución es ideal:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;softerThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La realidad es que esta solución no es ideal, tan solo es expresiva.&lt;br /&gt;
Al filtrar, estamos iterando el &lt;em&gt;array&lt;/em&gt;. Al filtrar 2 veces, estamos iterando 2 &lt;em&gt;arrays&lt;/em&gt;. Si &lt;em&gt;persons&lt;/em&gt; contiene N elementos y M son mayores de 10, la solución anterior recorrerá N + M elementos. La siguiente solución puede ser un poco menos expresiva pero nos asegura que solo se recorrerán N elementos:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan10AndsofterThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;considerando&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan10AndsofterThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;softerThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Al negociar un aspecto por otro, es necesario considerar el caso de uso. Si nuestros &lt;em&gt;arrays&lt;/em&gt; contienen familias (es decir, pocos elementos), quizá podamos darnos el lujo de tener el código más expresivo. Si estamos procesando el padrón electoral completo, mejor preocuparse por la &lt;em&gt;performance&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;conclusin&quot;&gt;Conclusión&lt;/h3&gt;

&lt;p&gt;La misma sintaxis de &lt;em&gt;Javascript&lt;/em&gt; nos permite trabajar con partes buenas de los paradigmas &lt;em&gt;estructurado&lt;/em&gt;, &lt;em&gt;orientado a objetos&lt;/em&gt; y &lt;em&gt;funcional&lt;/em&gt;. Las buenas prácticas de cada paradigma pueden favorecernos a la hora de mejorar algunos aspectos de nuestro código. En la mayoría de los casos, al mejorar un aspecto, estaremos empeorando otros (Ej: Mayor Expresividad -&amp;gt; Menor Performance). Muchas veces estos aspectos se conjugarán de formas más complejas (Ej: Mayor Performance y Buena Expresividad -&amp;gt; Poca Flexibilidad). Es parte de nuestro trabajo cuando escribimos una pieza de código, evaluar qué aspectos queremos favorecer y cuáles podemos castigar. La mayoría de las veces caeremos en la trampa y favoreceremos los aspectos que más nos gusten. Eso es algo a evitar. Para saber qué aspectos favorecer, la mejor opción es analizar el caso de uso.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Aug 2015 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2015/08/13/expressive-code-javscript/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2015/08/13/expressive-code-javscript/</guid>
        
        <category>javascript</category>
        
        <category>expressive</category>
        
        <category>code</category>
        
        <category>array</category>
        
        <category>prototype</category>
        
        <category>functions</category>
        
        <category>forEach</category>
        
        <category>map</category>
        
        <category>reduce</category>
        
        <category>filter</category>
        
        <category>every</category>
        
        <category>some</category>
        
        
      </item>
    
      <item>
        <title>Expressive code in Javascript</title>
        <description>&lt;p&gt;There are many (maybe too many) aspects to take care of when writing a piece of code: &lt;em&gt;performance, maintainability and readability&lt;/em&gt;, for mentioning a few of them.&lt;br /&gt;
One aspect I find particularly interesting is “expressiveness” which means “the ability of enunciate what is being done”.&lt;/p&gt;

&lt;p&gt;Since I am a &lt;em&gt;Javascript Hipster (“I loved it before it was catching on”)&lt;/em&gt; I would like to show some examples of how &lt;em&gt;Javascript&lt;/em&gt; lets us be really expressive working with &lt;em&gt;arrays&lt;/em&gt; (and some particular functions): &lt;em&gt;forEach, filter, map, reduce, every&lt;/em&gt; and &lt;em&gt;some&lt;/em&gt;.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;p&gt;Even though “Expressiveness” is an attribute often associated to the language, all of them let us be more or less expressive when writing different pieces of code that do the same. Because of that, it would be more precise to say that a piece of code is “expressive” if it is capable of really enunciate what is it doing.&lt;/p&gt;

&lt;p&gt;Let’s consider, for example, this group of people:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;John Doe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;176&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;John Doe Jr.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Jane Doe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Julian Doe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;weight&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s traverse this &lt;em&gt;array&lt;/em&gt; and, for each person, print “&lt;em&gt;Name&lt;/em&gt; is &lt;em&gt;age&lt;/em&gt; years old”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; - &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This piece of code is fairly straightforward, short and readable enough. Though, that doesn’t make it necessarily &lt;strong&gt;expressive&lt;/strong&gt;. What we were trying to do: Print “&lt;em&gt;Name&lt;/em&gt; is &lt;em&gt;age&lt;/em&gt; years old” per each person. This is what our code is actually saying:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Initialize a variable named &lt;em&gt;i&lt;/em&gt; with the value &lt;em&gt;0&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;As long as the variable is lower than the persons quantity, increment it and run the following code block:&lt;br /&gt;
  2.1. Get the name of the person at the index equals to the previously initialized variable.&lt;br /&gt;
  2.2. Concatenate a space, a hyphen and then another space.&lt;br /&gt;
  2.3. Concatenate the age of the person at the index equals to the previously initialized variable.&lt;br /&gt;
  2.4. Log the result on the console.  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s start by extracting the code inside the &lt;em&gt;for&lt;/em&gt; to a function receiving a &lt;em&gt;person&lt;/em&gt; as parameter. The function prints the specified pattern.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; - &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you are now thinking “this is not even related to &lt;em&gt;Javascript&lt;/em&gt; and its &lt;em&gt;arrays&lt;/em&gt; functions”, you are right. &lt;em&gt;All you need is to have a little patience&lt;/em&gt;.&lt;br /&gt;
We just &lt;em&gt;encapsulated&lt;/em&gt; a functionality in order to hide it complexity. Even though &lt;em&gt;encapsulation&lt;/em&gt; is a concept mainly related to the Object Oriented Programming paradigm, it can be achieved in so many different ways and &lt;em&gt;functions&lt;/em&gt; are an ancient way of doing it. The goal of &lt;em&gt;encapsulating&lt;/em&gt; code is not to make it more expressive, but it does it in most of the cases as a collateral effect.&lt;/p&gt;

&lt;p&gt;If we read the new code (skipping the new function description):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Initialize a variable named  &lt;em&gt;i&lt;/em&gt; with the value &lt;em&gt;0&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;As long as the variable is lower to the persons quantity, increment it and&lt;/li&gt;
  &lt;li&gt;Print the pattern for the person at the index equals to the previously initialized variable.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;arrayprototypeforeach&quot;&gt;Array.Prototype.forEach&lt;/h3&gt;
&lt;p&gt;Though the code has turned into something a little bit more expressive, it seems to be more concerned for the variable &lt;em&gt;i&lt;/em&gt;, its initialization and limit than focused on the person itself.
Fortunately, there are other ways of traversing an &lt;em&gt;array&lt;/em&gt;. For example, the  &lt;code&gt;Array.prototype.forEach(function)&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we read this new code:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For each person, print the pattern.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This way, this piece of code &lt;em&gt;does&lt;/em&gt; and &lt;em&gt;expresses&lt;/em&gt; exactly what we want it to.
However, regardless reading it is much simpler, it’s necessary to understand what’s going on behind the curtain.&lt;br /&gt;
For starter, something to highlight about &lt;em&gt;Javascript&lt;/em&gt; is that &lt;em&gt;everything (or almost everything) is a message.&lt;/em&gt; This means that objects, functions, methods and values are messages (or expressions) and hence, can be passed as parameters.
Unlike the &lt;em&gt;for&lt;/em&gt; that is a statement, the &lt;em&gt;forEach&lt;/em&gt; is a method belonging to the object &lt;em&gt;Array&lt;/em&gt; (or its &lt;em&gt;prototype&lt;/em&gt;). Combining these concepts, &lt;em&gt;forEach&lt;/em&gt; traverses the &lt;em&gt;array&lt;/em&gt; and invokes the function it received as parameter, on each iteration. During that invocation &lt;em&gt;forEach&lt;/em&gt; passes to the other function, the element that is being iterated.
This could be a homemade &lt;em&gt;forEach&lt;/em&gt; impleentation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Additionally &lt;em&gt;forEach&lt;/em&gt; receives a second (and optional) parameter that represents a function that will be invoked when the &lt;em&gt;array&lt;/em&gt; traversing is over.
This could look useless for the examples we are working on, however, it becomes essential when working on an asynchronous development scenario (as you would have working with &lt;a href=&quot;http://nodejs.org&quot;&gt;NodeJS&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There are 2 other parameters that &lt;strong&gt;&lt;em&gt;forEach&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;passes to the other function&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: The index of the element being iterated.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: The full &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;forEach&lt;/em&gt; does not return any result, but it’s possible to modify the &lt;em&gt;array&lt;/em&gt; being iterated inside the function it calls (we will learn that it must be done carefully).&lt;/p&gt;

&lt;h3 id=&quot;not-suitable-for-under-25s&quot;&gt;Not suitable for under 25s&lt;/h3&gt;
&lt;p&gt;Let’s suppose that a really exclusive bar is not suitable for under 25s. We could try to write a piece of code that removes from the &lt;em&gt;array&lt;/em&gt; those people that don’t match that criteria. The piece of code looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&quot;&gt;&lt;em&gt;splice&lt;/em&gt;&lt;/a&gt; is useful for removing elements from an &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If we run this code, we will get the following output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;John Doe - 27&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Jane Doe - 24&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Julian Doe - 32&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For some reason, Jane Doe successfully beat our bar’s security and slunk. That reason is cause of countless &lt;em&gt;bugs&lt;/em&gt; on countless pieces of code.&lt;br /&gt;
On each iteration &lt;em&gt;index&lt;/em&gt; is incremented by 1. First time (&lt;em&gt;index=0&lt;/em&gt;) we find John Doe, 27 years old. It is kept in the &lt;em&gt;array&lt;/em&gt;. Second time (&lt;em&gt;index=1&lt;/em&gt;) we find John Doe Jr, 3 years old (who, of course, &lt;em&gt;shall not pass&lt;/em&gt;). When we remove him from the &lt;em&gt;array&lt;/em&gt; Jane Doe is moved to the &lt;em&gt;index 1&lt;/em&gt; and Julian Doe to the &lt;em&gt;index 2&lt;/em&gt;. Third time (&lt;em&gt;index=2&lt;/em&gt;) Julian Doe appears. This means that Jane Doe has been skipped. &lt;strong&gt;It’s like if the security guy turned away each time he pull someone away from the bar, and at that moment let anybody go in regardless its age.&lt;/strong&gt;
It’s usually not a good idea to modify the &lt;em&gt;array&lt;/em&gt; being iterated. As a workaround we could use an auxiliary &lt;em&gt;array&lt;/em&gt; and overwrite the original once the iteration is over.&lt;/p&gt;

&lt;p&gt;Regardless of the previous code malfunctioning, let’s analyze its &lt;strong&gt;expressivity&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For each person:&lt;br /&gt;
  1.1. Check if it’s age is greater or equals than 25.&lt;br /&gt;
  1.2. If it isn’t, remove 1 position from the &lt;em&gt;array&lt;/em&gt; starting at &lt;em&gt;index&lt;/em&gt;.  &lt;/li&gt;
  &lt;li&gt;For each person, print the pattern (special care to the code in order to understand that it means “for each person that has been kept in the &lt;em&gt;array&lt;/em&gt;).  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It doesn’t seem to be that bad, but we are still aware of the &lt;em&gt;array&lt;/em&gt;, the &lt;em&gt;index&lt;/em&gt; and the comparison logic. Furthermore, if we wanted to reuse this code for removing people younger than 18 we would need to duplicate it.
Let’s start by tackling this second issue&lt;/p&gt;

&lt;h3 id=&quot;functions-creating-functions&quot;&gt;Functions creating functions&lt;/h3&gt;
&lt;p&gt;This is a &lt;em&gt;Javascript&lt;/em&gt; feature that, properly used, allows us to write expressive and highly reusable code.
Let’s take this code as an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;older&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;olderThan25&lt;/em&gt; is returning a function that receives a person and returns &lt;em&gt;true&lt;/em&gt; if that person is older than 25. It means that, when we assign the result of its execution to the &lt;em&gt;older&lt;/em&gt; variable, &lt;code&gt;older(person)&lt;/code&gt; will perform the previously mentioned evaluation.&lt;br /&gt;
Thus,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;older&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;John Doe Jr.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;outputs &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Applying this same concept we can achieve a more reusable and even more expressive piece of code. Let’s pass the “age threshold” we want to evaluate as a parameter&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can create as many functions we want with different thresholds and name these in a way that represent what it’s being done.&lt;br /&gt;
Applied to the previous code (that was trying to remove people younger than 25):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The code is still not working (the problem described above is still there).&lt;/li&gt;
  &lt;li&gt;Even though the readability has improved, it’s still being read as “if the person is older than 25, remove 1 position from the &lt;em&gt;array&lt;/em&gt; starting at &lt;em&gt;index&lt;/em&gt;”. Expressivity is almost the same.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;arrayprototypefilter&quot;&gt;Array.Prototype.filter&lt;/h3&gt;

&lt;p&gt;Fortunately &lt;em&gt;JavaScript&lt;/em&gt; gives us an &lt;em&gt;array&lt;/em&gt; method that does exactly what we are looking for.
The &lt;em&gt;filter&lt;/em&gt; method receives 2 parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: The function that evaluates the condition that defines if the element being iterated belongs to the set. It needs to return &lt;em&gt;true&lt;/em&gt; if the element belongs, and &lt;em&gt;false&lt;/em&gt; otherwise.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (optional): The object that will be used as &lt;em&gt;this&lt;/em&gt; inside the &lt;em&gt;callback&lt;/em&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the same time,  &lt;em&gt;filter&lt;/em&gt; passes 3 parameters to &lt;em&gt;callback&lt;/em&gt; (the same way &lt;em&gt;forEach&lt;/em&gt; does):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: The element being iterated.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: The position of that element inside the &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: The &lt;em&gt;array&lt;/em&gt; being iterated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unlike the &lt;em&gt;forEach&lt;/em&gt;, &lt;em&gt;filter&lt;/em&gt; does return a &lt;strong&gt;new&lt;/strong&gt; &lt;em&gt;array&lt;/em&gt; with the elements that match the test performed by &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Considering this new method, the next piece of code solves the requirement:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;printPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;About its expressivity, it could be read as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Filter those persons &lt;strong&gt;not&lt;/strong&gt; older than 25 and print the pattern for each one.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An issue about this method expressivity is its name &lt;em&gt;filter&lt;/em&gt; (and/or the fact that it removes the element when &lt;em&gt;callback&lt;/em&gt; returns &lt;em&gt;false&lt;/em&gt;). This would make us to read “filter older than 25”, when we are doing exactly the opposite. &lt;em&gt;Well, nothing is perfect&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;watch-your-weight&quot;&gt;Watch your weight&lt;/h3&gt;

&lt;p&gt;We have succeeded at working with each person in our group and performing operations with each one of them. But lot of times we’ll need to work with the group as a whole.&lt;br /&gt;
Let’s suppose that &lt;em&gt;our&lt;/em&gt; persons are stepping into an elevator. For security reasons, moderns elevators use a scale in order to make sure that the maximum allowed weight is not exceeded. Let’s try to avoid the shame of hearing the buzzer and calculate the total weight in advance:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some observations about this code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As we have seen, &lt;em&gt;forEach&lt;/em&gt; receives a function as its first parameter. This far, we used to create the function as a previous step and pass its name as parameter. However, since &lt;em&gt;function&lt;/em&gt; is an expression that returns a function, &lt;em&gt;Javascript&lt;/em&gt; syntax lets us to define the function in place. This function in particular has no name. These kind of functions are called &lt;strong&gt;anonymous functions&lt;/strong&gt;. Functions categorization would worth its own post.&lt;/li&gt;
  &lt;li&gt;Since &lt;em&gt;forEach&lt;/em&gt; is not returning any value, it’s necessary to define an external variable that accumulates the successive sums.&lt;/li&gt;
  &lt;li&gt;The code we are going to write is not &lt;em&gt;automatically&lt;/em&gt; more expressive than the one we wrote above (&lt;strong&gt;IMO&lt;/strong&gt;), but doubtless, it turns amazingly easy to get when we understand the meaning and importance of &lt;em&gt;map&lt;/em&gt; and &lt;em&gt;reduce&lt;/em&gt; methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step by step. Let’s first consider how sensitive people are about their weight and let’s try to keep it confidential. Let’s obtain a new &lt;em&gt;array&lt;/em&gt; that only contains the weight of the people in our group.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weights&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code can be read as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Declare an empty &lt;em&gt;weights&lt;/em&gt; array.&lt;/li&gt;
  &lt;li&gt;For each person, invoke a function that receives the person and its index inside the original &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The function gets the person weight and assign it to that index but in the new &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weights&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;outputs&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[ 176, 22, 127, 160 ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;arrayprototypemap&quot;&gt;Array.prototype.map&lt;/h3&gt;

&lt;p&gt;In general, we call “&lt;a href=&quot;https://en.wikipedia.org/wiki/Map_(mathematics)&quot;&gt;to map&lt;/a&gt;” to the process of associating elements from one set with elements from a different set. This means that the code above “maps people with/by their corresponding weights”.
It would be nice to be able to write that same thing in &lt;em&gt;Javascript&lt;/em&gt; the following way:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a matter of fact, if we defined &lt;em&gt;weight&lt;/em&gt; as a function that returns the weight of a person, the code above does &lt;strong&gt;exactly&lt;/strong&gt; what it says.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;map&lt;/em&gt; method receives the same 2 parameters than &lt;em&gt;filter&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: The function that determines the association criteria (it must return the value to map to each element).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (optional): The object that will be used as &lt;em&gt;this&lt;/em&gt; inside the &lt;em&gt;callback&lt;/em&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the same time &lt;em&gt;map&lt;/em&gt; passes 3 parameters to &lt;em&gt;callback&lt;/em&gt; (the same way &lt;em&gt;forEach&lt;/em&gt; and &lt;em&gt;filter&lt;/em&gt; do):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: The element being iterated.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: The &lt;em&gt;index&lt;/em&gt; of that element in the &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: The &lt;em&gt;array&lt;/em&gt; being iterated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;map&lt;/em&gt; returns a &lt;strong&gt;new&lt;/strong&gt; &lt;em&gt;array&lt;/em&gt; with the elements of the second set. In our case it returns an &lt;em&gt;array&lt;/em&gt; with people weights.  &lt;/p&gt;

&lt;p&gt;Going back to our example, each weight doesn’t help us to determine whether is dangerous to activate the elevator or not. We still need to get the total weight.&lt;/p&gt;

&lt;p&gt;Following the previous approach, and taking advantage of the &lt;em&gt;map&lt;/em&gt; function, our code would look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalWeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It means that we first get the weights &lt;em&gt;array&lt;/em&gt; and then we iterate it performing the sum. This is a small (almost trivial) improvement in comparison with our last version.&lt;/p&gt;

&lt;h3 id=&quot;arrayprototypereduce&quot;&gt;Array.prototype.reduce&lt;/h3&gt;

&lt;p&gt;The term &lt;em&gt;reduce&lt;/em&gt; is, IMO, not too much descriptive in regards to the goal of this method. Other languages (associated to the &lt;em&gt;functional&lt;/em&gt; paradigm) usually refers to this function as &lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;&lt;em&gt;fold&lt;/em&gt;&lt;/a&gt;. A good approach to understand it is to think about &lt;em&gt;reduce&lt;/em&gt; as “summarize”. We want to find a single value that &lt;em&gt;summarizes&lt;/em&gt; every other values. For example, 10 summarizes 4, 3, 2 and 1 if we consider the addition as a way of summarizing. 24 summarizes 4, 3, 2, 1 if we consider multiplication as a way of summarizing.&lt;br /&gt;
So, defining sum as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and considering the following piece of code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;we could read: summarize by sum the weight of the people. Or, sum the weight of the people.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;reduce&lt;/em&gt; method receives 2 parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: The function containing the reduction logic (the way of summarizing).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;initialValue&lt;/em&gt; (optional): The initial value of the &lt;em&gt;acummulator&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the same time, &lt;em&gt;reduce&lt;/em&gt; passes 4 parameters to &lt;em&gt;callback&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;previousValue&lt;/em&gt;: The result of &lt;em&gt;callback&lt;/em&gt; last execution, or &lt;em&gt;initialValue&lt;/em&gt; (the first time it’s executed).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;currentValue&lt;/em&gt;: The value being iterated.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: The position of that value inside the &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: The &lt;em&gt;array&lt;/em&gt; being iterated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;reduce&lt;/em&gt; returns an &lt;strong&gt;only&lt;/strong&gt; value that matches the result of &lt;em&gt;callback&lt;/em&gt; last execution.  &lt;/p&gt;

&lt;p&gt;There are some qualities of &lt;em&gt;reduce&lt;/em&gt; that could label it as a recursive method. Instead of thinking &lt;em&gt;reduce&lt;/em&gt; as a function that iterates the &lt;em&gt;array&lt;/em&gt; applying &lt;em&gt;callback&lt;/em&gt;, we could think about it as a function that takes the &lt;em&gt;array&lt;/em&gt; first position and applies &lt;em&gt;callback&lt;/em&gt; passing the current position and the result of &lt;em&gt;reduce&lt;/em&gt; for a second &lt;em&gt;array&lt;/em&gt; that goes from the original &lt;em&gt;array&lt;/em&gt; second position to the last one. This is meaningless when using it, but knowing this, will help us to understand how it works, why it &lt;strong&gt;accumulates&lt;/strong&gt; and how the &lt;em&gt;initialValue&lt;/em&gt; works.&lt;/p&gt;

&lt;h3 id=&quot;a-visit-to-the-drive-in-cinema&quot;&gt;A visit to the drive-in cinema&lt;/h3&gt;

&lt;p&gt;People get out of the elevator, jumped into the car and drove to the drive-in cinema. They choose a not suitable for under 18s movie. We need to figure out if &lt;strong&gt;every&lt;/strong&gt; person in the car matches the criteria.&lt;/p&gt;

&lt;p&gt;There are several ways of achieving this. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Iterate and query  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;areOlder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;areOlder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We are using the &lt;em&gt;olderThan(threshold)&lt;/em&gt; in order to generate the function &lt;em&gt;olderThan18&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reduce by applying the logical “AND”&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousOlder18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousOlder18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Mapping the ages &lt;em&gt;array&lt;/em&gt; and reduce by applying the logical “AND”&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousGreater18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isPreviousGreater18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greaterThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This one is similar to the previous one, but before &lt;em&gt;reducing&lt;/em&gt; we get the ages &lt;em&gt;array&lt;/em&gt; and hence, instead of using a function that receives a person and compares it age, we are now using a similar one that simply compares the age. &lt;em&gt;greaterThan18&lt;/em&gt; is generated in a similar way than &lt;em&gt;olderThan18&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;All these solutions have the same problem (or improvement opportunity): These are evaluating the entire &lt;em&gt;array&lt;/em&gt; regardless what happens with each element. In our case, evaluating the second element we could tell that not every people are older than 18. In &lt;em&gt;boolean&lt;/em&gt; evaluations, this is known as “short circuit evaluation”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;whatever&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;whatever&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In both cases, evaluating &lt;em&gt;whatever&lt;/em&gt; is useless.&lt;/p&gt;

&lt;p&gt;This seems to be meaningless in a 4 elements &lt;em&gt;array&lt;/em&gt;. However, what would happen if we had a bus, train, or plain trying to enter the drive-in cinema? Aside from the probable venue space issue, our solutions would be using unnecesary processing cycles A.K.A &lt;strong&gt;bad performance&lt;/strong&gt;.&lt;br /&gt;
The way of solving this issue is &lt;em&gt;breaking&lt;/em&gt; the iterations when evaluation is no longer needed. The instruction &lt;em&gt;break&lt;/em&gt; does exactly that, but is not suitable for the methods we are using (as it is for the classic &lt;em&gt;for&lt;/em&gt;). There are other “techniques” for quitting these methods, but none of them is smart nor recommended (for example, we could assign 0 to the &lt;em&gt;array.length&lt;/em&gt; if we didn’t need to keep working with the &lt;em&gt;array&lt;/em&gt;. We could also make a copy of that &lt;em&gt;array&lt;/em&gt; if we wanted to change its length without any problem. Or we could just &lt;em&gt;throw an exception&lt;/em&gt; and &lt;em&gt;catch it&lt;/em&gt; immediately after the method call).&lt;/p&gt;

&lt;p&gt;But there is a reason for this problem to appear when using these methods. On the &lt;em&gt;forEach&lt;/em&gt; case, that reason is even explicit at its name. &lt;em&gt;For Each&lt;/em&gt; element in the &lt;em&gt;array&lt;/em&gt; implies that &lt;em&gt;all&lt;/em&gt; of its elements will be iterated.&lt;/p&gt;

&lt;h3 id=&quot;every-some&quot;&gt;Every-Some&lt;/h3&gt;

&lt;p&gt;Going back to the &lt;strong&gt;expressiveness&lt;/strong&gt; topic, none of our solutions turned to be too much expressive (do the exercise yourselves of identifying what is being said by each one and what is being done). The statement should be simpler. Verify that every person is older than 18.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This solution says and does exactly what we are looking for. It returns &lt;em&gt;true&lt;/em&gt; if every people in the array are older than 18. Otherwise, it returns &lt;em&gt;false&lt;/em&gt;.
In addition of being highly expressive, &lt;em&gt;every&lt;/em&gt; respects the short circuit evaluation. This means that it will stop iterating as soon as it founds a not matching person.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;every&lt;/em&gt; method receives 2 parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: The function evaluating the condition to match (it must return &lt;em&gt;true&lt;/em&gt; or &lt;em&gt;false&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (optional): The object that will be used as &lt;em&gt;this&lt;/em&gt; inside the &lt;em&gt;callback&lt;/em&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the same time, &lt;em&gt;every&lt;/em&gt; passes 3 parameters to &lt;em&gt;callback&lt;/em&gt; (the same way that the other methods do):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: The element being iterated.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: The &lt;em&gt;index&lt;/em&gt; of that element inside the &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: The &lt;em&gt;array&lt;/em&gt; being iterated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;every&lt;/em&gt; returns &lt;em&gt;true&lt;/em&gt; if all its elements match the condition, or &lt;em&gt;false&lt;/em&gt; as soon as it find one element that doesn’t.&lt;/p&gt;

&lt;h3 id=&quot;looking-for-a-suitable-movie&quot;&gt;Looking for a suitable movie&lt;/h3&gt;

&lt;p&gt;Movies age restrictions must be observed. Although our people didn’t find any “suitable for all audiences”, a new release has just appeared and it can be watched even by children with adult supervision. Putting aside these adults criteria, let’s write a solution that evaluates if at least one person is older than 18. Before showing all the alternatives (the way we did for the previous scenario &lt;em&gt;every&lt;/em&gt;), let’s think: wouldn’t exist any other method capable of saying and doing what we are looking for?
The short answer is &lt;strong&gt;yes&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;some&lt;/em&gt; method receives 2 parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;callback&lt;/em&gt;: The function evaluating the condition to match (it must return &lt;em&gt;true&lt;/em&gt; or &lt;em&gt;false&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;contextObject&lt;/em&gt; (optional): The object that will be used as &lt;em&gt;this&lt;/em&gt; inside the &lt;em&gt;callback&lt;/em&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the same time, &lt;em&gt;every&lt;/em&gt; passes 3 parameters to &lt;em&gt;callback&lt;/em&gt; (the same way that the other methods do):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;element&lt;/em&gt;: The element being iterated.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;index&lt;/em&gt;: The &lt;em&gt;index&lt;/em&gt; of that element inside the &lt;em&gt;array&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;array&lt;/em&gt;: The &lt;em&gt;array&lt;/em&gt; being iterated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;some&lt;/em&gt; returns &lt;em&gt;false&lt;/em&gt; if none of its elements matches the condition, or &lt;em&gt;false&lt;/em&gt; as soon as it find one element that does.&lt;/p&gt;

&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;

&lt;p&gt;As I mentioned at the very beginning, &lt;em&gt;expressivity&lt;/em&gt; is just one of many aspects that must be considered. Many times this aspects run into conflict and it’s necessary to evaluate which one is the most important.&lt;br /&gt;
Let’s consider the following problem: I must get an &lt;em&gt;array&lt;/em&gt; with people with weight under 130 pounds and older than 10.
Using what we have seen, we could naturally think that the following solution is the ideal one:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;softerThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a matter of fact, this solution is not ideal. It’s just expressive.
When filtering, we are iterating the &lt;em&gt;array&lt;/em&gt;. When filtering twice, we are iterating 2 &lt;em&gt;arrays&lt;/em&gt;. If &lt;em&gt;persons&lt;/em&gt; contains N elements and M are older than 10, the solution will iterate N + M elements. The following solution might be a little bit less expressive, but we can be sure that only N elements will be iterated:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;persons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;olderThan10AndsofterThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;considering&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan10AndsofterThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;olderThan10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;softerThan130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When compromising aspects, it’s necessary to consider the use case. If our &lt;em&gt;arrays&lt;/em&gt; are containing families (a few elements), we might allow ourselves to have the most expressive code. But if we were processing the entire electoral roll, we should better worry about the &lt;em&gt;performance&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Javascript&lt;/em&gt; syntax is powerful enough to let us work with the good parts of the &lt;em&gt;procedural&lt;/em&gt;, &lt;em&gt;object oriented&lt;/em&gt; and &lt;em&gt;functional&lt;/em&gt; paradigms. Good practices of each paradigm could give us advantages when trying to improve some aspect of our code. Most of the times, when improving one aspect, we will be worsening others (For example: More Expressivity -&amp;gt; Less Performance). In occasions, these aspects will be related in more complex ways (For example: More Performance and Good Expressivity -&amp;gt; Less Flexibility). It’s part of our job when writing a piece of code, to evaluate which aspects we want to favor and which ones we will be punishing. Most of the times we will jump into the pitfall and favor those aspects that we like the most. That’s something to avoid. In order to know which aspects should be improved, the best option is to consider the use case.&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Aug 2015 00:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//en/2015/08/13/expressive-code-javscript/</link>
        <guid isPermaLink="true">http://ourbit.github.io//en/2015/08/13/expressive-code-javscript/</guid>
        
        <category>javascript</category>
        
        <category>expressive</category>
        
        <category>code</category>
        
        <category>array</category>
        
        <category>prototype</category>
        
        <category>functions</category>
        
        <category>forEach</category>
        
        <category>map</category>
        
        <category>reduce</category>
        
        <category>filter</category>
        
        <category>every</category>
        
        <category>some</category>
        
        
      </item>
    
      <item>
        <title>Mudanza a GitHubPages</title>
        <description>&lt;p&gt;Con estas (no tan) recientes ganas de volver a escribir en ourBit me di cuenta de que las herramientas provistas por &lt;em&gt;blogger de Google&lt;/em&gt; no eran suficientes, o al menos, no cumplían los requerimientos que, en mi opinión, una plataforma de &lt;em&gt;blogging&lt;/em&gt; debe tener.
&lt;!--MORE--&gt;  &lt;/p&gt;

&lt;p&gt;Luego de investigar un poco otras herramientas que podían ayudarme en esta tarea (&lt;em&gt;Wordpress, Joomla&lt;/em&gt;, etc), llegué a la conclusión de que, por diferentes motivos, ninguna de estas iba a cumplir mis expectativas. Y básicamente me inclino a pensar que el motivo es que, si bien son buenas plataformas, apuntan a un usuario general no tan especializado como para utilizar otro tipo de herramientas.  &lt;/p&gt;

&lt;p&gt;Es así como recordé haber usado &lt;em&gt;Jekyll y GitHub Pages&lt;/em&gt; para construir alguna página estática en el pasado, y comencé a evaluarlo como alternativa.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definitivamente, &lt;em&gt;Jekyll&lt;/em&gt; no provee mejores herramientas que las otras plataformas&lt;/strong&gt;. No tiene comentarios, no crea un blog en minutos con sus correspondientes archivos, templates aplicables con solo un click, etc. Lo que termina primando aquí es la &lt;strong&gt;fléxibilidad&lt;/strong&gt;, lo cual la convierte en &lt;strong&gt;una herramienta candidata para desarrolladores&lt;/strong&gt; (u otros profesionales con conocimientos suficientes de IT) para ser su “plataforma” de &lt;em&gt;blogging&lt;/em&gt; a la medida.  &lt;/p&gt;

&lt;p&gt;El tiempo de adopción fue de apróximadamente 1 hora (si, nada más). En mi caso, ya contaba con algo de experiencia y fue solo cuestión de refrescar algunos conceptos, buscar algunos detalles de configuración y salir andando. Bueno, casi. Una vez que tenía todo funcionando, me puse a pensar en el diseño. No quería nada lujoso, pero si algo que fuera cómodo para el lector (y obviamente, respondiera a mis gustos personales). Pero claro, mis habilidades como diseñador son casi nulas, por lo cual decidí buscar &lt;em&gt;templates (o themes)&lt;/em&gt; gratuitos y adaptar mínimamente alguno. Me encontré con &lt;a href=&quot;https://github.com/IronSummitMedia/startbootstrap-clean-blog&quot;&gt;CleanBlog&lt;/a&gt; de &lt;a href=&quot;https://github.com/davidtmiller&quot;&gt;David Miller&lt;/a&gt; a quien agradezco por haber disponibilizado este material. Adaptarlo y aplicarlo al blog que ya estaba funcionando fue cuestión de minutos.&lt;/p&gt;

&lt;p&gt;¿Qué me hace elegir &lt;em&gt;Jekyll y GitHub Pages&lt;/em&gt;?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La posibilidad de contar con herramientas &lt;em&gt;Open Source&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Libre de publicidad: Esto es gratuito sin letra chica.&lt;/li&gt;
  &lt;li&gt;Flexibilidad y Extensibilidad: Puedo desarrollar plugins y herramientas sobre la plataforma.&lt;/li&gt;
  &lt;li&gt;Simpleza: Crear Posts es tan simple como escribir en un archivo de texto y seguir el flujo normal de GitHub para publicar.&lt;/li&gt;
  &lt;li&gt;Capacidad de Recibir &lt;em&gt;Pull Requests&lt;/em&gt;: Me interesa que cualquier lector pueda sugerir correcciones, o incluso, publicar en este blog. &lt;strong&gt;Espero Pull Requests con sus Posts&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Soporte a &lt;em&gt;Markdown&lt;/em&gt;: Esto quizá es un gusto personal. Pero encuentro muy simple y conveniente escribir en &lt;em&gt;Markdown&lt;/em&gt; en lugar de lidiar con editores &lt;em&gt;WYSIWYG&lt;/em&gt; que terminan fallando cuando quiero ir más allá que las opciones soportadas.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Highlight&lt;/em&gt; de código: Escencial para un Blog dónde haya snippets.  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Bienvenidos al nuevo OurBit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Estas son solo algunas razones. Pero cada uno debería tener las suyas. Ante la duda, inviertan 1 hora en aprender a usarlo (quizá no los convenza como herramienta de &lt;em&gt;Blogging&lt;/em&gt;, pero no está demás saber como funciona &lt;em&gt;Jekyll y GitHub Pages&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Les dejo algunos links para comenzar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si tienen dudas, espero su contacto.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Aug 2015 15:43:21 -0300</pubDate>
        <link>http://ourbit.github.io//es/jekyll/update/2015/08/03/moving-to-gh-pages/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/jekyll/update/2015/08/03/moving-to-gh-pages/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Moving to GitHub Pages</title>
        <description>&lt;p&gt;With this (not that) recent desires of writing at ourBit again, I realized that the tools provided by &lt;em&gt;blogger by Google&lt;/em&gt; were not good enough or didn’t fulfill requirements that, in my opinion, should be provided by a &lt;em&gt;blogging&lt;/em&gt; platform out of the box&lt;!--MORE--&gt;.  &lt;/p&gt;

&lt;p&gt;After researching other tools that could help me with this task (&lt;em&gt;Wordpress, Joomla&lt;/em&gt;, etc), I concluded that non of these would meet my expectations by one reason or another. Basically, I am biased to think that the main reason is that, even though these are good platforms, all of them are targeted to a user not specialized enogh for using another kind of tools.  &lt;/p&gt;

&lt;p&gt;That’s how I remembered having used &lt;em&gt;Jekyll and GitHub Pages&lt;/em&gt; in the past, for building some static page, and so I started evaluating it as an alternative.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Jekyll&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;is definitively not providing better tools than the other platforms&lt;/strong&gt;. It doesn’t count with a comments feature, it doesn’t create a new blog in minutes with its corresponding archives, one-click-apply templates, etc. What ends up being a priority here is the &lt;strong&gt;flexibility&lt;/strong&gt;, which turns &lt;em&gt;Jekyll&lt;/em&gt; into a &lt;strong&gt;candidate tool for developers&lt;/strong&gt; (or other professionals with IT knowledge enough) to becoming their tailored &lt;em&gt;blogging&lt;/em&gt; “platform”.  &lt;/p&gt;

&lt;p&gt;The ramp up time was about 1 hour (nothing more). In my case, I already had some experience so it was just a matter of revisiting some concepts, looking for some configuration details and start rolling. Well, almost. Once I had everything working, I started to think about the design. I didn’t want anything fancy but comfortable to read (and obviously, I wanted something that matches my personal tastes). Well, my design skills are close to null, hence, I decided to look for free &lt;em&gt;templates (or themes)&lt;/em&gt; and adapt one of them. I ran into &lt;a href=&quot;https://github.com/IronSummitMedia/startbootstrap-clean-blog&quot;&gt;CleanBlog&lt;/a&gt; by &lt;a href=&quot;https://github.com/davidtmiller&quot;&gt;David Miller&lt;/a&gt; to whom I give thanks for publishing this material. Adapting and applying it to the already running blog was a matter of minutes.  &lt;/p&gt;

&lt;h3 id=&quot;why-am-i-choosing-jekyll-y-github-pages&quot;&gt;Why am I choosing &lt;em&gt;Jekyll y GitHub Pages&lt;/em&gt;?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The possibility of counting with &lt;em&gt;Open Source&lt;/em&gt; tools.&lt;/li&gt;
  &lt;li&gt;Ads-Free: This is free. No strings attached.&lt;/li&gt;
  &lt;li&gt;Flexibility and Extensibility: I can build plugins and tools on top of the platform.&lt;/li&gt;
  &lt;li&gt;Simplicity:Creating Posts is as simple as writing a text file and follow the GitHub worflow for publishing.&lt;/li&gt;
  &lt;li&gt;Capability of receiving &lt;em&gt;Pull Requests&lt;/em&gt;: I’;’m interested on having readers suggesting fixes, or even having them publishing on this blog. &lt;strong&gt;I hope you send your Posts via Pull Requests&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Markdown&lt;/em&gt; Support: This might be a personal taste, but I find very simple and convenient to write in &lt;em&gt;Markdown&lt;/em&gt; instead of dealing with &lt;em&gt;WYSIWYG&lt;/em&gt; editors that end failing when attempting to go beyond their capabilities&lt;/li&gt;
  &lt;li&gt;Code Highlight: Mandatory for a snippet containing blog&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome to the new OurBit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These are just a few reasons. You should find yours. I suggest you to invest 1 hour in learning how to use it (maybe it won’t convince you as a &lt;em&gt;Blogging&lt;/em&gt; tool, but it worth knowing how &lt;em&gt;Jekyll and GitHub Pages&lt;/em&gt; works).  &lt;/p&gt;

&lt;p&gt;Here are some links for kicking off&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please, don’t hesitate to reach me if you have any doubt.  &lt;/p&gt;
</description>
        <pubDate>Mon, 03 Aug 2015 15:43:21 -0300</pubDate>
        <link>http://ourbit.github.io//en/jekyll/update/2015/08/03/moving-to-gh-pages/</link>
        <guid isPermaLink="true">http://ourbit.github.io//en/jekyll/update/2015/08/03/moving-to-gh-pages/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>SPAM - Caso Real</title>
        <description>&lt;p&gt;Quienes entendemos (y un poco más) de tecnología, solemos advertir, explicar, &lt;em&gt;retar&lt;/em&gt; a nuestros conocidos y familiares cuando vemos que están usando mal el &lt;em&gt;mail&lt;/em&gt;. En particular, un concepto simple pero que siempre se suele dejar de lado (por desconocimiento u olvido, a todos nos puede pasar).
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;para-principiantes&quot;&gt;Para principiantes&lt;/h2&gt;
&lt;p&gt;Cuando enviamos un &lt;em&gt;mail&lt;/em&gt;, tenemos que especificar las direcciones de los destinatarios. Pero hay 3 formas de hacerlo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Para: A quienes está dirigido el &lt;em&gt;mail&lt;/em&gt;. &lt;strong&gt;Todos los destinatarios pueden ver las direcciones que se escriban en este campo.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Copia Carbón: Gente en copia porque no son los principales destinatarios, pero queremos que estén enterados. &lt;strong&gt;Todos los destinatarios pueden ver las direcciones que se escriban en este campo.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Copia Oculta: Gente a la que queremos que le llegue el &lt;em&gt;mail&lt;/em&gt;, sin que los demás se enteren. &lt;strong&gt;Nadie más que el remitente y el destinatario puede ver las direcciones que se escriban en este campo.&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y es esta última opción la que sugerimos/rogamos utilizar cuando no podés evitar mandar ese &lt;em&gt;PPT&lt;/em&gt; con música de fondo y fotos de volcanes o cachorros siendo salvados por bomberos voluntarios. Es decir, si lo vas a mandar de todos modos, y a un montón de gente, al menos no publiques/compartas las direcciones con todo el mundo.&lt;br /&gt;
Personalmente me dio buenos resultados explicar &lt;strong&gt;por qué&lt;/strong&gt; está mal compartir las direcciones. Al enviar estas direcciones, y ser públicas para cualquiera, quien la recibe puede utilizarla para enviarme contenido que no me interesa (lo cual, en gran volumen, representa una molesta pérdida de tiempo). Pero aún peor: Muchos de tus contactos de confianza van a reenviar tu &lt;em&gt;mail&lt;/em&gt; (porque les resultó digno de ser compartido) y a su vez, sus contactos lo reenviarán en una cadena que podría propagarse hasta que todos hayamos recibido ese &lt;em&gt;mail&lt;/em&gt; (quizá más de una vez).&lt;br /&gt;
En toda esa cadena, &lt;strong&gt;al menos&lt;/strong&gt; uno de los eventuales destinatarios, se dedica a recolectar direcciones de &lt;em&gt;mail&lt;/em&gt; y armar “bases de datos” de los mismos. Estas bases de datos, o listas con gran cantidad de contactos tienen gran valor para empresas que publicitan sus productos y/o servicios vía internet, y por lo tanto, están dispuestas a pagar por ellas. Al final del recorrido, lo que ocurre es que uno empieza a recibir &lt;em&gt;mail&lt;/em&gt; no solicitado, de interés nulo, y &lt;strong&gt;en abundancia.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;caso-real&quot;&gt;Caso real&lt;/h2&gt;

&lt;p&gt;Esta mañana, un empleado de una compañía dedicada a proyectos de inversión, envió las novedades e imágenes de la demolición de un espacio para un nuevo emprendimiento. &lt;strong&gt;Mis felicitaciones a ellos, de paso.&lt;/strong&gt; Yo no conozco a esta persona, por lo que estimo que obtuvo mi &lt;em&gt;mail&lt;/em&gt; gracias a alguna cadena previa enviada de manera incorrecta. Pero aquí lo curioso: Puso a todos los destinatarios en el campo “Para”. Si, ese error que un familiar comete y al que le advertimos, explicamos, &lt;em&gt;retamos&lt;/em&gt;, fue cometido por un &lt;strong&gt;profesional de la industria del envío del &lt;em&gt;mail&lt;/em&gt; masivo (probablemente certificado por el instituto nacional del envío de correo electrónico y otras competencias altamente redituables, mejor conocido como el INdEdCEyOCAR).&lt;/strong&gt; Y obviamente, si a un familiar se lo marco, cómo no arremeter ante tal falta de profesionalismo. Respondí su &lt;em&gt;mail&lt;/em&gt; moviendo a los otros destinatarios desde el campo “Para” al campo “Copia Oculta” (si bien el mal estaba hecho, con esto evitaba cualquier problema que pudiera surgir por algún “Responder a Todos”). Puse en el campo “Copia Carbón” la dirección info@&lt;em&gt;laempresaencuestion&lt;/em&gt;.com (que obtuve de internet) a modo de “comunicame con un supervisor”. Y escribí mi respuesta:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hola &lt;em&gt;XXXX&lt;/em&gt;,&lt;br /&gt;
Te agradecería que la próxima vez que envíes un correo no solicitado (A.K.A SPAM) lo hagas utilizando la opción Copia Oculta (o BCC) para que no todos puedan ver mis datos de contacto así como yo no debería ver los datos de todas las personas que están recibiendo este mensaje.&lt;br /&gt;
Atte.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Aparentemente, el &lt;em&gt;mal&lt;/em&gt; ya está hecho. Uno tiene a minimizar estas cuestiones al nivel de “bueno, como mucho, recibis correo no deseado”. Pero al poner en copia (oculta) a las otras &lt;em&gt;víctimas&lt;/em&gt; de esta práctica ocurrieron algunas cosas que habitualmente se nos pasan por alto.&lt;/p&gt;

&lt;h2 id=&quot;consecuencias&quot;&gt;Consecuencias&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Muchas de las direcciones de destino eran pertenecientes a &lt;em&gt;mails&lt;/em&gt; laborales. Es decir que esta gente podrá empezar a recibir SPAM en sus correos laborales.&lt;/li&gt;
  &lt;li&gt;30 de Julio: Muchas de las personas tenían configurado la respuesta automática “Estoy de vacaciones hasta el día tal”. Es decir que, &lt;strong&gt;cualquiera de estas 400 personas podría saber que alguien (con nombre y apellido) probablemente no esté en casa&lt;/strong&gt; hasta dentro de unos días. Y déjenme decirles que, obtener el domicilio y otros datos de una persona con solo tener su nombre no es precisamente algo demasiado complicado (aunque no sea exacto).&lt;/li&gt;
  &lt;li&gt;Las direcciones inexistentes (o inválidas) son informadas ya que uno recibe el correo típico de “Correo no entregado” (Undelivered mail). Por lo que puedo asumir que las demás direcciones son válidas y usarlas con fines comerciales.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En mi caso particular, las posibilidades que acabo de mencionar no se encuentran dentro del grupo de mis actividades, lo cual deja conformes solo a quienes me conocen y confían en mi. El resto puede dudar. Pero hay otras 399 personas en esa cadena. 399 personas que tienen mi dirección de correo. 399 personas que quizá tengan tu dirección de correo.&lt;/p&gt;

&lt;p&gt;Es una época en donde lo que podemos hacer sentados en nuestros escritorios es cada vez más crítico. Podemos transferir dinero, contar nuestro itinerario, publicar nuestro estado de ánimo, mostrar fotos, publicar nuestros pensamientos y opiniones libremente, entre otras. Pero cada acción que hacemos, puede ser observada por otros. El uso consciente de las herramientas informáticas es la única forma real de asegurarnos que esos otros, sean el público al que apuntamos y nadie más.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jul 2015 14:45:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2015/07/30/spam-caso-real/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2015/07/30/spam-caso-real/</guid>
        
        
      </item>
    
      <item>
        <title>SPAM - Real case</title>
        <description>&lt;p&gt;Those who understand about technology (and maybe a little more than “understand”), are used to warning, explaining, or &lt;em&gt;scolding&lt;/em&gt; our friends and family about misusing the e-mail. There is a particular concept that is usually disregarded despite of being a simple one (mostly because of lack of knowledge or attention. It could happens to anyone).
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;for-rookies&quot;&gt;For rookies&lt;/h2&gt;

&lt;p&gt;When we send an e-mail, we need to specify the receivers addresses. There are 3 ways of doing this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To: To whom this e-mail is targeted. &lt;strong&gt;All receivers can see the addresses typed in this field.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Carbon Copy: People that, despite not being the main target, we want notify about something.  &lt;strong&gt;All receivers can see the addresses typed in this field.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Blind Carbon Copy: People we want to read the e-mail, but we don’t want other people notice. &lt;strong&gt;Nobody excepting the sender and the receiver can see the addresses typed in this field.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This last option is the one we recommend/beg to use when you can’t help sending that &lt;em&gt;PPT&lt;/em&gt; with a background sound and pictures of volcanoes or puppies being saved by volunteer firefighters. Thus, if sending to a bunch of people anyway, at least avoid publishing/sharing everyone else email addresses.
Personally I got great results by explaining &lt;strong&gt;why&lt;/strong&gt; sharing the addresses is that bad. When we send the addresses publicly to anyone, the receiver can use these for sending back to me content I am not interested in (which in high volumes, turns to be a really annoying waste of time). Even worse: Many of your trusted contacts will forward your email (since they think it’s worthy) and following, their contacts will forward the thread that might propagate until all of us have received that e-mail (maybe, even more than once).&lt;br /&gt;
At some point, there will probably be &lt;strong&gt;at least&lt;/strong&gt; one link of this chain dedicated to collecting email addresses for creating email databases. Databases are really valuable for companies that advertise their products and/or services via internet, and therefore, are willing to pay for these. At the end of the road, what happens is that you start receiving spam. &lt;strong&gt;A lot of spam.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;real-case&quot;&gt;Real case&lt;/h2&gt;

&lt;p&gt;This morning, an employee working at a company dedicated to investment projects, sent some news and images about a building wrecking for a new entrepreneurship. &lt;strong&gt;Congratulations to them, by the way&lt;/strong&gt;. I don’t know this person so I’m assuming that he got my email address thanks to some previous carelessly forwarded thread. But the funny thing: He placed all the receivers into the “To” field. Yes, that mistake typically committed by friends and family and that we warn, explain or &lt;em&gt;scold&lt;/em&gt; because of, was committed this time by a &lt;strong&gt;spam sending industry professional (probably certified by the National e-mail sending and other highly profitable competences institute A.K.A NESaOHPCI).&lt;/strong&gt; And obviously, if I blame a relative when doing this, how not to lash out at such lack of professionalism. I replied his email moving the other receivers from the “To” to the “BCC” field (avoiding any possible “reply to all” related problem). I put info@&lt;em&gt;thecompany&lt;/em&gt;.com in “CC” as an escalation, and wrote my answer:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hi XXXX,&lt;br /&gt;
I would appreciate if next time you send a spam message you could use the BCC option so my contact information is not shared with everyone, the same way I shouldn’t be seeing the contact information of all these people receiving this message.&lt;br /&gt;
Sincerely.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, &lt;em&gt;evil&lt;/em&gt; was done. People tend to understate these issues with thoughts like “well, it’s not a big deal. At most you will receive some SPAM”. But when I placed the other &lt;em&gt;victims&lt;/em&gt; in (B)CC some things happened. Things that we usually overlook.&lt;/p&gt;

&lt;h2 id=&quot;consequences&quot;&gt;Consequences&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Many of the addresses were work email addresses. This means that this people will probably start receiving SPAM at work.&lt;/li&gt;
  &lt;li&gt;July 30: At least on this region, lot of people are out for vacations. Lot of people had configured the automatic response “I’m out for vacations until some date”. This means that, &lt;strong&gt;any of these 400 persons might know first and last name of someone that is out of home&lt;/strong&gt; for the next days. And let me say that, getting the home address and other personal information with just the person name, is not exactly rocket science.&lt;/li&gt;
  &lt;li&gt;Non-existing or invalid addresses are informed by getting the “Undelivered email”. Because of that, I can assume that the other ones are valid and use these with commercial purposes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my case, the options I’ve just mentioned are not inside the set of activities I usually perform, which only assures the ones that know me and trust me. The rest of you are allowed to have second thougts. But there are other 399 persons on that thread. 399 persons that have my e-mail address. 399 that might have your e-mail address.&lt;/p&gt;

&lt;p&gt;We live in an era where we can do more and more critical and sensitive tasks from our desks. We can transfer money, share our routine, publish our mood, show pictures, share our thoughts and opinions, among others. But every move we make can be watched by others. Thoughtful usage of information tools is the only real way of making sure that these others, are our intended audience and nobody else.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jul 2015 14:45:00 -0300</pubDate>
        <link>http://ourbit.github.io//en/2015/07/30/spam-caso-real/</link>
        <guid isPermaLink="true">http://ourbit.github.io//en/2015/07/30/spam-caso-real/</guid>
        
        
      </item>
    
      <item>
        <title>De Chrome a Safari ida y vuelta</title>
        <description>¿Casi 3 años sin poner nada acá y aparecer de repente con poca información? No quiero faltarles el respeto, pero por algún lado hay que empezar (si queremos empezar).&lt;br /&gt;&lt;br /&gt;Hace un tiempo largo ya me convertí en usuario de Apple, sobretodo por las MacBook. Lo charlé con fundamentalistas, fanáticos, hinchas, simpatizantes, seres racionales, opositores, y &lt;i&gt;odiadores&lt;/i&gt; de todo lo que Mac representa y todos entendieron los motivos por los cuales no me muevo de Mac.&lt;!--MORE--&gt;&lt;br /&gt;&lt;br /&gt;Recientemente, instalé Yosemite en una nueva Retina Display de 15&#39;&#39;. Todo perfecto, la integración con iPhone mejoró considerablemente, y no tuve demasiados problemas con las herramientas de desarrollo u otras.&lt;br /&gt;&lt;br /&gt;Pero un par de días más tarde, todo empezó a funcionar raro (como en los tiempos de Windows). La Mac se colgaba, todo andaba &quot;trabado&quot;. Empecé a ver los motivos y al abrir el &quot;Monitor&quot; tenía aproximadamente 25 procesos &quot;Google Chrome Helper&quot; consumiendo memoria, procesador, y en estado &quot;Not responding&quot;. No esperé demasiado (y ya tenía curiosidad por ver cómo andaba Safari) así que cerré todo y cambié.&lt;br /&gt;&lt;br /&gt;La realidad es que Safari en Mac es superior en múltiples aspectos:&lt;br /&gt;- La velocidad mejora &lt;b&gt;notablemente&lt;/b&gt;.&lt;br /&gt;- El consumo de recursos disminuye &lt;b&gt;notablemente.&lt;/b&gt;&lt;br /&gt;- User Experience: Mejora salvo por unos detalles, que lograron hacer que vuelva a intentar Chrome:&lt;br /&gt;&lt;br /&gt;1. &quot;Abrir las últimas ventanas o pestañas cerradas&quot; simplemente no funciona (o no es consistente). Algunas veces, abre como corresponde. Pero otras, por ejemplo si Safari no pudo filtrar un pop-up, esta funcionalidad va a abrir ese pop-up cada vez que lo intentemos. El shortcut de una ventana cerrada es CMD+Z, lo cual dificulta UNDO en un FORM (depende del campo, se ejecuta una u otra función).&lt;br /&gt;2. Los &quot;Tabs&quot; no tienen favicon. Las pestañas llegan a achicarse hasta un punto en donde comienzan a desaparecer, y navegarlas se vuelve completamente anti-intuitivo.&lt;br /&gt;3. Las &quot;Developer Tools&quot;. Una vez que están habilitadas (porque no vienen por &lt;i&gt;default&lt;/i&gt;), no nos aportan demasiado. En especial los &lt;i&gt;Timelines. &lt;/i&gt;Si fuera por los &lt;i&gt;timelines&lt;/i&gt;, las páginas nunca fueron solicitadas.&lt;br /&gt;&lt;br /&gt;El hecho de que la comunidad de desarrolladores de &quot;extensions&quot; también sea más numerosa para Chrome, influye.&lt;br /&gt;&lt;br /&gt;Volví a Chrome. Voy a tener que pelear con los problemas de consumo de recursos (sobretodo de los programas que usen el Chrome Helper) hasta que se solucione.&lt;br /&gt;&lt;br /&gt;De paso: Instalé también la versión más beta &lt;a href=&quot;https://www.google.com/intl/en/chrome/browser/canary.html&quot; target=&quot;_blank&quot;&gt;Chrome Canary&lt;/a&gt;&amp;nbsp;para ir probando nuevas funcionalidades. No se cuánto lo vaya a usar, ya que no puedo ponerlo como &lt;i&gt;default browser&lt;/i&gt;, pero veremos como evoluciona.&lt;br /&gt;&lt;br /&gt;Nota: Espero retomar la costumbre de escribir cada tanto por aquí. Consideremos este post como una prueba piloto.
</description>
        <pubDate>Fri, 21 Nov 2014 18:37:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2014/11/21/de-chrome-safari-ida-y-vuelta/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2014/11/21/de-chrome-safari-ida-y-vuelta/</guid>
        
        
      </item>
    
      <item>
        <title>Legislando lo que prosperó anárquicamente</title>
        <description>Es claro que el titulo es tendencioso. Decir que Internet es un ente anárquico es, desde mi humilde opinión, una falacia no menor. Internet contiene lo que un numeroso grupo de individuos (personas físicas o jurídicas) publica, al menos conceptualmente y sin entrar en detalles técnicos que no aportan al tema a desarrollar. &lt;!--MORE--&gt;Estas personas se rigen por legislaciones existentes (algunas correspondientes a sus países y otras comunes al globo). Si yo violo una ley existente, ya sea por publicar un contenido no debido en una red, o por arrojar basura en la vía pública, no estoy realizando nada que no ocurriera antes de internet (masiva). Lo que quizás provee internet es cierta impunidad que brinda el anonimato. Estas características permitieron que internet se desarrollara y llegara a ser el lugar en donde millones de personas podemos compartir contenidos y potenciar nuestras capacidades. Quienes entendemos internet no podemos imaginarla de otra manera. Y creo que aquí es momento de mencionar algo que puede ser controversial: &quot;No es incorrecto legislar internet&quot;. Todos podemos querer que nuestros derechos de autor se vean resguardados al tiempo que queremos utilizar el medio que facilita su &quot;violación&quot; para difundir lo que queremos proteger. Probablemente, si el cine no fuera un gran negocio, su difusión sería limitada, y eso también sería una lástima. Lo que creo que no se puede dejar de lado, es el análisis COSTO-BENEFICIO de aplicar una ley. De alguna manera, se realiza este análisis (quizás de forma implícita) ante situaciones mucho más graves. Por ejemplo: tras muchos años de ver CANSADOS, que los accidentes de tránsito causados por conductores ebrios se cobran miles de vidas al año, nadie piensa en prohibir el alcohol. Se sigue penalizando su consumo al momento de manejar. Prohibir el alcohol sería, teóricamente, una medida más eficaz para evitar tragedias (Enorme beneficio). Pero el costo es también muy elevado, y sobretodo &lt;b&gt;corta libertades.&lt;/b&gt;&amp;nbsp;Si yo soy una persona responsable, que quiere disfrutar un buen vino con un plato de carne, sería ilógico que esta práctica se me&amp;nbsp;prohíba&amp;nbsp;(al menos bajo las normas culturales de mi región). Prohibir el alcohol, cambiaría rotundamente los hábitos de los individuos. Transformaría el objeto a legislar en algo completamente distinto. Imponer una legislación demasiado estricta sobre internet, haciendo que sitios que funcionan como herramientas para compartir todo tipo de contenidos, cierren, es cambiar la escencia de lo legislado: empeorar internet, prohibirme cenar con vino, enjaularme por ser Argentino.&lt;br /&gt;Pero más allá del análisis conceptual y el impacto negativo que tendría sobre internet, la aplicación de las leyes que intentaron aprobarse, e incluso más allá de lo retrógrado que esto sea (hoy noté el inmenso retroceso tecnológico y cultural que representa haber tenido que resguardar archivos de una cuenta de MediaFire en el disco rígido de una PC, y dejar de compartirlos en caso que este sitio cierre), lo que molesta, es la motivación. No hay una motivación real de cuidar a un artista (ya sea escritor, cineasta, músico o fotógrafo). La intención real, es &lt;b&gt;no perder un negocio.&lt;/b&gt;&amp;nbsp;Y no voy a juzgar a nadie que quiera conservar su medio de vida. Ni siquiera voy a juzgar a aquellos que quieran conservar su billetera abultada gracias a sus negocios.&lt;br /&gt;&lt;br /&gt;Pero sí me animo a juzgar a todos aquellos quienes en lugar de pensar creativamente, para adaptar sus negocios a nuevas eras, intenten imponer restricciones que modifiquen la escencia de una herramienta que fomenta la generación y sinergia de conocimiento, en pos del beneficio propio y sobretodo, &lt;b&gt;la comodidad.&lt;/b&gt;&amp;nbsp;Y luego de juzgarlos, me gustaría poder castigar, a todo aquel que además de intentarlo, lo haga por la fuerza, gracias a los favoritismos que un gobierno, y sus servicios de inteligencia, pueda tener, imponiendo el miedo con &quot;castigos ejemplares&quot; sentenciando a cárcel a personas que desarrollaron un negocio montado en software que permite almacenar archivos, pero dejando impunes y fomentando genocidios.
</description>
        <pubDate>Fri, 27 Jan 2012 10:00:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2012/01/27/legislando-lo-que-prospero/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2012/01/27/legislando-lo-que-prospero/</guid>
        
        
      </item>
    
      <item>
        <title>Stand up meeting</title>
        <description>&lt;br /&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit; font-size: large;&quot;&gt;Introducción&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;Dentro de las metodologías ágiles, y más precisamente dentro de &lt;i&gt;SCRUM&lt;/i&gt; encontramos una de las reuniones que más importante se torna gobernar correctamente, o en otras palabras, lograr que se respeten los principios de &lt;i&gt;Time-Boxed&lt;/i&gt; y &lt;i&gt;Short/To the point&lt;/i&gt;. Se trata de la &lt;i&gt;Stand up&lt;/i&gt; o &lt;i&gt;Daily meeting&lt;/i&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;Como ya se comentó en &lt;a href=&quot;http://ourbit.blogspot.com/2011/07/be-scrum.html&quot; target=&quot;_blank&quot;&gt;publicaciones anteriores&lt;/a&gt;, &lt;i&gt;SCRUM&lt;/i&gt; podría explicarse como un &lt;i&gt;framework &lt;/i&gt;de reuniones, en la que cada una tiene una razón de ser (objetivos) y una dinámica particular (método orientado al objetivo de la reunión).&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;En esta publicación se explica más en detalle los fundamentos y dinámica de la &lt;i&gt;Stand up meeting&lt;/i&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;&lt;!--MORE--&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;Objetivo&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;El objetivo de esta reunión es que el equipo entero comparta diariamente una actualización del estado del trabajo que está realizando cada uno de sus miembros.&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;Dinámica&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;Un aspecto importante de estas reuniones es que se mantengan breves, siguiendo la filosofía &lt;i&gt;SCRUM&lt;/i&gt;, se aplicará el concepto de &lt;i&gt;Time-Boxing.&lt;/i&gt;&amp;nbsp;Por este motivo, los asistentes permanecen de pié durante la misma (recordando que hay que ser breve e ir directo al punto). Es importante para que el &lt;i&gt;Time-Boxing&lt;/i&gt; sea eficaz, la puntualidad de los participantes.&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;El facilitador (&lt;i&gt;Team Leader/SCRUM Master) “&lt;/i&gt;abre”&amp;nbsp; la reunión, y define una dirección (ej: horario/antihorario). El primer miembro del equipo plantea uno a uno (a modo de ítems) los temas sobre los que ha trabajado desde la última reunión, y aquellos con los que estará trabajando hasta la siguiente. Antes de pasar al siguiente miembro, el integrante que está hablando, debe informar cualquier inconveniente que tenga en la resolución de un problema presentado. Al hacerlo, otro participante puede/debe interrumpir solo para decir “yo puedo ayudarte con ello” (no es esta reunión el momento para debatir respecto de la solución, sino enterarse los problemas de nuestros compañeros y avisar que podemos contribuir positivamente en la resolución). El &lt;i&gt;SCRUM Master&lt;/i&gt; debe tomar nota de estas interacciones para poder realizar un correcto seguimiento, y preguntar sobre temas no tratados (que vienen de reuniones pasadas). Al finalizar, pasa al siguiente miembro del equipo, y se repite esta lógica hasta que nadie tiene más que decir y/o finaliza el tiempo asignado a la reunión.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;El escenario “ideal” es que en este momento, los miembros del equipo vuelvan a sus lugares de trabajo, y “en el camino”, aquellos que hayan interactuado ofreciendo solución, caminen mientras charlan más en detalle lo enunciado durante la reunión. Si esto ocurre, es muy probable que al llegar al escritorio, emprendan una pequeña sesión de &lt;i&gt;peer programming &lt;/i&gt;y solucionen el problema o lo encaminen de forma inmediata.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;Problemas frecuentes&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;Equipos expertos en &lt;i&gt;SCRUM &lt;/i&gt;conocen los beneficios de este tipo de reuniones. Los equipos que recién se inician, suelen no reconocerlos hasta que la dinámica esta afianzada (no olvidemos que las metodologías ágiles proponen el mejoramiento continuo de los equipos en calidad de trabajo entregado, precisión de estimaciones, eficacia de las reuniones, etc). Cuando esto ocurre, los equipos suelen abandonar la práctica. &lt;b&gt;Si están en esta situación: EVITEN TOMAR ESE CAMINO. Denle al equipo el tiempo de madurar la práctica (esto aplica para todo Agile).&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;b&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;Dentro y fuera de SCRUM/Agile&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;¿Es necesario implementar agile para poder realizar &lt;i&gt;Stand up meetings&lt;/i&gt;? Esta pregunta, extrañamente formulada a propósito, intenta en realidad sentar las bases para analizar si este tipo de reuniones aportan algún valor fuera de la estructura ágil. La pregunta real debería ser: ¿Tiene sentido realizar &lt;i&gt;Stand up meetings&lt;/i&gt; fuera de metodologías ágiles?&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;La respuesta es subjetiva. En mi opinión, este tipo de reuniones aportan beneficios independientemente de la metodología utilizada. No está mal comenzar a &lt;b&gt;valorar las interacciones humanas &lt;/b&gt;incluso fuera del mundo ágil. La gran diferencia, quizás, sea la “unidad de trabajo planteada”. Mientras que con &lt;i&gt;Agile &lt;/i&gt;nos aseguramos un trabajo orientado a tareas de cierto nivel granular tomadas de un backlog, otras metodologías podrían no garantizar la existencia de las mismas. Al mencionar sobre qué estuvimos trabajando, podríamos NO tener un objeto autónomo, cuantificable y estimable, y eso podría complicar en gran medida la dinámica descripta (podríamos tardar mucho tiempo en explicar un problema, no mencionar tareas que signifiquen algo fuera de su correcto contexto, etc) complicando de esta manera seguir el principio de Time Boxing.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;El punto positivo de este escenario, es que podría conducirnos a orientar nuestro trabajo a tareas comparables (técnica utilizada pero no exclusiva&amp;nbsp; de &lt;i&gt;Agile&lt;/i&gt;), y eventualmente a implementar gradualmente más partes de estas metodologías (a pesar de lo que puedan pensar los puristas y expertos en &lt;i&gt;Agile &lt;/i&gt;yo sigo creyendo que la metodología es implementable por partes, e incluso, es posible utilizar solo aquellas partes que nos sean útiles).&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;Conclusión&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;Hay mucho material escrito al respecto de esta (y todas las reuniones &lt;i&gt;SCRUM&lt;/i&gt;)&lt;i&gt;.&lt;/i&gt; Decido dejar madurar un poco estas ideas y retomarlas más adelante para profundizar en temas tales como las metas detalladas, principio del buen comienzo (&lt;i&gt;good start&lt;/i&gt;), patrones de la &lt;i&gt;stand up&lt;/i&gt;, etc.&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 19 Dec 2011 19:19:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2011/12/19/stand-up-meeting/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2011/12/19/stand-up-meeting/</guid>
        
        <category>stand up</category>
        
        <category>mejores y peores prácticas</category>
        
        <category>metodologías</category>
        
        <category>scrum</category>
        
        <category>comunicación</category>
        
        <category>management</category>
        
        <category>agile</category>
        
        <category>eficacia</category>
        
        <category>eficiencia</category>
        
        <category>meetings</category>
        
        
      </item>
    
      <item>
        <title>Serendipity</title>
        <description>&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;Introducción&lt;/span&gt;&lt;br /&gt;Luego de haber escuchado este término en distintas conferencias, me resultó interesante investigar un poco respecto de su significado y cómo traducirlo al español. No solo no conocía el vocablo, sino que además al intentar traducirlo, descubrí que es considerado dentro de la lista de palabras más difíciles de traducir, o dicho de otra forma, no tiene traducción.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;&lt;!--MORE--&gt;Etimología&lt;/span&gt;&lt;br /&gt;&lt;div&gt;Serendipity se utiliza para indicar que algo útil fue accidentalmente descubierto/inventado/realizado. La etimología de la palabra proviene, según Wikipedia, de un cuento de hadas Persa llamado “Los tres príncipes de Serendip”, en cuyas aventuras realizaban hallazgos de forma no intencionada (quedará pendiente la lectura de este cuento).&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;Historia&lt;/span&gt;&lt;br /&gt;Uno de los ejemplos más descriptivos de este fenómeno es el descubrimiento de la Penicilina. Alexander Fleming dejó accidentalmente abierta una probeta con un Estafilococo. Un hongo (Penicillium) cayó dentro de la misma y mató la bacteria. Este accidente dio lugar al descubrimiento de la Penicilina, sustancia base para la fabricación de una gran cantidad de antibióticos y cura de muchas enfermedades que hasta ese momento resultaban mortales (irónicamente, quien les escribe es alérgico a este compuesto y todos sus derivados).&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;Aplicación en el entorno actual&lt;/span&gt;&lt;br /&gt;Más allá de su definición y explicación (creo que a estas alturas está claro el concepto), me llamó la atención la utilización del término en conferencias relacionadas con el mundo de la informática y particularmente su aplicación a la creación y evolución de las redes sociales.&lt;br /&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;Como muchos sabemos, en el mundo IT, al comenzar proyectos informáticos (soluciones para empresas, sitios web que ofrecerán servicios, productos enlatados), se suele pasar&amp;nbsp; por una fase de profundo análisis para determinar los objetivos y alcance de las aplicaciones a desarrollar. Esto es una práctica tan joven y antigua como la disciplina IT en sí misma. Pero si analizamos el fenómeno de las redes sociales, y voy a basarme en Facebook como referencia principal a las mismas, más allá de lo biográfico, podemos identificar un alto factor de Serendipity. Facebook no fue creado como lo que es (tampoco fue creado como lo que cuenta “The Facebook”, la película). Es cierto que fue creado como una red de contacto para miembros de una universidad. Podríamos decir que era en su concepción, una Intranet diferente. No sería un administrador quien publicaría contenidos para ser accedidos por varios usuarios, sino más bien todos los usuarios publicando actualizaciones para ser accedidas por los demás. Está claro que a medida que el contenido fue aumentando en volumen, era necesario algún tipo de organización para los mismos. Mientras que en un &lt;i&gt;Content Managment System (CMS)&lt;/i&gt; lo normal habría sido crear carpetas o categorías, y quizás etiquetas, Facebook optó por implementar un modelo “productor/consumidor” reflexivo, es decir: Alguien produce información y alguien se suscribe para recibirla (p/c). Lo de reflexivo lo agrego por su característica inicial de plantear las suscripciones como “Solicitud de amistad”. Si A es amigo de B, entonces B es amigo de A, y ambos verían los contenidos del otro (a diferencia de Twitter, en donde desde el inicio, uno podía suscribirse al &lt;i&gt;timeline&lt;/i&gt; de alguien que no estuviera suscripto al de uno. Facebook implementó recientemente este modelo, creo yo que en pos de no perder terreno ante Google Plus que fue la primera en combinar “relaciones de amistad, modelo de suscripciones no reflexivo, grupos o círculos, TODO EN UNO).&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;Pero volviendo al tema principal, está claro que Facebook nació con un objetivo claro: Ser una vía de comunicación no centralizada para alumnos de una universidad. ¿Cómo llegó a ser, entonces, esta empresa billonaria, completamente conquistadora, y capaz de colarse entre los gigantes con diez, veinte y hasta cien años de historia? Mediante &lt;b&gt;Serendipity. &lt;/b&gt;Resumidamente, Facebook comenzó a “probar” funcionalidades sin temor a invertir horas de desarrollo en aplicaciones que no fueran a funcionar. Todas esas horas pueden considerarse inversión absorbida por aquellas aplicaciones que han hecho de esta red social la más popular.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;Serendipity no es un accidente para todos, hay que buscarlo&lt;/span&gt;&lt;/div&gt;Por lo descripto hasta aquí, parecería que estoy menospreciando el trabajo de la gente de Palo Alto. Nada se aleja más de mi intención. La diferencia entre cualquier accidente y Serendipity se analiza mediante el resultado, pero se logra mediante la predisposición. Para permitirme a mí mismo alcanzar resultados no esperados, debo estar dispuesto a probar soluciones no convencionales, tomar caminos sin destinos definidos y vivir cómodo y orgulloso de estas decisiones. Estas características no son sencillas de encontrar en el común de la gente, y es más raro aún que aparezcan en las personas que toman las decisiones. Serendipity no es para todos. Pero cuando encontramos un caso con poder de decisión y el “coraje” de animarse a equivocarse, cosas asombrosas pueden suceder. Facebook es solo un ejemplo.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;Lanzarse sin tanta planificación&lt;/span&gt;&lt;br /&gt;Comenzar un proyecto sin un objetivo definido, o estar dispuestos a que el objetivo mute (siguiendo la nueva dirección o bifurcando nuestra idea original en distintos proyectos) parecería ser algo entrópico e ingobernable. Algo de cierto hay en esto, y es que al lanzar ideas en todas direcciones, estamos contribuyendo con cierta entropía de información. Luego, lo de ingobernable, parecería ser más una sensación que una realidad. Una forma simple de gobernar un “haz de ideas” es truncar todas aquellas que hayan recorrido un camino que no nos conduce a ningún puerto, luego de haber visto algunos ciclos evolutivos. Claro que es el camino más simple (a su vez es quizás el más costoso), pero es un ejemplo para “perder el miedo” a la ingobernabilidad por exceso de volumen. Otros medios podrían incluir el desarrollo de métricas comparativas (ver cuánto invierto en uno de los rayos de mi haz, para llegar a cierto porcentaje de realización de algo productivo). Algo importante: Hoy la información fluye como pequeños trozos dispersos entre millones de personas. Quizás los mejores jueces de un millón de ideas, sean un billón de personas. Puede que sea más costoso, pero sin duda será mucho más beneficioso hacer caso del &lt;i&gt;feedback &lt;/i&gt;para conducir un proyecto con alto contenido &lt;i&gt;Serendipity.&lt;/i&gt;&lt;br /&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;Saber descubrir un error y volver hacia atrás es una habilidad valiosa cuando nos encontramos con estos escenarios. Sucede que nos enamoramos de nuestras ideas, y eso puede jugarnos en contra. &lt;i&gt;Serendipity&lt;/i&gt; no se trata de abandonar una idea si esta no evoluciona como se espera, pero es importante saber encontrar un punto de no retorno, y no cruzarlo. Volver hacia atrás, abandonar un proyecto fallido &lt;b&gt;no es necesariamente un fracaso&lt;/b&gt;. Lo que sí es importante, es poder analizar el resultado del fallo como un contraejemplo al intentar probar una hipótesis. Quizás la refute, quizás simplemente nos aporte datos para trazar nuevos caminos. Reciclar una falla como nueva funcionalidad podría ser una gran solución para cuando nos dé “pena” desperdiciar el trabajo realizado, pero aquí, nuevamente, &lt;b&gt;no hay que intentar forzar al usuario.&lt;/b&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;Quizás un gran ejemplo de estos principios sea Google. Es difícil pensar que cuando Sergey Brin y Larry Page desarrollaron el algoritmo que daría lugar al buscador más popular de la historia de internet, imaginaban una gama de productos y servicios ofrecidos en “la nube” y accesibles desde dispositivos móviles que ejecutaran el sistema operativo de la marca. Claramente, haber invertido en pruebas (la división que generaba Google Labs), fue participe importante de estas inesperadas evoluciones. Nada pasa de un día para el otro, y las ideas parecen ser ingobernables. También son ejemplo de no dudar en truncar una idea (alcanza con mencionar google wave: una gran idea que no funcionó), e incluso reciclarlas: buena parte de la experiencia adquirida con wave y con buzz da lugar a google plus, producto que tiene grandes chances de prosperar.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-size: large;&quot;&gt;Conclusión&lt;/span&gt;&lt;/div&gt;Solo a modo de cierre, quiero recalcar que el objetivo de este post no es el de documentar ningún hallazgo trascendental. Simplemente quería detenerme en el término y realizar un pequeño análisis de cómo este concepto impacta en la actualidad del mundo IT. Seguramente mencione este término en el futuro, y también es mi deseo poder presentar un link que explique a qué me refiero por &lt;i&gt;Serendipity.&lt;/i&gt;&lt;br /&gt;&lt;div class=&quot;MsoNormal&quot;&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class=&quot;MsoNormal&quot;&gt;Creo que lo más inmediato a escribir, es el rol que juegan las metodologías ágiles en la inclusión de la variable &lt;i&gt;Serendipity&lt;/i&gt;en nuestros proyectos.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 16 Dec 2011 09:45:00 -0300</pubDate>
        <link>http://ourbit.github.io//es/2011/12/16/serendipity/</link>
        <guid isPermaLink="true">http://ourbit.github.io//es/2011/12/16/serendipity/</guid>
        
        <category>mejores y peores prácticas</category>
        
        <category>metodologías</category>
        
        <category>filosofia</category>
        
        <category>creatividad</category>
        
        <category>google</category>
        
        <category>inspiracion</category>
        
        <category>agile</category>
        
        <category>liderazgo</category>
        
        <category>Twitter</category>
        
        <category>Facebook</category>
        
        <category>social network</category>
        
        
      </item>
    
  </channel>
</rss>
