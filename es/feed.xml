<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OurBit</title>
    <description>Ourbit is a blog dedicated to IT topics such as programming, management, qa, and technology in general</description>
    <link>http://localhost:4000/es/</link>
    <atom:link href="http://localhost:4000/es/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 22 Aug 2017 17:59:31 -0300</pubDate>
    <lastBuildDate>Tue, 22 Aug 2017 17:59:31 -0300</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Ese código no es nuestro</title>
        <description>&lt;p&gt;La primera vez que leí algo acerca de la “Ley de Conway” fue en el contexto de un excelente libro &lt;a href=&quot;http://shop.oreilly.com/product/0636920033158.do&quot;&gt;“Building Microservices” by Sam Newman&lt;/a&gt;. Esta ley dice que: “Cualquier organización que diseña un sistema (en el sentido amplio de su definición), producirá un diseño cuya estructura es una copia de la estructura comunicacional de la organización”.&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;p&gt;Cuando hablamos de Microservicios, solemos decir que su implementación no es solo una manera de obtener componentes independientes, sino también equipos autónomos que construyan y operen dichos componentes. Parecería que además estamos diciendo que algunas propiedades de nuestros sistemas (o componentes, servicios, aplicaciones) son también deseables para nuestra organización. Más aún, hablando de equipos y autonomía, podríamos concluir en que, de la misma forma en que los componentes deberían ser altamente cohesivos y ligeramente acoplados, los equipos deberían imitar dicho comportamiento. Mientras que esto parece una buena idea, puede ser un concepto extremadamente peligroso para una organización de Ingeniería.&lt;/p&gt;

&lt;p&gt;Para componentes, es cierto que queremos encapsular su comportamiento de una forma en que podamos solicitar que algo se haga tan solo sabiendo cómo pedirlo (recordemos que ligeramente acoplado no significa “totalmente desacoplado”). Un buen nivel de encapsulamiento se suele medir en base a qué tan bien están ocultos los detalles de implementación: El componente A no conoce nada de la implementación del componente B.&lt;/p&gt;

&lt;p&gt;Pensemos la misma situación para un par de equipos de trabajo. El equipo A es responsable del componente A y el equipo B del componente B. El componente A solicita un servicio al componente B mediante su API. Todo va bien hasta que el componente B falla. En este momento, el escenario se vuelve más interesante: para el equipo B, el bug es menor, mientras que para el equipo A es crítico. Ahora agreguemos pimienta: El equipo B está trabajando al máximo de su capacidad por lo que, sin importar la criticidad, el bug no se va a corregir en un tiempo aceptable. Instintivamente, cualquiera podría proponer “Pongamos a alguien del equipo A a arreglar el bug del componente del equipo B” y, asumiendo que el equipo A tiene algo de capacidad para ocuparse del tema, sería una solución factible. Sin embargo, esto va en contra del principio de Encapsulamiento a nivel de equipo.&lt;/p&gt;

&lt;p&gt;Si tuviéramos una política estricta al respecto, nuestra organización estaría limitada por un dogma ridículamente inflexible. Se debe evitar que un componente conozca los detalles de implementación de sus pares. Eso es buen diseño. Pero a un nivel organizacional, es más bien una falta de criterio. Como desarrollador, no me va a lastimar investigar un poco más y saber como funciona lo que está del otro lado.&lt;/p&gt;

&lt;p&gt;Podríamos repensar esta situación considerando que el &lt;strong&gt;&lt;em&gt;ownership&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;es un concepto organizacional pero no necesariamente operacional&lt;/strong&gt;. “Este código es tuyo” funciona perfecto cuando estamos organizando módulos en un monolito, o servicios en aplicaciones distribuidas. Pero, al momento de operar, esto debería ser solo una “recomendación”. Tendremos que ser más estrictos con esto cuando se trate de trabajo planificado (como un &lt;em&gt;roadmap&lt;/em&gt;) y más flexibles para situaciones no planificadas (como &lt;em&gt;bugs&lt;/em&gt; que van apareciendo).&lt;/p&gt;

&lt;p&gt;Podemos aprender de buenas experiencias que involucran librerías &lt;em&gt;open source&lt;/em&gt;. Cuando empezamos a trabajar con alguna de estas librerías, nos prometen que al hacerlo, vamos a poder enfocarnos en nuestra funcionalidad y olvidarnos de la complejidad de manejar &lt;em&gt;inserte lo que sea que esa librería se supone que está haciendo de forma transparente&lt;/em&gt;. En algún momento, encontrás un bug en la librería que amenaza toda la arquitectura, salvo que agregues un &lt;em&gt;workaround&lt;/em&gt; elegante en tu hermoso código, que pueda ser removido una vez que el bug esté arreglado. Pero esa no es la forma en que se trabaja en el mundo &lt;em&gt;open source&lt;/em&gt;. En lugar de esto, deberías invertir tu tiempo en arreglar el &lt;em&gt;bug&lt;/em&gt; y mejorar la librería. Al hacerlo:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Evitás un &lt;em&gt;hack&lt;/em&gt; en tu código.&lt;/li&gt;
  &lt;li&gt;Evitás un &lt;em&gt;hack&lt;/em&gt; en el código de otras personas (que usan la librería).&lt;/li&gt;
  &lt;li&gt;Hacés la librería más robusta.&lt;/li&gt;
  &lt;li&gt;Te convertís en un &lt;em&gt;contributor&lt;/em&gt; e incentivás a otros a que sigan tu ejemplo.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Ganás un Nobel&lt;/del&gt; no tanto, solo estás haciendo tu trabajo, pero podrías obtener algo de crédito por eso también.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pero, para poder hacerlo, no te va a alcanzar con entender cómo trabaja la librería. Vas a necesitar conocer cómo fue construida.&lt;/p&gt;

&lt;p&gt;Volviendo a nuestra organización de Ingeniería, seguramente estás pensando: Somos un par de docenas de equipos con alrededor de diez desarrolladores por equipo. No creo que el mejor uso de mi tiempo sea estar leyendo &lt;strong&gt;todo&lt;/strong&gt; el código por si acaso. Correcto. De hecho, si todos los desarrolladores hicieran eso, no habría ni una sola feature nueva ni un bug arreglado. &lt;strong&gt;Nunca&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Por suerte esto tampoco es necesario. Como una organización de Ingeniería, debemos asegurarnos de que:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Los equipos responsables de componentes tengan disponibilidad para ayudar a alguien a entender rápidamente partes de los mismos.&lt;/li&gt;
  &lt;li&gt;El código sea tan fácil de entender como sea posible. Después de todo, un código limpio y bien hecho, debería ser legible.&lt;/li&gt;
  &lt;li&gt;Los líderes técnicos o arquitectos estén involucrados, entiendan y construyan código para varios equipos.&lt;/li&gt;
  &lt;li&gt;Los desarrolladores sean curiosos y siempre proactivos: “Este código no es nuestro” debería ser una decisión organizacional y no solamente un mal hábito.&lt;/li&gt;
  &lt;li&gt;Esto ocurra tan poco frecuentemente como se pueda: Se debe medir la cantidad de veces que se rompe la política de &lt;em&gt;ownership&lt;/em&gt;. Deberían identificarse tendencias y se debería tomar acción en base a las mismas. Después de todo, es cierto que esta situación es menos eficiente que trabajar en nuestro propio código (que conocemos mejor).&lt;/li&gt;
  &lt;li&gt;Los equipos cambien: La gente tiene que rotar, salir de la zona de confort. La mayoría de las veces, la gente quiere un cambio cada tanto. Si encontrás un grupo de gente que no está dispuesta a rotar, mostrales los beneficios de hacerlo. Si la actitud persistiera, no dudes en ir más lejos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hay otras formas en que la “Ley de Conway” puede aparecer, sin ser dañina para tu organización de Ingeniería. Por ejemplo, el escenario descripto podría verse como “balanceo de carga”.&lt;/p&gt;

&lt;p&gt;Mantener un buen &lt;em&gt;mindset&lt;/em&gt; y la cultura correcta son puntos cruciales para tener una organización que entienda sus límites y cuándo es correcto ir más allá.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Aug 2017 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/es/2017/08/22/That-is-not-our-code/</link>
        <guid isPermaLink="true">http://localhost:4000/es/2017/08/22/That-is-not-our-code/</guid>
        
        <category>Conway</category>
        
        <category>Ownership</category>
        
        <category>Organization</category>
        
        <category>Encapsulation</category>
        
        <category>Autonomy</category>
        
        <category>Engineering</category>
        
        <category>Culture</category>
        
        
      </item>
    
      <item>
        <title>APIsAR Episodio V - API Management con Azure</title>
        <description>&lt;p&gt;Durante un evento realizado el pasado 3 de Mayo de 2017, en Buenos Aires &lt;a href=&quot;https://twitter.com/germankuber&quot;&gt;German Küber&lt;/a&gt; dió una presentación acerca de API Management con &lt;a href=&quot;https://azure.microsoft.com/en-us/&quot;&gt;Azure&lt;/a&gt;, la plataforma desarrollada y comercializada por Microsoft.&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;h2 id=&quot;acerca-del-evento&quot;&gt;Acerca del evento&lt;/h2&gt;

&lt;p&gt;El evento ocurrió en las oficinas de &lt;a href=&quot;http://avature.net/&quot;&gt;Avature&lt;/a&gt; en donde se reunieron alrededor de 30 invitados más 15 que lo siguieron en vivo a través del streaming. La presentación se basó en una mezcla de explicaciones teóricas acerca de los conceptos a manejar de una API, y la forma de hacerlo utilizando las funcionalidades de la plataforma.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/APIsARe05.jpg&quot; alt=&quot;Traditional HTTP Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La gente asisitó al evento y se comprometió a propner temas para próximos episodios. Luego, disfrutamos de salgunos snacks y bebidas provistos por la sede, mientras se iban dando varias conversaciones (¡filosofóa y teología incluidos!)&lt;/p&gt;

&lt;p&gt;Podés ver la presentación entera &lt;a href=&quot;https://www.youtube.com/watch?v=DYSffb3rNsE&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DYSffb3rNsE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;acerca-de-apisar&quot;&gt;Acerca de APIsAR&lt;/h2&gt;

&lt;p&gt;APIsAR (de APIs Argentina) es la primer y única comunidad de Argentina que se encuentra para charlar y presentar temas relacionados con el ecosistema de las APIs. Fue fundada hace 3 años por &lt;a href=&quot;http://norbertoherz.com&quot;&gt;quien escribe&lt;/a&gt;, y al momento de escribir este artículo, cuenta con más de 700 miembros. Si querés recibir notificaciones acerca de los próxios encuentros, chequear los foros y contactarte con la gente del grupo, suscribite a la comunidad &lt;a href=&quot;http://meetup.com/APIsAR&quot;&gt;aquí&lt;/a&gt;. También podes seguir las noticias vía twitter (&lt;a href=&quot;http://twitter.com/APIsARgentina&quot;&gt;@APIsARgentina&lt;/a&gt;) y facebook (&lt;a href=&quot;http://facebook.com/APIsArgentina&quot;&gt;APIsArgentina&lt;/a&gt;), y mirar los episodios anteriores en el &lt;a href=&quot;https://www.youtube.com/channel/UCXGY6_mib3hmzz1TQJDoA3A&quot;&gt;canal de Youtube&lt;/a&gt;. También podés unirte al &lt;a href=&quot;https://apisar-slack-inviter.herokuapp.com/&quot;&gt;canal de slack de la comunidad&lt;/a&gt; para participar de los temas y charlar con expertos en la materia.&lt;/p&gt;

&lt;p&gt;Por cualquier consulta, no dudes en contactarme &lt;a href=&quot;http://twitter.com/nohorbee&quot;&gt;@nohorbee&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 May 2017 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/es/2017/05/05/APIsARe05-Azure/</link>
        <guid isPermaLink="true">http://localhost:4000/es/2017/05/05/APIsARe05-Azure/</guid>
        
        <category>APIsAR</category>
        
        <category>meetup</category>
        
        <category>APIs</category>
        
        <category>Azure</category>
        
        
      </item>
    
      <item>
        <title>La teoría &quot;Dueño vs. Víctima&quot; y las trampas de usarla para todo</title>
        <description>&lt;p&gt;Si ya tengo su atención, déjenme decirles que este no es el artículo donde se vaya a explicar el significado de la teoría, el cual se puede encontrar en un sin fin de lugares. De todos modos se va a tratar de manera general, ya que estamos hablando del tema. Este artículo es más bien acerca de las trampas en las que cae la gente cuando intenta leer gente, y de cómo el mal uso de esta teoría puede llevarnos a perdernos mensajes importantes.&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;p&gt;De manera resumida, la teoría “dueño vs. víctima” dice que hay (al menos) 2 tipos de actitudes cuando enfrentamos una situación, y que además, usamos diferentes lenguajes dependiendo de la actitud que hayamos tomado. Voy a usar un ejemplo al azar de &lt;a href=&quot;(http://evelynbrooks.com/do-you-use-victim-language/)&quot;&gt;este artículo&lt;/a&gt;, pero por favor, léanlo entero para entender mejor el concepto si es que todavía no lo conocen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Víctima: Me vuelve loco!&lt;/li&gt;
  &lt;li&gt;Dueño: Me vuelvo loco cuando esto pasa.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Habiendo dicho esto, la teoría puede ser usada por cualquiera que esté intentando mejorar sus capacidades de comunicación, o por gente intentando identificar este comportamiento en otros (colegas, parientes, famosos, etc). El artículo está principalmente orientado a este segundo grupo.&lt;/p&gt;

&lt;h1 id=&quot;un-comportamiento-repetido&quot;&gt;Un comportamiento repetido&lt;/h1&gt;

&lt;p&gt;Recuerdo (quizás) 15 años atrás, mucha gente hablando de PNL (que en realidad había sido estudiada y desarrollada en la década del 70). Se volvió popular entre mi círculo profesional, principalmente porque se enseñaba en la universidad por algunos profesores que hablaban del tema como si fuera una especie de superpoder que se podía desarrollar simplemente leyendo un par de libros, y aprendiendo algunos trucos para finalmente leerle la mente a alguien. Los ejemplos que se daban durante las clases eran adoptados rápidamente por los estudiantes y, lo que es peor, todos pensaban que analizar señales independientes era el uso correcto de este nuevo superpoder. Entonces, si mirabas arriba a la derecha, estabas usando la parte creativa de tu cerebro, ergo, estabas imaginando algo, y por lo tanto, estabas mintiendo. La gran trampa: No se puede aislar una expresión y sacar una conclusión. Las expresiones son evaluadas en conjunto, y lo que es más complicado, no se analizan sino que se perciben. Hay un punto en el cual se está lo suficientemente entrenado para empezar a “tener impresiones” más allá de lo que se está diciendo, pero sin entender del todo qué es lo que nos llevó a tener esa impresión. Se vuelve natural. De todos modos, no importa que tan buenos nos volvamos, si todavía estamos intentando “leer gente” lo estamos entendiendo todo mal. PNL es acerca de entender que las personas se comunican de maneras diferentes, y de esa forma, contar con más herramientas para entender y enviar mejores mensajes.&lt;/p&gt;

&lt;p&gt;Vi a “usuarios” de la teoría “Dueño vs. víctima” caer en esta misma trampa, convirtiendo este maravilloso concepto en una máquina de etiquetar ¿Cuál es el objetivo de meter a alguien en la caja de víctimas?&lt;/p&gt;

&lt;h1 id=&quot;trucos-sencillos-para-escapar-de-este-patrón&quot;&gt;Trucos sencillos para escapar de este patrón&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Conocer la teoría en profundidad: Puede que hayas escuchado al respecto en el pasillo, o como una conversación al pasar en medio de una reunión. Incluso puede que hayas leído algún artículo incompleto (como este). El buen material siempre va a hablar de los orígenes de la teoría y su potencial al momento de ayudar gente a superar situaciones complicadas.&lt;/li&gt;
  &lt;li&gt;Intentar tomar un enfoque holístico: Comentar acerca de una frustración en voz alta de vez en cuando no convierte a nadie en una “víctima” (del mismo modo que encargarte de algún problema cada tanto no te convierte en un dueño). El contexto lo es todo cuando analizamos comportamientos.&lt;/li&gt;
  &lt;li&gt;Evitar etiquetar personas: “Ella es dueño” o “El es víctima” son solamente válidos si te referís a que alguien está en un estado en un momento particular. Si no pensás que esta realidad puede cambiar ¿para qué invertir tiempo intentando entender la teoría?&lt;/li&gt;
  &lt;li&gt;Comprender que hacer: Detectar este tipo de conducta puede tener un impacto tremendo para el equipo y la compañía. Pero primero tiene que ser útil a la persona a la que querés ayudar a manejar un problema.&lt;/li&gt;
  &lt;li&gt;Evitar utilizarla en la conversación: “Noté que utilizas algo de lenguaje de víctima cuando hablás” es definitivamente una mala forma de abordar a la persona. Primero que nada, es tan solo nuestra impresión. En segundo lugar, solamente expone algo que es obvio para nosotros, pero no está agregando ningún valor en el camino a superar la fase. Mejor intentar con “Ey ¿estás teniendo problemas con esto?”.&lt;/li&gt;
  &lt;li&gt;Ser honesto con uno mismo: ¿Qué tan a menudo nos prestamos atención y analizamos si no estamos en ese lugar? ¿Cómo lidiaríamos con eso? ¿Serviría nuestra experiencia para otros en esa situación?&lt;/li&gt;
  &lt;li&gt;Evaluar la situación uno mismo: Esto no debería ser una excusa pero, ¿alguna vez notaste a una víctima utilizando lenguaje de víctima? Esto se debe a que &lt;strong&gt;una víctima ES una víctima&lt;/strong&gt;. Por lo general, es casi imposible cambiar esa realidad. Pero ayudar a alguien a procesar esa realidad de forma diferente es más sencillo y factible.&lt;/li&gt;
  &lt;li&gt;Buscar un mentor: Si considerás que no estás siendo capáz de ayudar a alguien y que podés mejorar, identificá a gente que sea muy buena analizando conductas y pediles ayuda y coaching para dominar el arte de &lt;strong&gt;ayudar a alguien más&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Jan 2017 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/es/2017/01/23/Victim-Vs-Owner/</link>
        <guid isPermaLink="true">http://localhost:4000/es/2017/01/23/Victim-Vs-Owner/</guid>
        
        <category>Dueño</category>
        
        <category>Víctima</category>
        
        <category>Management</category>
        
        <category>Comunicación</category>
        
        <category>PNL</category>
        
        
      </item>
    
      <item>
        <title>APIsAR Episodio IV - Introducción a GraphQL</title>
        <description>&lt;p&gt;Durante un evento realizado el pasado 9 de Noviembre de 2016, en Buenos Aires &lt;a href=&quot;https://twitter.com/qcho86&quot;&gt;Horacio “Qcho” Gomez&lt;/a&gt; dió una introducción a &lt;a href=&quot;http://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;, la tecnología desarrollada y utilizada por facebook para constuir sus propias APIs.&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;h2 id=&quot;acerca-del-evento&quot;&gt;Acerca del evento&lt;/h2&gt;

&lt;p&gt;El evento ocurrió en las oficinas de &lt;a href=&quot;http://avature.net/&quot;&gt;Avature&lt;/a&gt; en donde se reunieron alrededor de 50 invitados más 20 que lo siguieron en vivo a través del streaming. La presentación contó con una breve introducción teórica seguida de una serie de “demos” cubriendo los distintos aspectos de la &lt;a href=&quot;https://facebook.github.io/graphql/&quot;&gt;Spec de GraphQL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/APIsARe04.jpg&quot; alt=&quot;Traditional HTTP Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La gente en el público se mostró activa, haciendo muchas preguntas interesantes acerca de las capacidades del lenguaje y la posibilidad de aplicarlas en sus proyectos diarios.&lt;/p&gt;

&lt;p&gt;Podés ver la presentación entera &lt;a href=&quot;https://www.youtube.com/watch?v=snsHBPwb3NI&quot;&gt;aquí&lt;/a&gt; y &lt;a href=&quot;https://drive.google.com/open?id=0B6CdAm2r3U8mRnNfc1NTYjZiSEk­&quot;&gt;bajarte los slides&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/snsHBPwb3NI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;acerca-de-apisar&quot;&gt;Acerca de APIsAR&lt;/h2&gt;

&lt;p&gt;APIsAR (de APIs Argentina) es la primer y única comunidad de Argentina que se encuentra para charlar y presentar temas relacionados con el ecosistema de las APIs. Fue fundada hace 3 años por &lt;a href=&quot;http://norbertoherz.com&quot;&gt;quien escribe&lt;/a&gt;, y al momento de escribir este artículo, cuenta con más de 600 miembros. Si querés recibir notificaciones acerca de los próxios encuentros, chequear los foros y contactarte con la gente del grupo, suscribite a la comunidad &lt;a href=&quot;http://meetup.com/APIsAR&quot;&gt;aquí&lt;/a&gt;. También podes seguir las noticias vía twitter (&lt;a href=&quot;http://twitter.com/APIsARgentina&quot;&gt;@APIsARgentina&lt;/a&gt;) y facebook (&lt;a href=&quot;http://facebook.com/APIsArgentina&quot;&gt;APIsArgentina&lt;/a&gt;), y mirar los episodios anteriores en el &lt;a href=&quot;https://www.youtube.com/channel/UCXGY6_mib3hmzz1TQJDoA3A&quot;&gt;canal de Youtube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por cualquier consulta, no dudes en contactarme &lt;a href=&quot;http://twitter.com/nohorbee&quot;&gt;@nohorbee&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Nov 2016 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/es/2016/11/10/APIsARe04-GraphQL/</link>
        <guid isPermaLink="true">http://localhost:4000/es/2016/11/10/APIsARe04-GraphQL/</guid>
        
        <category>API</category>
        
        <category>Meetup</category>
        
        <category>APIsAR</category>
        
        <category>GraphQL</category>
        
        <category>Avature</category>
        
        
      </item>
    
      <item>
        <title>Acerca de la predictibilidad y definir claramente los objetivos del equipo</title>
        <description>&lt;p&gt;Es responsabilidad de un Manager de Ingeniería garantizar la salud del equipo medida en términos de cualidades tales como performance, compromiso, responsabilidad y predictibilidad (entre un montón de otras). Sin embargo, esto no puede ser forzado por el Manager. En realidad el esfuerzo del equipo, y su correcta canalización son factores decisivos para alcanzar estos objetivos. Porque estos, son objetivos, ¿o no?&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;p&gt;Bueno, esta primer discusión es interesante. ¿Cuál es el valor real de alcanzar estas cualidades? La compañía ¿puede vender “predictibilidad” a sus clientes? ¿Es la predictibilidad una &lt;em&gt;feature&lt;/em&gt; de la aplicación?&lt;/p&gt;

&lt;h2 id=&quot;predictibilidad-una-cualidad-o-un-objetivo-del-equipo&quot;&gt;Predictibilidad: ¿Una cualidad o un objetivo del equipo?&lt;/h2&gt;

&lt;p&gt;Si nos paramos en los zapatos de la “persona de producto”, podríamos decir que la predictibilidad es una forma de alcanzar los objetivos del equipo. Aún más, desde la perspectiva de producto, podríamos pensar que “predictibilidad” ni siquiera es algo (al menos hasta que el equipo deja de ser predecible). Pero desde el punto de vista del equipo, la predictibilidad es un objetivo en sí mismo. La parte engañosa para entender esto (entre otros tantos temas medio confusos) es analizar cuál es la causa y cuál el efecto. Hasta ahora, la predictibilidad parece ser la causa, y tener una nueva feature en tiempo y forma es el efecto. Esto es correcto. La predictibilidad es una causa, y por lo tanto no puede ser un efecto. ¿O si? ¡Por supuesto que sí! Cuando analizamos relaciones de “causa-efecto” siempre debemos recordar que todo se trata de una cadena. A-&amp;gt;B-&amp;gt;C-&amp;gt;…Z. Ahora, digamos que una feaure en tiempo y forma es &lt;strike&gt;el&lt;/strike&gt; un posible efecto causado por la predictibilidad (entre otro conjunto de causas). Y ahora, la parte importante: ¿Cuáles son las causas para lograr predictibilidad (como efecto/objetivo)?&lt;/p&gt;

&lt;p&gt;Esta larga introducción no es solo el efecto de mi incapacidad de resumir. Estoy intentando establecer 2 hechos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La predictibilidad es un objetivo del equipo (en medio de una cadena de causas y efectos).&lt;/li&gt;
  &lt;li&gt;El equipo necesita sentir su propia inclinación por ser predecible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ahora si, es una responsabilidad del Manager de Ingeniería alentar al equipo a lograrlo, y &lt;strong&gt;proveer las herramientas necesarias para que esto ocurra&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Pasemos a la historia&lt;/p&gt;

&lt;h2 id=&quot;capítulo-i-un-equipo-consciente&quot;&gt;Capítulo I: Un equipo consciente&lt;/h2&gt;

&lt;p&gt;Mi equipo y yo la estábamos pasando mal. El roadmap estaba en un punto intermedio entre intenso e imposible. No parabamos de comprometer funcionalidades de más (y no cumplir), la predictibilidad era baja y cayendo rápidamente (por debajo del 40% durante varias sprints seguidas), y a pesar de que los refuerzos estaban comenzando a llegar, el esfuerzo inicial (ramp up) estaba por dejarnos en una situación incluso peor (al menos temporalmente). De a poco, managers de mayor jerarquía empezaban a aparecerse en nuestras daily meetings intentando descifrar lo que estaba pasando. Yo llamé a una reunión “no regular” en donde estaba a punto de tirar todas mis ideas arriba de la mesa cuando de repente, lo impensado. Uno de los miembros del equipo preguntó “¿Cuál es el problema con la predictibilidad? ¿Por qué de pronto es tan importante ser predecibles? ¿Por qué nos estamos preocupando tanto por los compromisos que no estamos cumpliendo?”. Yo estaba desconcertado. No podía pensar que esas preguntas estaban impulsadas por dudas legítimas, y tuve que frenarme de responder a alguien que, en ese momento, pensé que me estaba “trolleando”.&lt;/p&gt;

&lt;p&gt;Y por suerte me frené, porque eso me obligó a comenzar un diálogo con esta persona y el equipo entero para descubrir que no había un entendimiento compartido acerca de lo que estábamos intentando lograr.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lección 1&lt;/strong&gt;: Asegurate de que todos estén en el barco. Entiendan que la predictibilidad es un objetivo del equipo y como tal, necesita ser definida y comunicada de una manera &lt;a href=&quot;https://en.wikipedia.org/wiki/SMART_criteria&quot;&gt;S.M.A.R.T&lt;/a&gt;. Como mencioné al comienzo, es imposible para un manager lograr este objetivo por sí mismo. Es un objetivo del equipo, y va a ser un logro del equipo.&lt;/p&gt;

&lt;h2 id=&quot;capítulo-ii-causas-primordiales&quot;&gt;Capítulo II: Causas primordiales&lt;/h2&gt;

&lt;p&gt;Yo ya era un manager experimentado, y había sido uno exitoso. Conocía todo tipo de trucos y métodos para hacer que las cosas pasaran. O al menos eso pensaba. Había estado intentando impulsar algunas ideas en el equipo que, en mi opinión, nos iban a llevar a mejorar la manera en la que estábamos trabajando (Predictibilidad incluida). Pero por alguna razón, sprint tras sprint no lograba que el equipo implementara estas ideas. Cada tanto solía pensar “ni estamos tratando”. La mayoría de estas ideas dependían de la implementación de algún mecanismo de seguimiento de tiempo, y no es novedad que esto no les gusta a los desarrolladores. Bueno, esto no es del todo cierto, y a decir verdad, es hasta un enunciado injusto. El “problema” real es que los developers generalmente son gente inteligente. Si tu equipo no está poblado con esta especie, estás en grandes problemas. La gente inteligente tiende a evitar los trámites sin sentido y, siendo honestos, salvo que haya una buena razón detrás de esto, realizar seguimiento del tiempo es exáctamente eso.&lt;/p&gt;

&lt;p&gt;Durante una de las reuniones individuales que tuve con los miembros del equipo (luego del incidente “honestamente-no-un-troll”), me enfoqué en dos temas principales:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Definir claramente y de forma conjunta los objetivos individuales y los del equipo.&lt;/li&gt;
  &lt;li&gt;Entender las causas primordiales que impedían que el equipo alcanzara estos objetivos (desde la perspectiva de cada miembro).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para que el segundo punto se dé, hay una precondición que no había mencionado antes porque no era un problema en nuestro equipo (pero que podría serlo en el tuyo): Como Manager, tenés que asegurarte de crear un ambiente de trabajo seguro. Cada miembro del equipo debería poder llegar a vos (o incluso saltarse un nivel si fuera necesario) planteando sus pensamientos sin ningún tipo de temor. Por ejemplo, no importa qué tan antinatural era para mi la pregunta “¿Por qué la predictibilidad es tan importante?”. Frené mi instinto natural de cortar esa conversación. En este caso, era significativa, pero incluso si no lo hubiese sido, era una gran oportunidad de crear relaciones de confianza. &lt;strong&gt;Si no podés con esto, vos y tu equipo están condenados&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Resulta que había montones de posibles causas primordiales para tan baja predictibilidad. Estas pueden variar de equipo a equipo, pero en este caso:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Falta de comportamiento de equipo: Las Stories eran trabajadas por individuos y no por el equipo. Por lo tanto, no había interacción durante las daily meetings, ni capacidad de maniobra para aquellas stories que iban camino a caerse. No había un diseño unificado, y no se compartía conocimiento.&lt;/li&gt;
  &lt;li&gt;Visión de producto poco clara: El equipo no era consciente del panorama general, y no estaba recibiendo las especificaciones funcionales con suficiente tiempo como para entenderlas. Esto generaba estimaciones constantemente imprecisas.&lt;/li&gt;
  &lt;li&gt;Story Points sin convención: Hablando con uno de los desarrolladores, acordamos que una story debería haberse terminado ya que estaba estimada apropiadamente en 5 puntos, que parecía ser una medida de puntos factibles por desarrollador durante una sprint. No obstante, la story no fue completada. Cuando pregunté a otros desarrolladores acerca de su opinión acerca de la cantidad de story points por persona durante una sprint, no obtuve dos respuestas que coincidieran.&lt;/li&gt;
  &lt;li&gt;Ausencia de métricas: Como con casi todo, las estimaciones no pueden ser mejoradas si no pueden ser medidas. Y es muy poco probable que puedas ser predecible si tus estimaciones andan flojas. ¿Cuánto tiempo podés escribir código por día? ¿Qué tan imprecisas son tus estimaciones? ¿Cómo vamos con esta story? entre otras preguntas, deberían ser fáciles de responder si queremos controlar nuestra capacidad (primero) y nuestra predictibilidad (después).&lt;/li&gt;
  &lt;li&gt;Las herramientas y procesos se traban en la mitad: Las herramientas y los procesos son geniales. Implementados como corresponde, estos pueden prevenir bugs, acelerar la velocidad de desarrollo, asegurar deployments más tranquilos, entre una larga lista de beneficios. Pero cuando una herramienta no está funcionando como debe, esto puede convertirse en una pesadilla y una sentencia &lt;code&gt;devs.forEach(frustrate)&lt;/code&gt;. A nadie le gusta trabajar horas interminables, pero todos aceptamos que esto puede pasar de vez en cuando. Resulta que los esfuerzos adicionales causados por una “herramienta de test estúpida” que se queda sin recursos y se convierte en el mayor cuello de botella del departamento de ingeniería, no está ni remotamente cerca de ser aceptable para un grupo de gente inteligente. Además del efecto demotivador, ¿Cómo alguien podría reclamar predictibilidad cuando cosas inesperadas como estas pasan todo el tiempo?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La anterior es una versión abreviada de lo que pasaba en la realidad, pero:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ejemplifica el escenario.&lt;/li&gt;
  &lt;li&gt;Muestra algunas situaciones que encontré en otros equipos y en otras empresas.&lt;/li&gt;
  &lt;li&gt;Establece un par de situaciones fáciles de arreglar, pero difíciles de detectar.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;capítulo-iii-acciones-impulsadas-por-objetivos&quot;&gt;Capítulo III: Acciones impulsadas por objetivos&lt;/h2&gt;

&lt;p&gt;No era cuestión de conocer las respuestas, sino de hacer las preguntas. Como mencioné, estaba (y siempre estuve) listo para aparecer con mi caja de herramientas, solucionar los problemas y salvar el día, cuando mi equipo me enseñó una valiosa lección: primero acordemos los objetivos y luego discutamos acerca de cómo alcanzarlos. Una vez que todos coincidimos en que queríamos ser predecibles (y por qué lo necesitábamos), sugerir las herramientas fue mucho más sencillo. Pero más importante que esto:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El equipo propuso algunas de estas herramientas.&lt;/li&gt;
  &lt;li&gt;El equipo me solicitó sugerir aquellas herramientas que ellos no conocían.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Todos sabemos cuan importante es, pero muy frecuentemente necesitamos un gran equipo para recordarnos que &lt;strong&gt;no somos la persona más inteligente de la sala&lt;/strong&gt;, e incluso si lo fuéramos, no hay forma de ser más inteligentes que el equipo entero. Si vos pensás que lo sos, te tengo una mala noticia (podés elegir cual):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Necesitás un equipo más inteligente.&lt;/li&gt;
  &lt;li&gt;Tu equipo &lt;strong&gt;definitivamente&lt;/strong&gt; necesita un manager más inteligente. Apuesto que esta segunda es la correcta, incluso si vos elegiste la otra.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Los objetivos eran una cadena (o un árbol) de causas y efectos&lt;/strong&gt;. Estos objetivos podían agruparse como un gran hito: remover/mitigar las “causas primordiales” (mencionadas en el capítulo anterior).&lt;/p&gt;

&lt;p&gt;Entonces, a modo de resumen, acordamos:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Insistir al equipo correspondiente para que arreglara los problemas con las herramientas, siendo flexibles en soportar temporalmente el esfuerzo adicional requerido para poder trabajar.&lt;/li&gt;
  &lt;li&gt;Mantener registro del tiempo invertido en lidiar con las herramientas y elaborar reportes para ayudar a los otros managers a priorizar correctamente los arreglos.&lt;/li&gt;
  &lt;li&gt;Dedicar el equipo entero a trabajar en el mismo set de funcionalidades durante las sprints.&lt;/li&gt;
  &lt;li&gt;Registrar el tiempo invertido en construir las funcionalidades (tiempo de trabajo continuo e ininterrumpido por día).&lt;/li&gt;
  &lt;li&gt;Registrar el esfuerzo restante a nivel tarea (antes estábamos viendo decaer los puntos cuando cerrábamos una historia). Este tema merece su propio artículo si no estás en tema. Pero básicamente hay que recordar que “Estimación Original” - “Tiempo dedicado” no siempre es igual a “Esfuerzo Restante”. Tener la capacidad de detectar esta diferencia tan pronto como sea posible &lt;strong&gt;es una herramienta decisiva&lt;/strong&gt; al momento de ser predecibles.&lt;/li&gt;
  &lt;li&gt;Mostrar el progreso parcial durante las daily meetings (burn-down chart con granularidad fina).&lt;/li&gt;
  &lt;li&gt;Discutir acerca de cualquier desvío significativo tan pronto como este apareciera.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por supuesto que esto es solo un resumen. Ni siquiera puedo recordar cuántos detalles fueron definidos sobre la marcha y si todas estas fueran las acciones originales que acordamos.&lt;/p&gt;

&lt;h2 id=&quot;capítulo-iv-la-parálisis-causada-por-demasiados-cambios&quot;&gt;Capítulo IV: La parálisis causada por “demasiados cambios”&lt;/h2&gt;

&lt;p&gt;Estábamos por comenzar un gran refactor en la forma en que solíamos trabajar. Cuando escribimos código, tenemos (o deberíamos tener) una gran cantidad de tests unitarios, y estamos bastante seguros de no estar rompiendo nada. Pero esto es diferente. No existen frameworks de tests unitarios para personas.&lt;/p&gt;

&lt;p&gt;No nos paralizamos una vez que acordamos y tomamos las decisiones como equipo. Pero no puedo evitar pensar que, antes de esto, conocer todo el trabajo implicado en este refactor era un freno para al menos comenzar con las discusiones.&lt;/p&gt;

&lt;p&gt;Yo solía pasar mucho tiempo pensando cómo articular todas las acciones necesarias. Mientras esto es algo bueno, &lt;strong&gt;planear&lt;/strong&gt; puede convertirse en una trampa. &lt;strong&gt;Siempre asegurate de que “planear” es tu herramienta para organizar los esfuerzos de tu equipo, y no una excusa para procrastinar profesionalmente&lt;/strong&gt;. Si no sabés como hacer esto, usá el viejo análisis “causa efecto”. Pensá cuáles son los objetivos que querés alcanzar construyendo un plan.&lt;/p&gt;

&lt;p&gt;En este caso, planear la forma en que íbamos a proceder no tenía sentido. Pero implementar todos los cambios al mismo tiempo nos habría llevado a una situación donde:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No íbamos a tener claridad acerca de qué cambios producían qué resultados.&lt;/li&gt;
  &lt;li&gt;No íbamos a ser capaces de identificar si algún cambio era en realidad un retroceso.&lt;/li&gt;
  &lt;li&gt;Los cambios requieren aprendizaje. Demasiados cambios implican aprender demasiadas cosas al mismo tiempo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nunca dejes que este tipo de cuestiones te frenen. Necesitás empezar con algo, medir los primeros resultados y decidir basado en las métricas arrojadas. Una vez más, &lt;strong&gt;no sos la persona más inteligente de la sala&lt;/strong&gt;. Discutí con tu equipo acerca de los cambios a implementar al principio, recolectá datos, presentalos en la reunión de retrospectiva y discutan otra vez acerca de “qué sigue”.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Para el final de la tercera sprint desde que el equipo comenzó este refactor (ítems logrados):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;El comportamiento del equipo mejoró radicalmente. Cualquier miembro del equipo era capaz de acudir en ayuda de cualquier otro.&lt;/li&gt;
  &lt;li&gt;El equipo era capaz de identificar las stories que estaban en riesgo y los motivos de las demoras (subestimación, problemas con las herramientas, bajo rendimiento individual).&lt;/li&gt;
  &lt;li&gt;El equipo tenía suficientes datos para tomar decisiones (comenzar con pruebas parciales antes de que la story estuviera completa, cambiar a una story diferente para evitar riesgos).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para el final de la cuarta sprint:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;El equipo estimaba más rápido y las estimaciones eran más precisas.&lt;/li&gt;
  &lt;li&gt;La visión de producto era compartida por el equipo entero.&lt;/li&gt;
  &lt;li&gt;Los desvíos respecto del roadmap eran previstos y se tomaban medidas correctivas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;“Ítems logrados”-&amp;gt;”Predictibilidad”-&amp;gt;”Features en tiempo y forma”&lt;/strong&gt;. Todos eslabones en la cadena.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Nov 2016 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/es/2016/11/01/about-predictability-and-team-goals/</link>
        <guid isPermaLink="true">http://localhost:4000/es/2016/11/01/about-predictability-and-team-goals/</guid>
        
        <category>Predictability</category>
        
        <category>Accountability</category>
        
        <category>Team</category>
        
        <category>Building</category>
        
        <category>Management</category>
        
        <category>Goals</category>
        
        <category>Communication</category>
        
        <category>Expectations</category>
        
        
      </item>
    
      <item>
        <title>Los acrónimos realmente apestan</title>
        <description>&lt;p&gt;Mientras leía “Elon Musk”, en un colectivo, camino a casa, no pude evitar reirme de un email que envió a todos los empleados de SpaceX acerca del mal o excesivo uso de acrónimos. El asunto del mail era “Acronyms Seriously Suck” (Los acrónimos realmente apestan) (ustedes mismos pueden resolver el acrónimo para esa línea).&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;p&gt;Me hizo acordar a mis tiempos en IBM Argentina, en donde este anti-patrón era tan popular que incluso existía un rumor que contaba que alguna vez, los acrónimos estaban prohibidos (y yo particularmente, creo en este rumor. ¡Hasta el nombre de la empresa es un acrónimo!)&lt;/p&gt;

&lt;p&gt;Este es un claro ejemplo de que no siempre “Menos es Más”. A veces, “Suficiente es simple y exáctamente Suficiente”. ¡Que lo disfruten!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hay una tendencia progresiva en el uso de acrónimos inventados en SpaceX. El uso excesivo de acrónimos inventados es un impedimento de comunicación significativo, y es imperativamente importante mantener una buena comunicación a medida que vamos creciendo. Individualmente, un par de acrónimos aquí y allá pueden no parecer tan malos, pero si mil personas los están inventando, con el correr del tiempo el resultado va a ser un enorme glosario que deberá ser entregado a los empleados que ingresan a la compañía. Nadie realmente puede recordar todos estos acrónimos y a nadie le gusta quedar como un tonto en una reunión, por lo que simplemente nos sentamos allí y permanecemos ignorantes. Esto es particularmente difícil para los nuevos empleados.&lt;/p&gt;

  &lt;p&gt;Esto necesita parar inmediatamente o voy a tomar medidas drásticas. Ya he advertido lo suficiente con el correr de los años. A menos que un acrónimo sea aprobado por mi, no debe ser parte del glosario de SpaceX. Si existe algún acrónimo que no pueda ser razonablemente justificado, debe ser eliminado, como ya lo he solicitado en el pasado.&lt;/p&gt;

  &lt;p&gt;Por ejemplo, no debería haber acrónimos como “BPH” [banco de pruebas horizontal] (originalmente “HTS” [horizontal test stand]) o “BPV” [banco de pruebas vertical] (originalmente “VTS” [vertical test stand]) para bancos de prueba. Estos son particularmente ridículos ya que contienen palabras innecesarias. Un banco (stand) en nuestro sitio de pruebas es obviamente un banco de &lt;em&gt;pruebas&lt;/em&gt;. BPV-3 (VTS-3) tiene cuatro sílabas comparado con “Trípode” (tripod) que tiene solo dos, por lo que el maldito acrónimo en realidad ¡es más largo de pronunciar que el nombre real! La clave para probar un acrónimo es preguntarse si ayuda o daña la comunicación. Un acrónimo que la mayoría de los ingenieros fuera de SpaceX ya conocen, como ser GUI, puede ser usado. Está bien también inventar un par de acrónimos/contracciones de vez en cuando, asumiendo que yo los he aprobado, por ejemplo MVac and M9 en lugar de Merlin 1C-Vacuum o Merlin 1C-Sea Level, pero estos casos deben ser mantenidos al mínimo.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 04 Oct 2016 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/es/2016/10/04/ass/</link>
        <guid isPermaLink="true">http://localhost:4000/es/2016/10/04/ass/</guid>
        
        <category>Elon</category>
        
        <category>Musk</category>
        
        <category>SpaceX</category>
        
        <category>Tesla</category>
        
        <category>SolarCity</category>
        
        <category>Acronyms</category>
        
        <category>fun</category>
        
        
      </item>
    
      <item>
        <title>Una recopilación de patologías de los Arquitectos de Software</title>
        <description>&lt;p&gt;&lt;em&gt;Por &lt;a href=&quot;https://ar.linkedin.com/in/mchicote&quot;&gt;Marcos Chicote&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/guidodecaso&quot;&gt;Guido de Caso&lt;/a&gt;, y &lt;a href=&quot;https://twitter.com/nohorbee&quot;&gt;Norberto Herz&lt;/a&gt;&lt;/em&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Poco después de que el campo de las arquitecturas de software naciera formalmente, gracias al trabajo de Garlan, Shaw, Notkin y otros a principios de los 90s, el rol del “Arquitecto de Software” apareció en el área del desarrollo de software. De acuerdo con las definiciones de la comunidad de Arquitectura de Software, el trabajo de un arquitecto es definir el diseño de alto nivel de un sistema de software, o en otras palabras, tomar las principales decisiones de diseño para construir ese puente entre requerimientos e implementación.&lt;br /&gt;
Sin embargo, llevado a la práctica no es tan sencillo. El trabajo del arquitecto está lleno de “trampas” y contradicciones. En este artículo describimos cinco patologías que pueden afectar a los arquitectos de software, incluyendo síntomas y tratamiento, con el objeto de disparar algunas discusiones acerca del rol y su evolución esperada.&lt;/p&gt;

&lt;!--MORE--&gt;

&lt;h2 id=&quot;introducción&quot;&gt;Introducción&lt;/h2&gt;

&lt;p&gt;No hay duda de que la Ingeniería de Software ha evolucionado constantemente durante las últimas cinco décadas. Los sistemas operativos nos han provisto cada vez mejor de una capa de abstracción de las complejidades del hardware moderno. Los procesos Lean y Agile nos han permitido iterar más velozmente. Tecnologías más económicos y accesibles han disminuido la barrera para obtener equipos de alta performance y han abierto la puerta a solucionar problemas más ambiciosos en diversos campos tales como la medicina, la industria aeroespacial, ámbito académico o comercio electrónico.&lt;/p&gt;

&lt;p&gt;La forma en que los ingenieros nos organizamos para construir software que soluciona problemas complejos también ha cambiado. Desde personas escribiendo programas para mainframes hasta grandes empresas con varias líneas de productos y plataformas. El rol del Arquitecto de Software ha aparecido mayormente en el contexto de aplicaciónes multi-capa en las cuales la cantidad de opciones de implementación creció exponencialmente. &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=579257&quot;&gt;[1]&lt;/a&gt; &lt;a href=&quot;http://www.bredemeyer.com/pdf_files/role.pdf&quot;&gt;[2]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Las responsabilidades y tareas de los Arquitectos de Software son variadas y dependen en gran medida de la compañía y el contexto. Hay leves variaciones de estas responsabilidades dependiendo de si nos referimos a un Arquitecto de Aplicación o un Enterprise Architect. Pero, independientemente de dichas diferencias, podemos definir el alcance del Arquitecto de Software mayormente por las siguientes áreas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Subdividir el diseño de aplicaciónes grandes en partes más pequeñas y fáciles de manejar.&lt;/li&gt;
  &lt;li&gt;Identificar tecnologías, frameworks, patrones, mejoras de proceso y mejores prácticas que son adoptadas por una organización y comunicarlas a los desarrolladores, estableciendo relaciones de mentoring.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pero, mientras esta enumeración sirve al propósito de describir un &lt;em&gt;template&lt;/em&gt; de la descripción del trabajo de un Arquitecto de Software, no responde a preguntas tales como qué características o tareas diferencian a los Arquitectos de Software que más impacto generan, de sus colegas. Cómo está definido el Path de carrera de un Arquitecto de Software y de dónde vienen la mayoría de ellos. Cómo pueden encontrar el equilibrio entre convertirse en grandes generalistas en lugar de los mejores especialistas.&lt;/p&gt;

&lt;p&gt;En este artículo nos proponemos explorar y discutir algunos de estos temas. Lo hacemos mediante una serie de posibles contradicciones o falacias que surgen de la tensión entre fuerzas opuestas en la vida de un Arquitecto de Software: Ser un mentor vs. evangelizar, escribir código vs. estar en reuniones, entre otros dilemas.&lt;/p&gt;

&lt;p&gt;Presentamos estas aparentes contradicciones como patologías. La palabra “patología” tiene su origen en el antiguo Griego en donde pathos (πάθος) significa “experiencia” o “sufrimiento”, y -logia (-λογία) significa “estudio de”. Esperamos que este artículo dispare discusiones interesantes entre los compañeros Arquitectos de Software y nos haga pensar acerca de algunos problemas frecuentes que enfrentamos en nuestra práctica profesional.&lt;/p&gt;

&lt;p&gt;El lector atento debería ser advertido de que algunas de las patologías serán particularmente más acertadas para Arquitectos de Software en situaciones específicas como ser compañías con equipos de desarrollo distribuidos geográficamente, o compañías de tamaño medio a grande. En cualquier caso, creemos que las mismas abarcan temas relevantes a la forma de pensar acerca de los Arquitectos de Software, su rol, su carrera, y finalmente, su impacto.&lt;/p&gt;

&lt;h2 id=&quot;las-patologías&quot;&gt;Las Patologías&lt;/h2&gt;

&lt;p&gt;En las siguientes subsecciones describiremos algunas de las patologías mencionadas anteriormente en términos de cómo detectarlas y resolverlas&lt;/p&gt;

&lt;h3 id=&quot;el-síndrome-del-mejor-desarrollador-sin-impacto&quot;&gt;El Síndrome del mejor desarrollador sin impacto&lt;/h3&gt;
&lt;p&gt;&lt;big&gt;&lt;i&gt;“Esta funcionalidad es extremadamente compleja. Debería estar escribiéndola yo mismo”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;descripción&quot;&gt;Descripción&lt;/h4&gt;

&lt;p&gt;De acuerdo al Principio de Pareto, acordamos que el 80% de la complejidad de una aplicación proviene del 20% de sus funcionalidades. Siendo el Arquitecto de Software el mejor programador del equipo, todo parece indicar que gran parte de estas funcionalidades deberían ser escritas por el.&lt;/p&gt;

&lt;h4 id=&quot;síntomas-y-diagnóstico&quot;&gt;Síntomas y Diagnóstico&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Arquitecto de Software con stress: “Nunca encuentro el tiempo para trabajar en estas funcionalidades”&lt;/li&gt;
  &lt;li&gt;Planos faltantes o vagamente definidos: “El diseño de alto nivel está completo, el resto de las partes son deducibles”&lt;/li&gt;
  &lt;li&gt;Desarrollador con stress: “Los diseños no tienen sentido. Mis colegas parecen estar escribiendo aplicaciónes diferentes”&lt;/li&gt;
  &lt;li&gt;Desarrolladores Senior incómodos: “Esta funcionalidad debería escribirla otra persona. Yo debería estar escribiendo el 20% más complejo”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&quot;tratamiento&quot;&gt;Tratamiento&lt;/h4&gt;

&lt;p&gt;Antes de hablar del tratamiento, proponemos discutir el concepto de que el Arquitecto de Software es de hecho el mejor desarrollador del equipo. Si bien es cierto que un buen Arquitecto de Software debería tener habilidades de programación sobresalientes, el rol requiere un set de habilidades más pulidas y algo diferentes que las del desarrollador. Habiendo dicho esto, tiene sentido que no todos los Arquitectos de Software surjan del mejor desarrollador de un equipo, sino de uno realmente bueno que encontró la forma de desarrollar otras habilidades.&lt;/p&gt;

&lt;p&gt;Creemos que el mejor desarrollador debería ser responsable de escribir las funcionalidades más complejas mientras que el Arquitecto de Software debería estar trabajando en hacer esas funcionalidades más sencillas de escribir. Construir un gran diseño de alto nivel tiende a simplificar las cosas evitando ambigüedades, e identificando oportunidades de reutilización. En muchos casos, cuando esas oportunidades son lo suficientemente claras, surgen los beneficios de utilizar librerías y frameworks existente o la necesidad de escribir nuevos. Este también es el trabajo de un buen Arquitecto de Software.&lt;/p&gt;

&lt;p&gt;Entonces, como un Arquitecto de Software, pensá una buena arquitectura para: construir un buen diseño, crear los mejores diseños, encontrar oportunidades de simplificación y ejecutarlas ya sea escribiendo o utilizando los frameworks adecuados, ayudar al equipo a definir y adoptar mejores prácticas y un proceso de desarrollo. De esa forma no vás a estar pensando “Yo debería estar escribiendo este código” tan frecuentemente. En su lugar, vas a notar que tus contribuciones impactan cada una de las funcionalidades.&lt;/p&gt;

&lt;h3 id=&quot;el-dilema-del-especialista-que-todo-lo-sabe&quot;&gt;El dilema del especialista que todo lo sabe&lt;/h3&gt;
&lt;p&gt;&lt;big&gt;&lt;i&gt;“El mundo es demasiado grande para que yo lo domine totalmente”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;descripción-1&quot;&gt;Descripción&lt;/h4&gt;

&lt;p&gt;Front-end, back-end, orientado a objetos, funcional, AngularJS, Java, Node.js, REST, Polymer, Machine Learning, IoT, Realidad Virtual, COBOL, Mainframes, Docker, APIs, Scala. La lista de tecnologías sigue creciendo. La capacidad del Arquitecto de Software no es infinita, así como tampoco lo es el tiempo que cualquier ser humano puede emplear en un set de tareas. De todos modos, pareciera como si al Arquitecto de Software se le pidiera que domine la lista entera. No podemos elegir ambas: ser especialistas y generalistas, ¿o si?&lt;/p&gt;

&lt;h4 id=&quot;síntomas-y-diagnóstico-1&quot;&gt;Síntomas y Diagnóstico&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Arquitecto de Software dubitativo: “Todos me preguntan acerca de todo y no hay forma de tener una buena respuesta a todas las preguntas”&lt;/li&gt;
  &lt;li&gt;Falta de &lt;em&gt;ownership&lt;/em&gt;: “No soy un experto en la materia. No puedo tomar esa decisión”&lt;/li&gt;
  &lt;li&gt;Decisiones en diferentes direcciones: “No estoy seguro de por qué estamos haciendo esto de esta manera. Parece como si todos hubieran tomado sus propias decisiones”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&quot;tratamiento-1&quot;&gt;Tratamiento&lt;/h4&gt;

&lt;p&gt;Un Arquitecto de Software debería ser un generalista por naturaleza. Incluso si no posee un gran conocimiento acerca de una tecnología, el camino al éxito es la capacidad de combinar un rango amplio de habilidades que solo pueden ser alcanzadas entendiendo qué tan profundo se debe investigar un determinado tema. De todos modos, hay áreas que un Arquitecto de Software debería dominar. La siguiente lista incluye algunas de estas áreas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Principios de Software: El Arquitecto de Software necesita dominar temas tales como los atributos de calidad del software: escalabilidad, disponibilidad, recuperabilidad, seguridad, mantenibilidad, entre otros &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ee658094.aspx&quot;&gt;[1]&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_system_quality_attributes&quot;&gt;[2]&lt;/a&gt;. También es requerido entender y poder diseñar aplicaciónes de forma en que fomenten no guardar estado, división en capas y desacoplamiento &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb402962.aspx&quot;&gt;[3]&lt;/a&gt;. Observen que estos conceptos son independientes de la tecnología, a pesar de que estas los logren de formas diversas.&lt;/li&gt;
  &lt;li&gt;Liderazgo: Poder convertirse en un líder técnico para el equipo es vital. Dominar conceptos y conductas tales como coaching y mentoring se vuelve realmente útil para los Arquitectos de Software.&lt;/li&gt;
  &lt;li&gt;Comunicación: Diseñar se trata de tomar decisiones. Estas decisiones deberían incluir conocimiento y experiencia, pero son el resultado de entender las necesidades de los distintos interesados. El diseño se vuelve más completo cuando miembros claves del equipo de desarrollo dan su opinión visión e ideas. Adicionalmente, una vez construido, el diseño debe ser compartido para que pueda ser implementado. El Arquitecto de Software es el punto central en donde todo se conecta. Dominar habilidades de comunicación no es opcional para este rol.&lt;/li&gt;
  &lt;li&gt;Investigación: Como se mencionó anteriormente, el Arquitecto de Software debería ser un generalista por naturaleza. Ser un buen investigador es la forma perfecta de estar al día con las últimas tecnologías y tendencias. Un Arquitecto de Software debería poder elegir qué tecnologías aprender y tener un buen entendimiento de las mismas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con esto en mente, es correcto decir que un Arquitecto de Software es un especialistas en temas de arquitectura, y como la arquitectura es acerca de los generalismos, los Arquitectos de Software son especialistas en ser generalistas.&lt;/p&gt;

&lt;p&gt;La razón por la cual la lista de tecnologías mencionadas en esta patología es virtualmente infinita es básicamente que hay demasiados profesionales desarrollando tecnologías nuevas y fascinantes todos los días. Entonces, la forma de dirigir un proyecto desde el punto de vista arquitectural es intercambiar conocimientos con un equipo mayor que será el verdadero dueño del conocimiento compartido.&lt;br /&gt;
De este modo, como un Arquitecto de Software, asegúrate de dominar las habilidades mencionadas anteriormente y vas a poder:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Construir una arquitectura que garantice los atributos de calidad del software&lt;/li&gt;
  &lt;li&gt;Entender qué tecnologías merecen más atención en cada momento&lt;/li&gt;
  &lt;li&gt;Tener un conocimiento general de estas tecnologías y tomar decisiones respecto de cuáles son necesarias para un proyecto particular&lt;/li&gt;
  &lt;li&gt;Investigar y empujar al equipo para utilizar estas tecnologías&lt;/li&gt;
  &lt;li&gt;Liderar al equipo para construir las mejores aplicaciones&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&quot;un-pie-en-cada-continente&quot;&gt;Un pie en cada continente&lt;/h3&gt;
&lt;p&gt;&lt;big&gt;&lt;i&gt;“Todavía no me pongo al día con todos los libros sobre soft skills y ya me estoy olvidando qué hacer después de atrapar una excepción”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;descripción-2&quot;&gt;Descripción&lt;/h4&gt;

&lt;p&gt;El camino y los primeros pasos para convertirse en un Arquitecto de Software son realmente emocionantes. Empezamos a abstraernos de un montón de detalles innecesarios, dejamos de lidiar con funcionalidades tediosas, y empezamos a encarar desafíos más a la altura. También comenzamos a pasar más tiempo dibujando, hablando, enseñando, reuniéndonos, y menos tiempo escribiendo código. Y de repente, allí estamos, con esa sensación de que aún no somos lo suficientemente buenos en todo lo nuevo pero ya estamos muy lejos de donde empezamos. Viajamos lejos de casa y ahora estamos en el medio del océano. Una mezcla entre un Ingeniero de Software oxidado y un Arquitecto de Software inexperto.&lt;/p&gt;

&lt;h4 id=&quot;síntomas-y-diagnóstico-2&quot;&gt;Síntomas y Diagnóstico&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Éxito por accidente: “Siento que la gente me elogia por cosas que se dieron por casualidad y no como resultado de mi trabajo”&lt;/li&gt;
  &lt;li&gt;Miedo a ser descubiertos: “Me asusta que alguien se de cuenta de que no estoy listo para ser un Arquitecto de Software”&lt;/li&gt;
  &lt;li&gt;Repetibilidad: “No se como terminé acá y estoy bastante seguro de que no voy a poder crecer hacia el siguiente nivel”&lt;/li&gt;
  &lt;li&gt;Buscando validación externa: “Alguien debería chequear que todas mis decisiones sean correctas”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&quot;tratamiento-2&quot;&gt;Tratamiento&lt;/h4&gt;

&lt;p&gt;No es fácil lidiar con estos sentimientos pero he aquí algo que siempre puede ayudar: no estás solo. En realidad estos síntomas (entre otros) son más frecuente de lo que la mayoría de nosotros creemos y, además, están agrupados bajo el nombre de “Síndrome del Impostor” &lt;a href=&quot;https://counseling.caltech.edu/general/InfoandResources/Impostor&quot;&gt;[1]&lt;/a&gt;, descubierto por Dr. Pauline R. Clance en 1978&lt;a href=&quot;https://en.wikipedia.org/wiki/Impostor_syndrome&quot;&gt;[2]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hay varias maneras de superar este síndrome, incluyendo&lt;a href=&quot;http://www.apa.org/gradpsych/2013/11/fraud.aspx&quot;&gt;[3]&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hablar con tus mentores&lt;/li&gt;
  &lt;li&gt;Reconocer tus habilidades&lt;/li&gt;
  &lt;li&gt;Recordando lo hacés bien&lt;/li&gt;
  &lt;li&gt;Reconociendo que nadie es perfecto&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quizá la parte más difícil es vencer el miedo de ser transparente y reflexivo acerca de esto con alguien, un amigo, un colega, o un jefe. Una vez que reconocemos y hacemos las paces con estos temas, todo se vuelve más fácil y estamos listos para dejarlo atrás y liberar nuestro potencial como Arquitectos de Software.&lt;/p&gt;

&lt;h3 id=&quot;el-dilema-del-mentor-sin-preparación&quot;&gt;El dilema del mentor sin preparación&lt;/h3&gt;
&lt;p&gt;&lt;big&gt;&lt;i&gt;“Si querías que fuera mentor de otros, deberías haberme preparado para eso”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;descripción-3&quot;&gt;Descripción&lt;/h4&gt;

&lt;p&gt;Incluir “mentoring” como parte de las responsabilidades del Arquitecto de Software tiene amplio consenso. Se espera que los Arquitectos de Software pasen tiempo con los Ingenieros aconsejándolos acerca de cómo desarrollar las habilidades faltantes, aprender nuevas técnicas de programación, frameworks y en general, preparándolos para dar el siguiente paso. Sin embargo a medida que los desarrolladores avanzan en sus carreras y eventualmente se convierten en Arquitectos de Software, empiezan a necesitar habilidades para las cuales no han sido entrenados, como el “mentoring” en sí mismo.&lt;/p&gt;

&lt;h4 id=&quot;síntomas-y-diagnóstico-3&quot;&gt;Síntomas y Diagnóstico&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Cuello de botella para “mentoring”: “Todos quieren que los ayude a crecer ¿Qué está ocurriendo?” La mayoría de los desarrolladores comienzan a buscar “mentoring” en el mismo Arquitecto de Software&lt;/li&gt;
  &lt;li&gt;Empatía superficial: “No estoy conectado con aquellos a quien estoy dando mentoring”. El mentor y el “mentoreado” suelen generar una relación cercana. Si la empatía flaquea, el mentoring probablemente falle&lt;/li&gt;
  &lt;li&gt;Comunicación ineficiente: “No logro que los desarrolladores sigan mi diseño”. Los Ingenieros de Software no entienden el diseño o no logran ver por qué se ha realizado de tal manera&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&quot;tratamiento-3&quot;&gt;Tratamiento&lt;/h4&gt;

&lt;p&gt;Los Arquitectos de Software deberían ser alentados a dar mentoreo en todas las habilidades necesarias para crecer en el aspecto de la carrera. Particularmente aquellas habilidades necesitadas para puestos más altos como ser el del Arquitecto de Software. Si el mentoreo se limita a las habilidades técnicas, el Ingeniero en Software probablemente no esté a la altura cuando se encuentre en una posición de liderazgo.&lt;/p&gt;

&lt;p&gt;Cabe mencionar que, a pesar de que no entraremos en temas antropológicos o sociológicos tales como la capacidad del ser humano de adquirir nuevos conocimientos, entendemos que algunas personas tienen una tendencia más natural al mentoreo. Incluso cuando un Arquitecto de Software debería ayudar a los Ingenieros de Software a desarrollar sus soft skills, cualquiera que aspire a convertirse en un Arquitecto de Software debería aprender sobre mentoreo en general. Una posibilidad para los Arquitectos de Software es buscar ayuda respecto del mentoreo en el liderazgo más senior de la organización de ingeniería (como ser VPs o Senior Directors).&lt;/p&gt;

&lt;h3 id=&quot;el-síndrome-de-la-pérdida-de-enfoque&quot;&gt;El síndrome de la pérdida de enfoque&lt;/h3&gt;

&lt;p&gt;&lt;big&gt;&lt;i&gt;“Cuando me siento y me concentro por 20 minutos sin interrupción, logro construir cosas asombrosas! ¿Cómo no hago esto 8 horas por día?”&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;

&lt;h4 id=&quot;descripción-4&quot;&gt;Descripción&lt;/h4&gt;

&lt;p&gt;Como Paul Graham describe en su ensayo “Maker’s Schedule, Manager’s Schedule”, mientras que la agenda de un manager puede cambiar cada hora, para los constructores ir a una reunión es como arrojar una excepción, lo cual puede ser muy costoso en términos de performance. A medida que estudiamos el rol y analizamos sus contradicciones, nos preguntamos: ¿Qué agenda seguimos los Arquitectos de Software?&lt;/p&gt;

&lt;h4 id=&quot;síntomas-y-diagnóstico-4&quot;&gt;Síntomas y Diagnóstico&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Adaptarse a los managers: “Los managers me arrastran a reuniones en cualquier momento”&lt;/li&gt;
  &lt;li&gt;Tiempo desperdiciado: “Soy un constructor. Construyo software que termina en producción, esa es mi mayor responsabilidad, no estar respondiendo las preguntas de los managers”&lt;/li&gt;
  &lt;li&gt;Agenda espaciada: “Déjenme escribir código por 4 horas seguidas y los voy a sorprender”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En la mayoría de las organizaciones, los Arquitectos de Software no son managers y por ende no se rigen por la agenda de un manager, e incluso demostrando que se rigen por la agenda de un constructor, suelen aparecer algunas dificultades.&lt;/p&gt;

&lt;p&gt;Como se mencionó en la sección “El Síndrome del mejor desarrollador sin impacto”, los Arquitectos de Software no necesariamente deberían ser responsables de escribir las funcionalidades más complejas, y este concepto podría usarse para argumentar que los Arquitectos de Software no son constructores. Sin embargo, como fue discutido, los Arquitectos de Software son los responsables de construir software de forma más transversal, definiendo mejores prácticas y los procesos de desarrollo, escribiendo frameworks o diseñando los planos de la aplicación. Estas tareas son, innegablemente, atribuibles a constructores.&lt;/p&gt;

&lt;p&gt;Los componentes transversales a menudo afectan a una gran variedad de actores e impactan en nuevas funcionalidades y bugs complejos. Los Arquitectos de Software son fecuentemente convocados a reuniones para analizar y comentar sobre estos temas, robándoles tiempo de diseño y mentoring. Cuanto más construye un Arquitecto de Software, a más reuniones será convocado, presentando un importante dilema.&lt;/p&gt;

&lt;h4 id=&quot;tratamiento-4&quot;&gt;Tratamiento&lt;/h4&gt;

&lt;p&gt;Los Arquitectos de Software son constructores y, como tales, necesitan tiempo para hacer. Construir software, incluso a niveles de arquitectura, requiere concentración y enfoque. Los Arquitectos de Software, como en cualquier posición prestigiosa, son consultados a menudo sobre un conjunto diverso de temas y son requeridos en reuniones. En lugar de luchar con eso, proponemos algunas ideas para minimizar el impacto que tienen estas reuniones sobre tus responsabilidades:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Se recomienda a los Arquitectos de Software que expliquen claramente a todos, que son constructores, y que deben estar profundamente involucrados en el proceso de construir software. El entendimiento por parte de los pares acerca de la posición del Arquitecto de Software es vital para minimizar las invitaciones a reuniones innecesarias.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Office Hours&lt;/em&gt;: Los Arquitectos de Software deberían apartar algo de tiempo para estar disponibles para otras personas. En lugar de adaptarse a las agendas de los managers, se recomienda que el Arquitecto de Softwarwe cree mecanismos para permitir a los managers adaptarse por su cuenta.&lt;/li&gt;
  &lt;li&gt;Delegar: No toda reunión a la que estés invitado necesita un Arquitecto de Software. La delegación a líderes técnicos o especialistas no solo te va a ahorrar tiempo, también va a permitir que otros crezcan.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Mientras que la analogía con las patologías puede ser algo trillada, creemos que hay valor en estudiarlas como las trampas habituales en el rol del Arquitecto de Software.&lt;/p&gt;

&lt;p&gt;Tal como se discutió en la introducción de este artículo, la Ingeniería de Software ha cambiado dramáticamente desde sus orígenes en el siglo pasado, pero sin duda sigue siendo un campo de estudio joven. Es entendible que un rol más nuevo no haya sido estudiado o estandarizado en profundidad.&lt;/p&gt;

&lt;p&gt;Esperamos que el análisis de estas patologías ayude a disparar más discusiones acerca de cómo debería evolucionar el rol del Arquitecto de Software, cómo evaluar su impacto, cómo deben crecer y cómo deben ser &lt;em&gt;coacheados&lt;/em&gt;. Esta es nuestra humilde pero sentida contribución al respecto.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Jul 2016 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/es/2016/07/14/a-compendium-software-architects-pathologies/</link>
        <guid isPermaLink="true">http://localhost:4000/es/2016/07/14/a-compendium-software-architects-pathologies/</guid>
        
        <category>Software</category>
        
        <category>Arquitercura</category>
        
        <category>Rol</category>
        
        <category>Management</category>
        
        <category>Trampas</category>
        
        
      </item>
    
      <item>
        <title>Nobel 0.2 soporta Swagger y RAML</title>
        <description>&lt;p&gt;Tiempo atrás, cuando trabajaba con el equipo que desarrolló &lt;a href=&quot;http://raml.org&quot;&gt;RAML&lt;/a&gt;, aproveché el tiempo de una &lt;em&gt;hackathon&lt;/em&gt; para crear una primera versión de &lt;a href=&quot;https://www.npmjs.com/package/nobel&quot;&gt;Nobel&lt;/a&gt;. En pocas palabras, Nobel es una aplicación que utiliza una definición de una API en un lenguaje de alto nivel (&lt;a href=&quot;http://swagger.io/&quot;&gt;Swagger&lt;/a&gt; o &lt;a href=&quot;http://raml.org&quot;&gt;RAML&lt;/a&gt;) para generar el código &lt;a href=&quot;http://www.arduino.cc/&quot;&gt;Arduino&lt;/a&gt; que implementa dicha API. Esta primera versión solo soportaba RAML como lenguaje de definición. Recientemente, habiendo podido investigar un poco más Swagger y sus herramientas, pude agregar soporte para este lenguaje también.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;swagger-o-raml&quot;&gt;Swagger o RAML&lt;/h2&gt;

&lt;p&gt;Creo haber visto más de 25 posts que hablan de esta temática (aquí comparto algunos links con ustedes: &lt;a href=&quot;http://modeling-languages.com/modeling-web-api-comparing/&quot;&gt;1&lt;/a&gt; &lt;a href=&quot;http://iasaglobal.org/swagger-vs-raml/&quot;&gt;2&lt;/a&gt; &lt;a href=&quot;https://www.ibm.com/developerworks/community/blogs/c06ef551-0127-483d-a104-cdd02b1cee31/entry/swagger_apiary_raml_versus_rest?lang=en&quot;&gt;3&lt;/a&gt;).
Independientemente de los resultados de estos análisis, tengo una pequeña lista de propios pensamientos al respecto habiéndo trabajado con ambos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RAML me resulta más fácil de entender y de escribir. Considero que la expresividad del lenguaje es superior.&lt;/li&gt;
  &lt;li&gt;RAML introdujo YAML desde el comienzo, mientras que swagger nos pedía que escribiéramos la definición directamente en JSON.&lt;/li&gt;
  &lt;li&gt;Swagger tiene mayor comunidad y sus herramientas parecen más completas y robustas.&lt;/li&gt;
  &lt;li&gt;Con el lanzamiento de Swagger 2.0, la capacidad expresiva del lenguaje mejoró notablemente, aunque la tendencia a traducir 1:1 el antiguo JSON al nuevo YAML no lo pone a la altura de RAML.&lt;/li&gt;
  &lt;li&gt;Mientras que el lanzamiento de RAML 1.0 trajo novedades más que interesantes (Noviembre 2015), el parser para Node.js sigue en “beta”, lo que hace que la piedra angular de una gran rama de herramientas pueda no ser lo suficientemente robusta para ser lanzada a producción.&lt;/li&gt;
  &lt;li&gt;El objeto que devuelve el parser de RAML (0.8) es realmente mucho más intuitivo y fácil de “navegar” que el que devuelve el parser de Swagger (2.0).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Independientemente de todo análisis, nada me impide hacer que la herramienta soporte ambos lenguajes y esto se debe principalmente a la capacidad de crear un objeto intermedio que es el que será utilizado para generar el código fuente. El siguiente diagrama representa dicho comportamiento.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/nobel-flow.png&quot; alt=&quot;Nobel - Flujo de la aplicación&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cómo-comenzar&quot;&gt;Cómo comenzar&lt;/h2&gt;

&lt;p&gt;El principal objetivo de Nobel es que cualquier persona con mínimos conocimientos sobre programación en Arduino, pueda desarrollar su propio dispositivo controlado remotamente vía HTTP. Habiendo dicho esto, es necesario: - Contar con una placa Arduino y las herramientas de desarrollo instaladas. - Contar con un &lt;a href=&quot;https://www.arduino.cc/en/Main/ArduinoEthernetShield&quot;&gt;Ethernet Shield&lt;/a&gt;. - Contar con conocimientos básicos de Swagger o RAML. - Tener instalado &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En la &lt;a href=&quot;https://www.npmjs.com/package/nobel&quot;&gt;documentación de Nobel&lt;/a&gt; se puede encontrar toda la información necesaria para entender su funcionamiento en profundidad, así como un &lt;a href=&quot;https://www.npmjs.com/package/nobel#hands-on-example&quot;&gt;ejemplo práctico&lt;/a&gt; para tener nuestro primer dispositivo funcionando en minutos.&lt;/p&gt;

&lt;h2 id=&quot;para-qué&quot;&gt;Para qué&lt;/h2&gt;

&lt;p&gt;La intención de Nobel es solucionar una problemática relativamente compleja: Exponer una API REST utilizando una placa Arduino. De esta forma, los desarrolladores pueden concentrarse en construir sus propios dispositivos. Ahora podés pensar en aquellos proyectos que venías postergando y comenzar a controlar tus propios dispositivos de forma remota.&lt;/p&gt;

&lt;h2 id=&quot;contribuir&quot;&gt;Contribuir&lt;/h2&gt;

&lt;p&gt;Nobel es una aplicación Open Source. Podés contribuir mejorando el código, incorporando nuevas funcionalidades, probando y reportando errores. En este link podés encontrar el &lt;a href=&quot;https://github.com/nohorbee/nobel&quot;&gt;repositorio GitHub&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 24 Apr 2016 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/es/2016/04/24/nobel-02-swagger-support/</link>
        <guid isPermaLink="true">http://localhost:4000/es/2016/04/24/nobel-02-swagger-support/</guid>
        
        <category>Nobel</category>
        
        <category>APIs</category>
        
        <category>Arduino</category>
        
        <category>IoT</category>
        
        <category>codegen</category>
        
        <category>RAML</category>
        
        <category>Swagger</category>
        
        
      </item>
    
      <item>
        <title>Docker en acción I</title>
        <description>&lt;p&gt;Hace unos (cuantos) años, hablar de &lt;em&gt;escalabilidad&lt;/em&gt; traía a la mesa una serie de sorpresas de todo tipo. Gente hablando de &lt;em&gt;escalabilidad&lt;/em&gt; como una cualidad del &lt;em&gt;hardware&lt;/em&gt;, gente demasiado soprendida al escuchar que el que escala no es el &lt;em&gt;hardware&lt;/em&gt; sino que las aplicaciones deben estar diseñadas de forma que puedan escalar, y por supuesto, la poca distinción entre &lt;em&gt;escalabilidad&lt;/em&gt; horizontal y vertical.&lt;br /&gt;
Afortunadamente, en estos días, el concepto ha sido digerido, explicado y aparentemente entendido, pero sigue resultando curioso entender por qué durante tantos años, hubo tanta confusión al respecto.&lt;br /&gt;
No se si es causa o efecto de esta &lt;em&gt;nueva era&lt;/em&gt;, pero la virtualización juega un rol principal, y especialmente, la virtualización mediante &lt;em&gt;containers&lt;/em&gt;.&lt;br /&gt;
Este es el primer &lt;em&gt;post&lt;/em&gt; de una saga de tres, en la cual se cubrirán los conceptos básicos de &lt;em&gt;escalabilidad&lt;/em&gt;, el rol/cultura &lt;em&gt;DevOps&lt;/em&gt;, introducción a &lt;em&gt;Docker&lt;/em&gt;, una explicación y guía para su instalación, primeros pasos y configuración de una &lt;em&gt;docker regisrty&lt;/em&gt;. En este primer post, &lt;em&gt;DevOps&lt;/em&gt;, y &lt;em&gt;escalabilidad&lt;/em&gt;.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;los-devops&quot;&gt;Los DevOps&lt;/h2&gt;

&lt;p&gt;Durante mucho tiempo el rol del desarrollador se encontraba bien definido y diferenciado del rol del operador. El desarrollador &lt;strong&gt;construía&lt;/strong&gt; software mientras que el operador se encargaba de la &lt;strong&gt;infraestructura&lt;/strong&gt; y el &lt;em&gt;deployment&lt;/em&gt; de los &lt;strong&gt;paquetes&lt;/strong&gt; de software a instalar. La industria del software mantuvo con orgullo esta separación alegando que el desarrollador podía abstraerse por completo del hardware y el modo de &lt;em&gt;deploy&lt;/em&gt;, concentrándose en escribir y refinar código.  &lt;strong&gt;Empieza a ser menos sorprendente que muchos desarrolladores no pudieran escribir código&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;escalable&lt;/em&gt;&lt;/strong&gt;.&lt;br /&gt;
Al abstraerse por completo, el desarrollador no solo se despreocupaba del hardware y la plataforma que fuera a ejecutar sus programas; también se despreocupaba de la &lt;em&gt;topología&lt;/em&gt; de dicha infraestructura. No era necesario saber si el servidor estaría corriendo en un &lt;em&gt;Intel, AMD u otro fabricante&lt;/em&gt;, ni conocer el sistema operativo (en el caso de &lt;em&gt;Java&lt;/em&gt;, se suponía que la &lt;em&gt;JVM&lt;/em&gt; exponía una plataforma unificada). Pero tampoco parecía ser necesario saber si habría una máquina como servidor o si serían 10, si estarían en &lt;em&gt;cluster&lt;/em&gt;, que pasaría si una máquina se encontrara apagada, etc. Como consecuencia, y a modo de ejemplo, guardar los datos del usuario &lt;em&gt;logueado&lt;/em&gt; en una sesión &lt;em&gt;HTTP&lt;/em&gt; resultaba tan sencillo y beneficioso que se convirtió en un dogma del desarrollo de aplicaciones &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Si bien muchas de las abstracciones resultaron medianamente beneficiosas (medianamente: no resulta tan distractivo conocer el &lt;em&gt;hardware&lt;/em&gt; donde correrá nuestra aplicación), otras se volvieron extremadamente inconvenientes. El desarrollo de aplicaciones &lt;em&gt;que escalen&lt;/em&gt; es un claro ejemplo de los inconvenientes de la abstracción total.&lt;br /&gt;
El concepto de &lt;em&gt;DevOps&lt;/em&gt; surge como una alternativa a esta abstracción (o al menos una redefinición). Si bien para la mayoría de las empresas &lt;em&gt;DevOps&lt;/em&gt; es un rol más bien vinculado con el &lt;em&gt;Ops&lt;/em&gt;, el concepto radica en una cultura de colaboración entre los desarrolladores y los operadores que beneficia el desarrollo, prueba, y &lt;em&gt;releases&lt;/em&gt; frecuentes y confiables. Como un efecto colateral (positivo), los desarrolladores se involucran en forma temprana en el entendimiento de la infraestructura pudiendo tenerla en cuenta al escribir las aplicaciones (y descartando aquella información que no les resulte relevante).&lt;/p&gt;

&lt;h2 id=&quot;escalabilidad&quot;&gt;Escalabilidad&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Una aplicación escala si puede ajustarse a una mayor exigencia de carga&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;escalabilidad-vertical&quot;&gt;Escalabilidad Vertical&lt;/h3&gt;

&lt;p&gt;Procesadores más potentes, con mayor cantidad de &lt;em&gt;cores&lt;/em&gt; pueden procesar mayor cantidad de &lt;em&gt;threads&lt;/em&gt;. Más memoria puede almacenar mayor cantidad de datos de los procesos en ejecución, y de esa forma, una aplicación puede soportar mayor carga. A este tipo de &lt;em&gt;escalabilidad&lt;/em&gt; se la conoce como &lt;em&gt;escalabilidad vertical&lt;/em&gt;.&lt;br /&gt;
Una ventaja (relativa), es que puede lograrse aprovechando capacidades de los lenguajes más populares (como ser JAVA). Pero una gran desventaja es que, llegado a un punto, el aumento de &lt;em&gt;performance&lt;/em&gt; en relación al aumento de &lt;em&gt;carga&lt;/em&gt; se vuelve asintótico.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/verticalScaling.png&quot; alt=&quot;Escalabilidad Vertical - Performance / Carga&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En la imagen se puede ver como, a medida que aumenta la carga, la performance aumenta cada vez con mayor dificultad hasta llegar a un punto en donde no puede aumentar más. Esto implica que todos los usuarios de una aplicación, comenzarán a experimentar una baja de performance, o incluso, una interrupción total del sistema.&lt;br /&gt;
Al &lt;em&gt;escalar verticalmente&lt;/em&gt;, incorporando un servidor con mayores prestaciones de hardware, logramos mejorar la performance. Pero como se puede ver al comparar las curvas con la línea de &lt;em&gt;escalabilidad perfecta&lt;/em&gt; (o &lt;em&gt;escalabilidad lineal&lt;/em&gt;), el punto en donde el nuevo servidor deja de soportar la carga de trabajo, ocurre bastante antes de alcanzar la &lt;em&gt;escalabilidad perfecta&lt;/em&gt;. Una progresión de este comportamiento indicaría que, en cierto punto, invertir en &lt;em&gt;hardware&lt;/em&gt; más potente (y costoso), no lograría acercarnos a la &lt;em&gt;escalabilidad perfecta&lt;/em&gt;, alcanzando un &lt;strong&gt;límite de escalabilidad&lt;/strong&gt; (también asintótico).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/verticalScalingSummary.png&quot; alt=&quot;Escalabilidad Vertical - Ganancia / Potencia&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;escalabilidad-horizontal&quot;&gt;Escalabilidad Horizontal&lt;/h3&gt;

&lt;p&gt;Para superar las limitaciones presentadas por la &lt;em&gt;escalabilidad vertical&lt;/em&gt;, se produjo un cambio de paradigma en donde, en lugar de pensar en equipos con más potencia, se piensa en mayor cantidad de equipos con menor potencia.&lt;br /&gt;
A diferencia de la &lt;em&gt;escalabilidad vertical&lt;/em&gt;, en este paradigma, la administración se vuelve más compleja, y el desarrollo necesita considerar el hecho de que el software estará distribuido en distintos equipos (con recursos separados). Pero, además de superar las limitaciones de la &lt;em&gt;escalabiliad vertical&lt;/em&gt;, el hecho de poder &lt;em&gt;escalar&lt;/em&gt; aumentando la cantidad de equipos (o nodos), termina siendo menos costoso e incluso, aprovechando técnicas avanzadas de virtualización como las ofrecidas por &lt;em&gt;Docker&lt;/em&gt;, pueden automatizarse para responder dinámicamente a la carga en tiempo real.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/horizontalScaling.png&quot; alt=&quot;Escalabilidad Horizontal - Performance / Carga&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como se ve en la imagen, hay un punto en donde un servidor ya no logra mantener la performance necesaria para soportar la carga. En el momento donde la curva de performance cruza la recta de &lt;em&gt;escalabilidad perfecta&lt;/em&gt; (o quizás un poco antes), es tiempo de iniciar un nuevo servidor. De esta manera, por aproximación, se logra mantener una relación carga/performance que se ajusta a la &lt;em&gt;escalabilidad perfecta&lt;/em&gt; y, en tanto y en cuanto el inicio de un nuevo servidor pueda realizarse de manera automática y veloz, el aprovisionamiento podría realizarse &lt;em&gt;a demanda&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;El concepto de &lt;em&gt;virtualización mediante containers&lt;/em&gt; apunta exáctamente a brindar una solución para ese requerimiento. Como se verá en el siguiente &lt;em&gt;post&lt;/em&gt;, &lt;em&gt;Docker&lt;/em&gt; ofrece una manera más eficaz de &lt;em&gt;virtualización&lt;/em&gt; que las tradicionales &lt;em&gt;Virtual Machine&lt;/em&gt;, y si bien sus beneficios resultan instantáneos, se vuelven un verdadero diferencial al pensar en pequeños nodos que se &lt;em&gt;levantan&lt;/em&gt; en cuestión de segundos cuando es necesario.&lt;br /&gt;
Como veremos también, el hecho de que estos nodos levanten tan rápidamente, es una combinación de las capacidades de la tecnología (que reutiliza el Kernel de un solo Sistema Operativo que ya está corriendo) y el diseño de componentes pequeños que levantarán al mismo tiempo en distintos nodos (reduciendo el tiempo de arranque y paralelizandolo).&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/es/2015/12/03/docker-in-action-IoIII/</link>
        <guid isPermaLink="true">http://localhost:4000/es/2015/12/03/docker-in-action-IoIII/</guid>
        
        <category>Docker</category>
        
        <category>Container</category>
        
        <category>Microservices</category>
        
        <category>DevOps</category>
        
        
      </item>
    
      <item>
        <title>De una API a una Streaming API</title>
        <description>&lt;p&gt;Son muchas las ventajas de desarrollar una &lt;em&gt;API&lt;/em&gt; que exponga los recursos de nuestra aplicación. En particular, se logra reducir al mínimo el acoplamiento entre &lt;em&gt;capas&lt;/em&gt;, y mejor aún &lt;strong&gt;permite que distintas aplicaciones accedan a nuestros recursos&lt;/strong&gt;. En el caso de &lt;em&gt;APIs&lt;/em&gt; bien diseñadas, además, esto ocurrirá de una forma intuitiva.&lt;br /&gt;
Pero incluso las mejores &lt;em&gt;APIs&lt;/em&gt; pueden estar implementadas para que el cliente realice una llamada cada vez que quiere conocer el estado de un recurso. Para este caso, la &lt;em&gt;API&lt;/em&gt; deberá devolver el recurso entero cada vez que sea solicitado.&lt;br /&gt;
Pero, ¿no sería más eficiente si la &lt;em&gt;API&lt;/em&gt; solo devolviera lo que cambió desde la última vez que fue consultada? ¿Y no sería incluso más eficiente si el cliente no necesitara llamar a la &lt;em&gt;API&lt;/em&gt; para chequear si algo cambió?&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Streaming APIs&lt;/em&gt;&lt;/strong&gt; (y su buena implementación) apuntan exactamente a esto. En este &lt;em&gt;post&lt;/em&gt; veremos cómo pueden ser implementadas, y cómo funciona &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt; para convertir una &lt;em&gt;API&lt;/em&gt; tradicional en una &lt;em&gt;Streaming API&lt;/em&gt;.
&lt;!--MORE--&gt;&lt;/p&gt;

&lt;h2 id=&quot;streaming-apis&quot;&gt;Streaming APIs&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Una &lt;em&gt;Streaming API&lt;/em&gt; es capaz de enviar notificaciones al cliente.&lt;/strong&gt;&lt;br /&gt;
En los esquemas tradicionales de &lt;em&gt;HTTP&lt;/em&gt; (protocolo en el que se basan las &lt;em&gt;webAPIs&lt;/em&gt;), el cliente envía un &lt;em&gt;request&lt;/em&gt; al servidor. El servidor lo recibe, interpreta, incluso llama a los &lt;em&gt;listeners&lt;/em&gt; correspondientes (si los hubiera) y devuelve un &lt;em&gt;response&lt;/em&gt; al cliente. Bajo este esquema, una vez que el servidor envió el &lt;em&gt;response&lt;/em&gt;, no puede enviar nada más al cliente hasta que este último realice un nuevo &lt;em&gt;request&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/traditional-request.png&quot; alt=&quot;Traditional HTTP Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero es posible que nuestro servidor reciba el &lt;em&gt;request&lt;/em&gt;, lo procese, incluso envíe un &lt;em&gt;response&lt;/em&gt; pero en lugar de cerrarlo, lo deje en un estado &lt;em&gt;on-hold&lt;/em&gt;. De esta forma, el server podría seguir enviando información al cliente por un período prolongado de tiempo. Esta técnica es conocida como &lt;strong&gt;&lt;em&gt;long polling&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/long-polling-request.png&quot; alt=&quot;Long Polling HTTP Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mediante &lt;em&gt;long polling&lt;/em&gt;, nuestra &lt;em&gt;API&lt;/em&gt; podría recibir una llamada y proveer el recurso que está siendo solicitado como primer &lt;em&gt;response&lt;/em&gt; pero, en lugar de cerrar la conexión, la &lt;em&gt;API&lt;/em&gt; podría enviar nuevos &lt;em&gt;responses&lt;/em&gt; en caso de que el recurso cambie luego del primer &lt;em&gt;response&lt;/em&gt;.&lt;br /&gt;
Adicionalmente, la &lt;em&gt;API&lt;/em&gt; podría enviar solo las “novedades” referentes al recurso, o en otras palabras “lo que cambió”.&lt;/p&gt;

&lt;p&gt;Analicemos el siguiente ejemplo&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/streaming-API-example.png&quot; alt=&quot;Streaming API example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1- El cliente 1 envía un &lt;em&gt;request&lt;/em&gt; con método &lt;em&gt;GET&lt;/em&gt; para solicitar el libro con id 123321.&lt;br /&gt;
2- El servidor devuelve un &lt;em&gt;response&lt;/em&gt; al cliente 1 con código &lt;em&gt;200 OK&lt;/em&gt; y un &lt;em&gt;JSON&lt;/em&gt; con la información del libro.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My book&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;ISBN&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4th&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Asumamos una estructura compleja y una gran cantidad de campos&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;3- El cliente 2 envía un &lt;em&gt;request&lt;/em&gt; con método &lt;em&gt;PATCH&lt;/em&gt; para modificar la edición (ahora “5th”).&lt;br /&gt;
4- El servidor envía un &lt;em&gt;response&lt;/em&gt; al cliente 2 con código &lt;em&gt;200 OK&lt;/em&gt;.&lt;br /&gt;
5- El servidor envía un &lt;em&gt;response&lt;/em&gt; al cliente 1 con código &lt;em&gt;200 OK&lt;/em&gt; y un &lt;em&gt;JSON&lt;/em&gt; con la información del libro.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;My book&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;ISBN&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123321&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;5th&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Year&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Asumamos una estructura compleja y una gran cantidad de campos&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Se deja de lado la discusión acerca de los métodos a utilizar (&lt;em&gt;PATCH&lt;/em&gt; o &lt;em&gt;PUT&lt;/em&gt;) y los códigos &lt;em&gt;HTTP&lt;/em&gt; correspondientes. Esta temática amerita un &lt;em&gt;post&lt;/em&gt; aparte.&lt;/p&gt;

&lt;p&gt;Gracias a que el servidor implementa &lt;em&gt;long polling&lt;/em&gt;, la &lt;em&gt;API&lt;/em&gt; puede informar al cliente, que el recurso que había solicitado en primer lugar ha cambiado, sin que el cliente realice una segunda consulta.&lt;br /&gt;
Al proceso por el cual las &lt;em&gt;APIs&lt;/em&gt; notifican &lt;em&gt;proactivamente&lt;/em&gt; al cliente sobre cambios en los recursos se lo conoce como &lt;em&gt;Push Notification&lt;/em&gt;. Cabe aclarar que &lt;em&gt;long polling&lt;/em&gt; no es la única forma de lograr este comportamiento. &lt;a href=&quot;https://www.websocket.org/&quot;&gt;&lt;em&gt;WebSockets&lt;/em&gt;&lt;/a&gt; es otra especificación que logra un comportamiento similar.&lt;/p&gt;

&lt;p&gt;A pesar de que en el ejemplo se puede ver la conveniencia de implementar &lt;em&gt;Push Notifications&lt;/em&gt; como parte de nuestra &lt;em&gt;Streaming API&lt;/em&gt;, no se ve un impacto en cuanto a la performance. Si bien es cierto que el cliente no estará enviando un &lt;em&gt;request&lt;/em&gt; periódicamente para verificar si el recurso cambió, cada vez que la &lt;em&gt;API&lt;/em&gt; haga un &lt;em&gt;push&lt;/em&gt; se estará enviando el recurso completo al cliente. Implementando una lógica &lt;em&gt;diferencial&lt;/em&gt; en el servidor, nuestra &lt;em&gt;API&lt;/em&gt; podría enviar solo las actualizaciones al momento de realizar un &lt;em&gt;push&lt;/em&gt;. Para nuestro ejemplo, esto podría ser:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;op&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;PATCH&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;/Edition&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;5th&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Este &lt;em&gt;JSON&lt;/em&gt; informa al cliente que se ha modificado el campo “Edition” y su nuevo valor. El cliente podrá actualizar su modelo apropiadamente con esta información. De esta forma, sin importar que tan grande sea el recurso solicitado, el &lt;em&gt;push&lt;/em&gt; solo envía los campos que han cambiado desde la última actualización.&lt;/p&gt;

&lt;h3 id=&quot;tiempo-máximo-de-request&quot;&gt;Tiempo máximo de request&lt;/h3&gt;

&lt;p&gt;Es una buena práctica evitar &lt;em&gt;requests&lt;/em&gt; de tiempo infinito. Las conexiones pueden tener un &lt;em&gt;timeout&lt;/em&gt; o incluso podrían perderse por condiciones físicas de los servidores o la red. El impacto en código puede generalizarse:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Servidor: Chequear que el &lt;em&gt;response&lt;/em&gt; se encuentre abierto antes de enviar datos.&lt;/li&gt;
  &lt;li&gt;Cliente: Chequear que el &lt;em&gt;request&lt;/em&gt; se encuentre activo. En caso contrario, realizar un nuevo &lt;em&gt;request&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En caso que los &lt;em&gt;timeout&lt;/em&gt; sean demasiado cortos, cada nuevo &lt;em&gt;request&lt;/em&gt; estaría recibiendo el recurso entero (nuevamente). Una solución frecuente es enviar al servidor el &lt;em&gt;timestamp&lt;/em&gt; de la última notificación recibida. De esta manera, en caso de no ser el primer &lt;em&gt;request&lt;/em&gt;, el servidor podría responder con las novedades ocurridas a partir de ese &lt;em&gt;timestamp&lt;/em&gt;. Para una correcta implementación, la lógica corriendo del lado del servidor debe guardar un histórico de cambios.&lt;/p&gt;

&lt;p&gt;Hasta aquí hemos visto una explicación de lo que es una &lt;em&gt;Streaming API&lt;/em&gt; y algunos enfoques de implementación (no es el objetivo de este &lt;em&gt;post&lt;/em&gt; mostrar un ejemplo concreto).&lt;/p&gt;

&lt;h2 id=&quot;convirtiendo-una-api-en-una-streaming-api&quot;&gt;Convirtiendo una API en una Streaming API&lt;/h2&gt;

&lt;p&gt;Ahora ¿Que ocurre cuando una &lt;em&gt;API&lt;/em&gt; no es una &lt;em&gt;Streaming API&lt;/em&gt;? La respuesta corta: La utilizamos como una &lt;em&gt;API&lt;/em&gt; normal. Es decir que, cada vez que necesitemos conocer el estado de un recurso, realizaremos un &lt;em&gt;request&lt;/em&gt;.&lt;br /&gt;
Una respuesta un poco más completa incluye la implementación de un &lt;em&gt;proxy&lt;/em&gt; que sea capaz de capturar un &lt;em&gt;request&lt;/em&gt;, almacenar la respuesta, informarla al cliente y repetir la operación las veces que sea necesario. Este &lt;em&gt;proxy&lt;/em&gt; implementaría &lt;em&gt;long polling&lt;/em&gt;, es decir que podría notificar al cliente acerca de los cambios ni bien los los detecte. El siguiente diagrama ilustra este escenario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/streaming-API-proxy.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Veamos lo que ocurre en cada uno de los instantes (1-4):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;El cliente 1 solicita el recurso “book” con id “123321”.&lt;br /&gt;
  1.1 El &lt;em&gt;request&lt;/em&gt; no es atendido por el servidor sino por un &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  1.2 El &lt;em&gt;proxy&lt;/em&gt; redirecciona el &lt;em&gt;request&lt;/em&gt; al servidor.&lt;br /&gt;
  1.3 El servidor devuelve un &lt;em&gt;response&lt;/em&gt; al &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  1.4 El &lt;em&gt;proxy&lt;/em&gt; redirecciona el &lt;em&gt;response&lt;/em&gt; al cliente.&lt;/li&gt;
  &lt;li&gt;El &lt;em&gt;proxy&lt;/em&gt; envía un nuevo &lt;em&gt;request&lt;/em&gt; al servidor (y lo hará cada X segundos).&lt;br /&gt;
  2.1 El servidor devuelve un &lt;em&gt;response&lt;/em&gt; al &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  2.2 El &lt;em&gt;proxy&lt;/em&gt; compara el recurso obtenido durante este &lt;em&gt;request&lt;/em&gt; con el obtenido durante el &lt;em&gt;request&lt;/em&gt; anterior y detecta que no hubo cambios.&lt;br /&gt;
  2.3 El &lt;em&gt;proxy&lt;/em&gt; no realiza ningún &lt;em&gt;Push&lt;/em&gt; hacia el cliente.&lt;/li&gt;
  &lt;li&gt;El cliente 2 envía un &lt;em&gt;request&lt;/em&gt; con método &lt;em&gt;PATCH&lt;/em&gt;.&lt;br /&gt;
  3.1 El cliente envía el request directamente al servidor (no hay motivos para involucrar a &lt;strong&gt;este tipo de&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;proxy&lt;/em&gt;&lt;/strong&gt; en una operación de escritura).&lt;br /&gt;
  3.2 El servidor devuelve el &lt;em&gt;response&lt;/em&gt; confirmando la operación.&lt;/li&gt;
  &lt;li&gt;El &lt;em&gt;proxy&lt;/em&gt; envía un nuevo &lt;em&gt;request&lt;/em&gt; al servidor (uno más de los que envía cada X segundos).&lt;br /&gt;
  4.1 El servidor devuelve un &lt;em&gt;response&lt;/em&gt; al &lt;em&gt;proxy&lt;/em&gt;.&lt;br /&gt;
  4.2 El &lt;em&gt;proxy&lt;/em&gt; compara el recurso obtenido durante este &lt;em&gt;request&lt;/em&gt; con el obtenido durante el &lt;em&gt;request&lt;/em&gt; anterior y detecta que hubo cambios.&lt;br /&gt;
  4.3 El &lt;em&gt;proxy&lt;/em&gt; realiza un &lt;em&gt;Push&lt;/em&gt; hacia el cliente informando los cambios (idealmente, informa solo las novedades en lugar de reenviar el recurso completo).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;De esta forma, y sin modificar una sola línea del código de la &lt;em&gt;API&lt;/em&gt;, logramos emular el comportamiento de una &lt;em&gt;streaming API&lt;/em&gt; (al menos desde el punto de vista del cliente).&lt;/p&gt;

&lt;p&gt;Lo interesante de esta implementación es que no resulta difícil generalizarla para prácticamente cualquier &lt;em&gt;API&lt;/em&gt; existente. Es decir que se podría implementar una plataforma que ponga esta lógica a disposición de los usuarios de una &lt;em&gt;API&lt;/em&gt; convirtiéndola en una &lt;em&gt;streaming API&lt;/em&gt; de manera transparente para el proveedor de la &lt;em&gt;API&lt;/em&gt; y casi transparente para el cliente.&lt;br /&gt;
Esto es precisamente lo que hace &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ejemplo-utilizando-streamdataio&quot;&gt;Ejemplo utilizando streamdata.io&lt;/h3&gt;

&lt;p&gt;Tomando el servicio provisto por &lt;a href=&quot;https://bitcoinaverage.com&quot;&gt;BitcoinAverage&lt;/a&gt;, y viendo algún método simple de su &lt;a href=&quot;https://bitcoinaverage.com/api&quot;&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt;, escribimos un código sencillo que nos permita consultar cada 5 segundos, el siguiente reucrso: https://api.bitcoinaverage.com/ticker/global/EUR/&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.bitcoinaverage.com/ticker/global/EUR/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Utilizando &lt;a href=&quot;https://jquery.com/&quot;&gt;JQuery&lt;/a&gt; para obtener los beneficios del método &lt;code&gt;ajax&lt;/code&gt;, y la función &lt;code&gt;setInterval&lt;/code&gt; que nos permite ejecutar una función repetidas veces espaciadas por un intervalo de tiempo, obtenemos la siguiente respuesta en la consola:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/setIntervalClientConsole.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como se puede ver, los &lt;em&gt;requests&lt;/em&gt; son enviados cada 5 segundos y el objeto entero es devuelto sin importar si fue modificado o no.&lt;/p&gt;

&lt;p&gt;Desde la vista de &lt;em&gt;Network&lt;/em&gt; también podemos ver algo interesante&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/setIntervalClientNetwork.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cada &lt;em&gt;request&lt;/em&gt; queda evidenciado por un nuevo &lt;em&gt;GET&lt;/em&gt; al servidor. Además, algunos códigos de respuesta son &lt;em&gt;200 OK&lt;/em&gt; mientras que otros son &lt;em&gt;304 Not Modified&lt;/em&gt;. Este último código indica que un recurso no cambió desde la última vez que fue solicitado.&lt;/p&gt;

&lt;h3 id=&quot;utilizando-streamdataio&quot;&gt;Utilizando streamdata.io&lt;/h3&gt;

&lt;p&gt;Los pasos para comenzar a utilizar &lt;a href=&quot;http://streamdata.io&quot;&gt;streamdata.io&lt;/a&gt; son realmente sencillos y pueden ser encontrados en su web. A modo de resumen:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Crear una cuenta.&lt;/li&gt;
  &lt;li&gt;Al acceder a nuestra cuenta veremos la pantalla principal con un &lt;em&gt;dashboard&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Crear una aplicación (llamémosla “OutBitApp” para el ejemplo).&lt;/li&gt;
  &lt;li&gt;Ingresar en la aplicación.&lt;/li&gt;
  &lt;li&gt;Chequear la configuración y asegurarse que “Client Request Signature” esté desactivado (&lt;strong&gt;solo para este ejemplo, no queremos poner más complejidad de la necesaria&lt;/strong&gt;).&lt;/li&gt;
  &lt;li&gt;En esta misma pantalla se puede ver (e incluso renovar) el &lt;em&gt;App Token&lt;/em&gt; (será necesario para autenticar el código del cliente).&lt;/li&gt;
  &lt;li&gt;Seguir las instrucciones en el &lt;a href=&quot;https://github.com/streamdataio/streamdataio-js-sdk&quot;&gt;repositorio oficial&lt;/a&gt; para generar la &lt;em&gt;SDK&lt;/em&gt; que nos permite interactuar con &lt;em&gt;streamdata.io&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Con estos pasos cumplidos, el siguiente código accede a la misma &lt;em&gt;API&lt;/em&gt; del ejemplo anterior pero recibiendo &lt;em&gt;Push notifications&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;./js/streamdataio.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;streamdataio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://api.bitcoinaverage.com/ticker/global/EUR/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/APP TOKEN/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;init&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;update&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;myEventSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;See the console&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Se debe reemplazar el “APP TOKEN” por el generado para su aplicación. Recuerden que &lt;em&gt;JavaScript&lt;/em&gt; puede correr en un cliente cualquiera (browser) por lo que no debe incluirse el &lt;em&gt;Token&lt;/em&gt; en dicho código. Esto es válido solo para pruebas y ejemplos.&lt;/p&gt;

&lt;p&gt;Observemos la respuesta obtenida en la consola:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientConsole.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Si bien no se alcanza a ver, los objetos no son &lt;em&gt;loggeados&lt;/em&gt; en intervalos regulares de tiempo. Esto se debe a que el cliente solo &lt;em&gt;loggea&lt;/em&gt; cuando recibe una respuesta y esto solo ocurre cuando hay cambios en el recurso &lt;em&gt;observado&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;El primer objeto recibido (se distingue porque está acompañado por un “init”) es similar al del ejemplo anterior, es decir, el objeto completo. Los demás (acompañados por un “update”) son en realidad, &lt;em&gt;arrays&lt;/em&gt; de objetos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Analicemos uno de dichos &lt;em&gt;arrays&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientparticularUpdate.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cada objeto del &lt;em&gt;array&lt;/em&gt; indica que se ha reemplazado un atributo y especifica su nuevo valor. No todos los &lt;em&gt;arrays&lt;/em&gt; tienen  la misma longitud (4, 1 y 2 como se ve en la imagen anterior). Esto indica la cantidad de cambios que se detectaron en cada respuesta.&lt;/p&gt;

&lt;p&gt;Finalmente, observemos lo que ocurre con la vista &lt;em&gt;network&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/longPollingClientNetwork.png&quot; alt=&quot;Streaming API proxy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Se puede observar un solo &lt;em&gt;request&lt;/em&gt; a una &lt;em&gt;url&lt;/em&gt; perteneciente a &lt;em&gt;streamdata&lt;/em&gt; (el &lt;em&gt;proxy&lt;/em&gt;) y como parámetros, el &lt;em&gt;token&lt;/em&gt; (sólo aquellos clientes que lo conozcan podrán acceder a la aplicación de &lt;em&gt;streamdata.io&lt;/em&gt;) y la &lt;em&gt;url&lt;/em&gt; del &lt;em&gt;request&lt;/em&gt; original. Ese request estuvo abierto por 2.5 minutos recibiendo notificaciones cada vez que el recurso cambiaba en el servidor.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Es clara la practicidad e incluso posibles mejoras en &lt;em&gt;performance&lt;/em&gt; al utilizar una &lt;em&gt;Stremaing API&lt;/em&gt;. Basta con pensar en las &lt;em&gt;web applications&lt;/em&gt; actuales para ver la utilidad de recibir notificaciones cuando cambia el modelo en nuestro servidor.&lt;br /&gt;
Pero no siempre contamos con una &lt;em&gt;Streaming API&lt;/em&gt;. A menudo no estamos consultando una &lt;em&gt;API&lt;/em&gt; propia y muchas veces, nuestra &lt;em&gt;API&lt;/em&gt; ya existe y no hay tiempo o dinero para cambiarla (convertirla en una &lt;em&gt;streaming API&lt;/em&gt;). Mediante un &lt;em&gt;proxy&lt;/em&gt; se puede emular el comportamiento de una &lt;em&gt;streaming API&lt;/em&gt; e incluso si no contáramos con el tiempo para implementar esta solución, es posible utilizar una plataforma como &lt;em&gt;streamdata.io&lt;/em&gt; la cual provee esta funcionalidad como un servicio en la nube.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 00:00:00 -0300</pubDate>
        <link>http://localhost:4000/es/2015/09/09/from-api-to-streaming-api/</link>
        <guid isPermaLink="true">http://localhost:4000/es/2015/09/09/from-api-to-streaming-api/</guid>
        
        <category>API</category>
        
        <category>Streaming</category>
        
        <category>Long</category>
        
        <category>Polling</category>
        
        
      </item>
    
  </channel>
</rss>
